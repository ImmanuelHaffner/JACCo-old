0
cmp.c:1:1 keyword struct
cmp.c:1:8 identifier fooalign
cmp.c:1:17 punctuator {
cmp.c:1:18 keyword char
cmp.c:1:23 identifier x
cmp.c:1:24 punctuator ;
cmp.c:1:26 keyword double
cmp.c:1:33 identifier d
cmp.c:1:34 punctuator ;
cmp.c:1:35 punctuator }
cmp.c:1:36 punctuator ;
cmp.c:2:1 keyword union
cmp.c:2:7 identifier fooround
cmp.c:2:16 punctuator {
cmp.c:2:17 keyword long
cmp.c:2:22 identifier x
cmp.c:2:23 punctuator ;
cmp.c:2:25 keyword double
cmp.c:2:32 identifier d
cmp.c:2:33 punctuator ;
cmp.c:2:34 punctuator }
cmp.c:2:35 punctuator ;
cmp.c:4:1 keyword int
cmp.c:5:1 identifier foo
cmp.c:5:5 punctuator (
cmp.c:5:6 punctuator )
cmp.c:6:1 punctuator {
cmp.c:7:3 keyword int
cmp.c:7:7 identifier extra
cmp.c:7:13 punctuator =
cmp.c:7:15 constant 4
cmp.c:7:16 punctuator ;
cmp.c:8:3 keyword if
cmp.c:8:6 punctuator (
cmp.c:8:7 identifier extra
cmp.c:8:13 punctuator <
cmp.c:8:15 keyword sizeof
cmp.c:8:22 punctuator (
cmp.c:8:23 keyword union
cmp.c:8:29 identifier fooround
cmp.c:8:37 punctuator )
cmp.c:8:38 punctuator )
cmp.c:9:5 identifier extra
cmp.c:9:11 punctuator =
cmp.c:9:13 keyword sizeof
cmp.c:9:20 punctuator (
cmp.c:9:21 keyword union
cmp.c:9:27 identifier fooround
cmp.c:9:35 punctuator )
cmp.c:9:36 punctuator ;
cmp.c:10:3 keyword return
cmp.c:10:10 identifier extra
cmp.c:10:15 punctuator ;
cmp.c:11:1 punctuator }
