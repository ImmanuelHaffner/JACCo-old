0
cp.c:1:1 keyword struct
cp.c:1:8 identifier _obstack_chunk
cp.c:2:1 punctuator {
cp.c:3:3 keyword char
cp.c:3:8 punctuator *
cp.c:3:9 identifier limit
cp.c:3:14 punctuator ;
cp.c:4:3 keyword struct
cp.c:4:10 identifier _obstack_chunk
cp.c:4:25 punctuator *
cp.c:4:26 identifier prev
cp.c:4:30 punctuator ;
cp.c:5:3 keyword char
cp.c:5:8 identifier contents
cp.c:5:16 punctuator [
cp.c:5:17 constant 4
cp.c:5:18 punctuator ]
cp.c:5:19 punctuator ;
cp.c:6:1 punctuator }
cp.c:6:2 punctuator ;
cp.c:8:1 keyword struct
cp.c:8:8 identifier obstack
cp.c:9:1 punctuator {
cp.c:10:3 keyword long
cp.c:10:8 identifier chunk_size
cp.c:10:18 punctuator ;
cp.c:11:3 keyword struct
cp.c:11:10 identifier _obstack_chunk
cp.c:11:24 punctuator *
cp.c:11:26 identifier chunk
cp.c:11:31 punctuator ;
cp.c:12:3 keyword char
cp.c:12:8 punctuator *
cp.c:12:9 identifier object_base
cp.c:12:20 punctuator ;
cp.c:13:3 keyword char
cp.c:13:8 punctuator *
cp.c:13:9 identifier next_free
cp.c:13:18 punctuator ;
cp.c:14:3 keyword char
cp.c:14:8 punctuator *
cp.c:14:9 identifier chunk_limit
cp.c:14:20 punctuator ;
cp.c:15:3 keyword int
cp.c:15:7 identifier temp
cp.c:15:11 punctuator ;
cp.c:16:3 keyword int
cp.c:16:7 identifier alignment_mask
cp.c:16:21 punctuator ;
cp.c:17:3 keyword struct
cp.c:17:10 identifier _obstack_chunk
cp.c:17:25 punctuator *
cp.c:17:26 punctuator (
cp.c:17:27 punctuator *
cp.c:17:28 identifier chunkfun
cp.c:17:36 punctuator )
cp.c:17:38 punctuator (
cp.c:17:39 punctuator )
cp.c:17:40 punctuator ;
cp.c:18:3 keyword void
cp.c:18:8 punctuator (
cp.c:18:9 punctuator *
cp.c:18:10 identifier freefun
cp.c:18:17 punctuator )
cp.c:18:19 punctuator (
cp.c:18:20 punctuator )
cp.c:18:21 punctuator ;
cp.c:19:1 punctuator }
cp.c:19:2 punctuator ;
cp.c:21:1 keyword struct
cp.c:21:8 identifier fooalign
cp.c:21:17 punctuator {
cp.c:21:18 keyword char
cp.c:21:23 identifier x
cp.c:21:24 punctuator ;
cp.c:21:26 keyword double
cp.c:21:33 identifier d
cp.c:21:34 punctuator ;
cp.c:21:35 punctuator }
cp.c:21:36 punctuator ;
cp.c:22:1 keyword union
cp.c:22:7 identifier fooround
cp.c:22:16 punctuator {
cp.c:22:17 keyword long
cp.c:22:22 identifier x
cp.c:22:23 punctuator ;
cp.c:22:25 keyword double
cp.c:22:32 identifier d
cp.c:22:33 punctuator ;
cp.c:22:34 punctuator }
cp.c:22:35 punctuator ;
cp.c:24:1 keyword void
cp.c:25:1 identifier _obstack_begin
cp.c:25:16 punctuator (
cp.c:25:17 identifier h
cp.c:25:18 punctuator ,
cp.c:25:20 identifier size
cp.c:25:24 punctuator ,
cp.c:25:26 identifier alignment
cp.c:25:35 punctuator ,
cp.c:25:37 identifier chunkfun
cp.c:25:45 punctuator ,
cp.c:25:47 identifier freefun
cp.c:25:54 punctuator )
cp.c:26:6 keyword struct
cp.c:26:13 identifier obstack
cp.c:26:21 punctuator *
cp.c:26:22 identifier h
cp.c:26:23 punctuator ;
cp.c:27:6 keyword int
cp.c:27:10 identifier size
cp.c:27:14 punctuator ;
cp.c:28:6 keyword int
cp.c:28:10 identifier alignment
cp.c:28:19 punctuator ;
cp.c:29:6 keyword void
cp.c:29:11 punctuator *
cp.c:29:13 punctuator (
cp.c:29:14 punctuator *
cp.c:29:15 identifier chunkfun
cp.c:29:23 punctuator )
cp.c:29:25 punctuator (
cp.c:29:26 punctuator )
cp.c:29:27 punctuator ;
cp.c:30:6 keyword void
cp.c:30:11 punctuator (
cp.c:30:12 punctuator *
cp.c:30:13 identifier freefun
cp.c:30:20 punctuator )
cp.c:30:22 punctuator (
cp.c:30:23 punctuator )
cp.c:30:24 punctuator ;
cp.c:31:1 punctuator {
cp.c:32:3 keyword register
cp.c:32:12 keyword struct
cp.c:32:19 identifier _obstack_chunk
cp.c:32:33 punctuator *
cp.c:32:35 identifier chunk
cp.c:32:40 punctuator ;
cp.c:34:3 keyword if
cp.c:34:6 punctuator (
cp.c:34:7 identifier alignment
cp.c:34:17 punctuator ==
cp.c:34:20 constant 0
cp.c:34:21 punctuator )
cp.c:35:5 identifier alignment
cp.c:35:15 punctuator =
cp.c:35:17 punctuator (
cp.c:35:18 punctuator (
cp.c:35:19 keyword char
cp.c:35:24 punctuator *
cp.c:35:25 punctuator )
cp.c:35:26 punctuator &
cp.c:35:27 punctuator (
cp.c:35:28 punctuator (
cp.c:35:29 keyword struct
cp.c:35:36 identifier fooalign
cp.c:35:45 punctuator *
cp.c:35:46 punctuator )
cp.c:35:48 constant 0
cp.c:35:49 punctuator )
cp.c:35:50 punctuator ->
cp.c:35:52 identifier d
cp.c:35:54 punctuator -
cp.c:35:56 punctuator (
cp.c:35:57 keyword char
cp.c:35:62 punctuator *
cp.c:35:63 punctuator )
cp.c:35:64 constant 0
cp.c:35:65 punctuator )
cp.c:35:66 punctuator ;
cp.c:36:3 keyword if
cp.c:36:6 punctuator (
cp.c:36:7 identifier size
cp.c:36:12 punctuator ==
cp.c:36:15 constant 0
cp.c:36:16 punctuator )
cp.c:37:5 punctuator {
cp.c:38:7 keyword int
cp.c:38:11 identifier extra
cp.c:38:17 punctuator =
cp.c:38:19 constant 4
cp.c:38:20 punctuator ;
cp.c:39:7 keyword if
cp.c:39:10 punctuator (
cp.c:39:11 identifier extra
cp.c:39:17 punctuator <
cp.c:39:19 punctuator (
cp.c:39:20 keyword sizeof
cp.c:39:27 punctuator (
cp.c:39:28 keyword union
cp.c:39:34 identifier fooround
cp.c:39:42 punctuator )
cp.c:39:43 punctuator )
cp.c:39:44 punctuator )
cp.c:40:2 identifier extra
cp.c:40:8 punctuator =
cp.c:40:10 punctuator (
cp.c:40:11 keyword sizeof
cp.c:40:18 punctuator (
cp.c:40:19 keyword union
cp.c:40:25 identifier fooround
cp.c:40:33 punctuator )
cp.c:40:34 punctuator )
cp.c:40:35 punctuator ;
cp.c:41:5 punctuator }
cp.c:42:1 punctuator }
