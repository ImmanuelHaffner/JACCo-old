0
ase.c:1:1 identifier ase
ase.c:1:5 punctuator (
ase.c:1:6 identifier p
ase.c:1:7 punctuator )
ase.c:2:6 keyword short
ase.c:2:12 punctuator *
ase.c:2:13 identifier p
ase.c:2:14 punctuator ;
ase.c:3:1 punctuator {
ase.c:4:3 keyword int
ase.c:4:7 identifier a
ase.c:4:8 punctuator ;
ase.c:5:3 identifier a
ase.c:5:5 punctuator =
ase.c:5:7 identifier p
ase.c:5:8 punctuator [
ase.c:5:9 constant 1
ase.c:5:10 punctuator ]
ase.c:5:11 punctuator ;
ase.c:6:3 identifier p
ase.c:6:4 punctuator [
ase.c:6:5 constant 2
ase.c:6:6 punctuator ]
ase.c:6:8 punctuator =
ase.c:6:10 identifier a
ase.c:6:11 punctuator ;
ase.c:7:3 keyword if
ase.c:7:6 punctuator (
ase.c:7:7 punctuator (
ase.c:7:8 keyword short
ase.c:7:13 punctuator )
ase.c:7:15 identifier a
ase.c:7:16 punctuator )
ase.c:8:5 identifier p
ase.c:8:6 punctuator [
ase.c:8:7 identifier a
ase.c:8:8 punctuator ]
ase.c:8:9 punctuator ++
ase.c:8:11 punctuator ;
ase.c:9:3 keyword return
ase.c:9:10 punctuator (
ase.c:9:11 identifier a
ase.c:9:13 punctuator ==
ase.c:9:16 constant 0
ase.c:9:17 punctuator )
ase.c:9:18 punctuator ;
ase.c:10:1 punctuator }
