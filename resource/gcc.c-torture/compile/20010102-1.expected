0
20010102-1.c:1:1 keyword struct
20010102-1.c:1:8 identifier _obstack_chunk
20010102-1.c:2:1 punctuator {
20010102-1.c:3:3 keyword char
20010102-1.c:3:8 punctuator *
20010102-1.c:3:9 identifier limit
20010102-1.c:3:14 punctuator ;
20010102-1.c:4:3 keyword struct
20010102-1.c:4:10 identifier _obstack_chunk
20010102-1.c:4:25 punctuator *
20010102-1.c:4:26 identifier prev
20010102-1.c:4:30 punctuator ;
20010102-1.c:5:3 keyword char
20010102-1.c:5:8 identifier contents
20010102-1.c:5:16 punctuator [
20010102-1.c:5:17 constant 4
20010102-1.c:5:18 punctuator ]
20010102-1.c:5:19 punctuator ;
20010102-1.c:6:1 punctuator }
20010102-1.c:6:2 punctuator ;
20010102-1.c:8:1 keyword struct
20010102-1.c:8:8 identifier obstack
20010102-1.c:9:1 punctuator {
20010102-1.c:10:3 keyword long
20010102-1.c:10:8 identifier chunk_size
20010102-1.c:10:18 punctuator ;
20010102-1.c:11:3 keyword struct
20010102-1.c:11:10 identifier _obstack_chunk
20010102-1.c:11:25 punctuator *
20010102-1.c:11:26 identifier chunk
20010102-1.c:11:31 punctuator ;
20010102-1.c:12:3 keyword char
20010102-1.c:12:8 punctuator *
20010102-1.c:12:9 identifier object_base
20010102-1.c:12:20 punctuator ;
20010102-1.c:13:3 keyword char
20010102-1.c:13:8 punctuator *
20010102-1.c:13:9 identifier next_free
20010102-1.c:13:18 punctuator ;
20010102-1.c:14:3 keyword char
20010102-1.c:14:8 punctuator *
20010102-1.c:14:9 identifier chunk_limit
20010102-1.c:14:20 punctuator ;
20010102-1.c:15:3 keyword long
20010102-1.c:15:8 keyword int
20010102-1.c:15:12 identifier temp
20010102-1.c:15:16 punctuator ;
20010102-1.c:16:3 keyword int
20010102-1.c:16:7 identifier alignment_mask
20010102-1.c:16:21 punctuator ;
20010102-1.c:17:3 keyword struct
20010102-1.c:17:10 identifier _obstack_chunk
20010102-1.c:17:25 punctuator *
20010102-1.c:17:26 punctuator (
20010102-1.c:17:27 punctuator *
20010102-1.c:17:28 identifier chunkfun
20010102-1.c:17:36 punctuator )
20010102-1.c:17:38 punctuator (
20010102-1.c:17:39 keyword void
20010102-1.c:17:44 punctuator *
20010102-1.c:17:45 punctuator ,
20010102-1.c:17:47 keyword long
20010102-1.c:17:51 punctuator )
20010102-1.c:17:52 punctuator ;
20010102-1.c:18:3 keyword void
20010102-1.c:18:8 punctuator (
20010102-1.c:18:9 punctuator *
20010102-1.c:18:10 identifier freefun
20010102-1.c:18:17 punctuator )
20010102-1.c:18:19 punctuator (
20010102-1.c:18:20 keyword void
20010102-1.c:18:25 punctuator *
20010102-1.c:18:26 punctuator ,
20010102-1.c:18:28 keyword struct
20010102-1.c:18:35 identifier _obstack_chunk
20010102-1.c:18:50 punctuator *
20010102-1.c:18:51 punctuator )
20010102-1.c:18:52 punctuator ;
20010102-1.c:19:3 keyword void
20010102-1.c:19:8 punctuator *
20010102-1.c:19:9 identifier extra_arg
20010102-1.c:19:18 punctuator ;
20010102-1.c:20:3 keyword unsigned
20010102-1.c:20:12 identifier use_extra_arg
20010102-1.c:20:25 punctuator :
20010102-1.c:20:26 constant 1
20010102-1.c:20:27 punctuator ;
20010102-1.c:21:3 keyword unsigned
20010102-1.c:21:12 identifier maybe_empty_object
20010102-1.c:21:30 punctuator :
20010102-1.c:21:31 constant 1
20010102-1.c:21:32 punctuator ;
20010102-1.c:22:3 keyword unsigned
20010102-1.c:22:12 identifier alloc_failed
20010102-1.c:22:24 punctuator :
20010102-1.c:22:25 constant 1
20010102-1.c:22:26 punctuator ;
20010102-1.c:23:1 punctuator }
20010102-1.c:23:2 punctuator ;
20010102-1.c:25:1 keyword extern
20010102-1.c:25:8 keyword void
20010102-1.c:25:13 identifier _obstack_newchunk
20010102-1.c:25:31 punctuator (
20010102-1.c:25:32 keyword struct
20010102-1.c:25:39 identifier obstack
20010102-1.c:25:47 punctuator *
20010102-1.c:25:48 punctuator ,
20010102-1.c:25:50 keyword int
20010102-1.c:25:53 punctuator )
20010102-1.c:25:54 punctuator ;
20010102-1.c:27:1 keyword struct
20010102-1.c:27:8 identifier fooalign
20010102-1.c:27:17 punctuator {
20010102-1.c:27:18 keyword char
20010102-1.c:27:23 identifier x
20010102-1.c:27:24 punctuator ;
20010102-1.c:27:26 keyword double
20010102-1.c:27:33 identifier d
20010102-1.c:27:34 punctuator ;
20010102-1.c:27:35 punctuator }
20010102-1.c:27:36 punctuator ;
20010102-1.c:30:1 keyword union
20010102-1.c:30:7 identifier fooround
20010102-1.c:30:16 punctuator {
20010102-1.c:30:17 keyword long
20010102-1.c:30:22 identifier x
20010102-1.c:30:23 punctuator ;
20010102-1.c:30:25 keyword double
20010102-1.c:30:32 identifier d
20010102-1.c:30:33 punctuator ;
20010102-1.c:30:34 punctuator }
20010102-1.c:30:35 punctuator ;
20010102-1.c:31:1 keyword void
20010102-1.c:32:1 identifier _obstack_newchunk
20010102-1.c:32:19 punctuator (
20010102-1.c:32:20 identifier h
20010102-1.c:32:21 punctuator ,
20010102-1.c:32:23 identifier length
20010102-1.c:32:29 punctuator )
20010102-1.c:33:6 keyword struct
20010102-1.c:33:13 identifier obstack
20010102-1.c:33:21 punctuator *
20010102-1.c:33:22 identifier h
20010102-1.c:33:23 punctuator ;
20010102-1.c:34:6 keyword int
20010102-1.c:34:10 identifier length
20010102-1.c:34:16 punctuator ;
20010102-1.c:35:1 punctuator {
20010102-1.c:36:3 keyword register
20010102-1.c:36:12 keyword struct
20010102-1.c:36:19 identifier _obstack_chunk
20010102-1.c:36:34 punctuator *
20010102-1.c:36:35 identifier old_chunk
20010102-1.c:36:45 punctuator =
20010102-1.c:36:47 identifier h
20010102-1.c:36:48 punctuator ->
20010102-1.c:36:50 identifier chunk
20010102-1.c:36:55 punctuator ;
20010102-1.c:37:3 keyword register
20010102-1.c:37:12 keyword struct
20010102-1.c:37:19 identifier _obstack_chunk
20010102-1.c:37:34 punctuator *
20010102-1.c:37:35 identifier new_chunk
20010102-1.c:37:44 punctuator ;
20010102-1.c:38:3 keyword register
20010102-1.c:38:12 keyword long
20010102-1.c:38:17 identifier new_size
20010102-1.c:38:25 punctuator ;
20010102-1.c:39:3 keyword register
20010102-1.c:39:12 keyword long
20010102-1.c:39:17 identifier obj_size
20010102-1.c:39:26 punctuator =
20010102-1.c:39:28 identifier h
20010102-1.c:39:29 punctuator ->
20010102-1.c:39:31 identifier next_free
20010102-1.c:39:41 punctuator -
20010102-1.c:39:43 identifier h
20010102-1.c:39:44 punctuator ->
20010102-1.c:39:46 identifier object_base
20010102-1.c:39:57 punctuator ;
20010102-1.c:40:3 keyword register
20010102-1.c:40:12 keyword long
20010102-1.c:40:17 identifier i
20010102-1.c:40:18 punctuator ;
20010102-1.c:41:3 keyword long
20010102-1.c:41:8 identifier already
20010102-1.c:41:15 punctuator ;
20010102-1.c:43:3 identifier new_size
20010102-1.c:43:12 punctuator =
20010102-1.c:43:14 punctuator (
20010102-1.c:43:15 identifier obj_size
20010102-1.c:43:24 punctuator +
20010102-1.c:43:26 identifier length
20010102-1.c:43:32 punctuator )
20010102-1.c:43:34 punctuator +
20010102-1.c:43:36 punctuator (
20010102-1.c:43:37 identifier obj_size
20010102-1.c:43:46 punctuator >>
20010102-1.c:43:49 constant 3
20010102-1.c:43:50 punctuator )
20010102-1.c:43:52 punctuator +
20010102-1.c:43:54 constant 100
20010102-1.c:43:57 punctuator ;
20010102-1.c:44:3 keyword if
20010102-1.c:44:6 punctuator (
20010102-1.c:44:7 identifier new_size
20010102-1.c:44:16 punctuator <
20010102-1.c:44:18 identifier h
20010102-1.c:44:19 punctuator ->
20010102-1.c:44:21 identifier chunk_size
20010102-1.c:44:31 punctuator )
20010102-1.c:45:5 identifier new_size
20010102-1.c:45:14 punctuator =
20010102-1.c:45:16 identifier h
20010102-1.c:45:17 punctuator ->
20010102-1.c:45:19 identifier chunk_size
20010102-1.c:45:29 punctuator ;
20010102-1.c:47:3 identifier new_chunk
20010102-1.c:47:13 punctuator =
20010102-1.c:47:15 punctuator (
20010102-1.c:47:16 punctuator (
20010102-1.c:47:17 punctuator (
20010102-1.c:47:18 identifier h
20010102-1.c:47:19 punctuator )
20010102-1.c:47:21 punctuator ->
20010102-1.c:47:24 identifier use_extra_arg
20010102-1.c:47:37 punctuator )
20010102-1.c:47:39 punctuator ?
20010102-1.c:47:41 punctuator (
20010102-1.c:47:42 punctuator *
20010102-1.c:47:43 punctuator (
20010102-1.c:47:44 identifier h
20010102-1.c:47:45 punctuator )
20010102-1.c:47:46 punctuator ->
20010102-1.c:47:48 identifier chunkfun
20010102-1.c:47:56 punctuator )
20010102-1.c:47:58 punctuator (
20010102-1.c:47:59 punctuator (
20010102-1.c:47:60 identifier h
20010102-1.c:47:61 punctuator )
20010102-1.c:47:62 punctuator ->
20010102-1.c:47:64 identifier extra_arg
20010102-1.c:47:73 punctuator ,
20010102-1.c:47:75 punctuator (
20010102-1.c:47:76 identifier new_size
20010102-1.c:47:84 punctuator )
20010102-1.c:47:85 punctuator )
20010102-1.c:47:87 punctuator :
20010102-1.c:47:89 punctuator (
20010102-1.c:47:90 punctuator *
20010102-1.c:47:91 punctuator (
20010102-1.c:47:92 keyword struct
20010102-1.c:47:99 identifier _obstack_chunk
20010102-1.c:47:114 punctuator *
20010102-1.c:47:115 punctuator (
20010102-1.c:47:116 punctuator *
20010102-1.c:47:117 punctuator )
20010102-1.c:47:119 punctuator (
20010102-1.c:47:120 keyword long
20010102-1.c:47:124 punctuator )
20010102-1.c:47:125 punctuator )
20010102-1.c:47:127 punctuator (
20010102-1.c:47:128 identifier h
20010102-1.c:47:129 punctuator )
20010102-1.c:47:130 punctuator ->
20010102-1.c:47:132 identifier chunkfun
20010102-1.c:47:140 punctuator )
20010102-1.c:47:142 punctuator (
20010102-1.c:47:143 punctuator (
20010102-1.c:47:144 identifier new_size
20010102-1.c:47:152 punctuator )
20010102-1.c:47:153 punctuator )
20010102-1.c:47:154 punctuator )
20010102-1.c:47:155 punctuator ;
20010102-1.c:48:3 identifier h
20010102-1.c:48:4 punctuator ->
20010102-1.c:48:6 identifier chunk
20010102-1.c:48:12 punctuator =
20010102-1.c:48:14 identifier new_chunk
20010102-1.c:48:23 punctuator ;
20010102-1.c:49:3 identifier new_chunk
20010102-1.c:49:12 punctuator ->
20010102-1.c:49:14 identifier prev
20010102-1.c:49:19 punctuator =
20010102-1.c:49:21 identifier old_chunk
20010102-1.c:49:30 punctuator ;
20010102-1.c:50:3 identifier new_chunk
20010102-1.c:50:12 punctuator ->
20010102-1.c:50:14 identifier limit
20010102-1.c:50:20 punctuator =
20010102-1.c:50:22 identifier h
20010102-1.c:50:23 punctuator ->
20010102-1.c:50:25 identifier chunk_limit
20010102-1.c:50:37 punctuator =
20010102-1.c:50:39 punctuator (
20010102-1.c:50:40 keyword char
20010102-1.c:50:45 punctuator *
20010102-1.c:50:46 punctuator )
20010102-1.c:50:48 identifier new_chunk
20010102-1.c:50:58 punctuator +
20010102-1.c:50:60 identifier new_size
20010102-1.c:50:68 punctuator ;
20010102-1.c:52:3 keyword if
20010102-1.c:52:6 punctuator (
20010102-1.c:52:7 identifier h
20010102-1.c:52:8 punctuator ->
20010102-1.c:52:10 identifier alignment_mask
20010102-1.c:52:25 punctuator +
20010102-1.c:52:27 constant 1
20010102-1.c:52:29 punctuator >=
20010102-1.c:52:32 punctuator (
20010102-1.c:52:33 punctuator (
20010102-1.c:52:34 keyword long
20010102-1.c:52:39 keyword int
20010102-1.c:52:42 punctuator )
20010102-1.c:52:44 punctuator (
20010102-1.c:52:45 punctuator (
20010102-1.c:52:46 keyword char
20010102-1.c:52:51 punctuator *
20010102-1.c:52:52 punctuator )
20010102-1.c:52:54 punctuator &
20010102-1.c:52:55 punctuator (
20010102-1.c:52:56 punctuator (
20010102-1.c:52:57 keyword struct
20010102-1.c:52:64 identifier fooalign
20010102-1.c:52:73 punctuator *
20010102-1.c:52:74 punctuator )
20010102-1.c:52:76 constant 0
20010102-1.c:52:77 punctuator )
20010102-1.c:52:78 punctuator ->
20010102-1.c:52:80 identifier d
20010102-1.c:52:82 punctuator -
20010102-1.c:52:84 punctuator (
20010102-1.c:52:85 keyword char
20010102-1.c:52:90 punctuator *
20010102-1.c:52:91 punctuator )
20010102-1.c:52:93 constant 0
20010102-1.c:52:94 punctuator )
20010102-1.c:52:95 punctuator )
20010102-1.c:52:96 punctuator )
20010102-1.c:53:5 punctuator {
20010102-1.c:54:7 keyword for
20010102-1.c:54:11 punctuator (
20010102-1.c:54:12 identifier i
20010102-1.c:54:14 punctuator =
20010102-1.c:54:16 identifier obj_size
20010102-1.c:54:25 punctuator /
20010102-1.c:54:27 keyword sizeof
20010102-1.c:54:34 punctuator (
20010102-1.c:54:35 keyword int
20010102-1.c:54:38 punctuator )
20010102-1.c:54:40 punctuator -
20010102-1.c:54:42 constant 1
20010102-1.c:54:43 punctuator ;
20010102-1.c:55:5 identifier i
20010102-1.c:55:7 punctuator >=
20010102-1.c:55:10 constant 0
20010102-1.c:55:11 punctuator ;
20010102-1.c:55:13 identifier i
20010102-1.c:55:14 punctuator --
20010102-1.c:55:16 punctuator )
20010102-1.c:56:2 punctuator (
20010102-1.c:56:3 punctuator (
20010102-1.c:56:4 keyword int
20010102-1.c:56:8 punctuator *
20010102-1.c:56:9 punctuator )
20010102-1.c:56:10 identifier new_chunk
20010102-1.c:56:19 punctuator ->
20010102-1.c:56:21 identifier contents
20010102-1.c:56:29 punctuator )
20010102-1.c:56:30 punctuator [
20010102-1.c:56:31 identifier i
20010102-1.c:56:32 punctuator ]
20010102-1.c:57:4 punctuator =
20010102-1.c:57:6 punctuator (
20010102-1.c:57:7 punctuator (
20010102-1.c:57:8 keyword int
20010102-1.c:57:12 punctuator *
20010102-1.c:57:13 punctuator )
20010102-1.c:57:14 identifier h
20010102-1.c:57:15 punctuator ->
20010102-1.c:57:17 identifier object_base
20010102-1.c:57:28 punctuator )
20010102-1.c:57:29 punctuator [
20010102-1.c:57:30 identifier i
20010102-1.c:57:31 punctuator ]
20010102-1.c:57:32 punctuator ;
20010102-1.c:58:7 identifier already
20010102-1.c:58:15 punctuator =
20010102-1.c:58:17 identifier obj_size
20010102-1.c:58:26 punctuator /
20010102-1.c:58:28 keyword sizeof
20010102-1.c:58:35 punctuator (
20010102-1.c:58:36 keyword int
20010102-1.c:58:39 punctuator )
20010102-1.c:58:41 punctuator *
20010102-1.c:58:43 keyword sizeof
20010102-1.c:58:50 punctuator (
20010102-1.c:58:51 keyword int
20010102-1.c:58:54 punctuator )
20010102-1.c:58:55 punctuator ;
20010102-1.c:59:5 punctuator }
20010102-1.c:60:3 keyword else
20010102-1.c:61:5 identifier already
20010102-1.c:61:13 punctuator =
20010102-1.c:61:15 constant 0
20010102-1.c:61:16 punctuator ;
20010102-1.c:62:3 keyword for
20010102-1.c:62:7 punctuator (
20010102-1.c:62:8 identifier i
20010102-1.c:62:10 punctuator =
20010102-1.c:62:12 identifier already
20010102-1.c:62:19 punctuator ;
20010102-1.c:62:21 identifier i
20010102-1.c:62:23 punctuator <
20010102-1.c:62:25 identifier obj_size
20010102-1.c:62:33 punctuator ;
20010102-1.c:62:35 identifier i
20010102-1.c:62:36 punctuator ++
20010102-1.c:62:38 punctuator )
20010102-1.c:63:5 identifier new_chunk
20010102-1.c:63:14 punctuator ->
20010102-1.c:63:16 identifier contents
20010102-1.c:63:24 punctuator [
20010102-1.c:63:25 identifier i
20010102-1.c:63:26 punctuator ]
20010102-1.c:63:28 punctuator =
20010102-1.c:63:30 identifier h
20010102-1.c:63:31 punctuator ->
20010102-1.c:63:33 identifier object_base
20010102-1.c:63:44 punctuator [
20010102-1.c:63:45 identifier i
20010102-1.c:63:46 punctuator ]
20010102-1.c:63:47 punctuator ;
20010102-1.c:65:3 keyword if
20010102-1.c:65:6 punctuator (
20010102-1.c:65:7 identifier h
20010102-1.c:65:8 punctuator ->
20010102-1.c:65:10 identifier object_base
20010102-1.c:65:22 punctuator ==
20010102-1.c:65:25 identifier old_chunk
20010102-1.c:65:34 punctuator ->
20010102-1.c:65:36 identifier contents
20010102-1.c:65:45 punctuator &&
20010102-1.c:65:48 punctuator !
20010102-1.c:65:50 identifier h
20010102-1.c:65:51 punctuator ->
20010102-1.c:65:53 identifier maybe_empty_object
20010102-1.c:65:71 punctuator )
20010102-1.c:66:5 punctuator {
20010102-1.c:67:7 identifier new_chunk
20010102-1.c:67:16 punctuator ->
20010102-1.c:67:18 identifier prev
20010102-1.c:67:23 punctuator =
20010102-1.c:67:25 identifier old_chunk
20010102-1.c:67:34 punctuator ->
20010102-1.c:67:36 identifier prev
20010102-1.c:67:40 punctuator ;
20010102-1.c:68:7 keyword do
20010102-1.c:68:10 punctuator {
20010102-1.c:68:12 keyword if
20010102-1.c:68:15 punctuator (
20010102-1.c:68:16 punctuator (
20010102-1.c:68:17 identifier h
20010102-1.c:68:18 punctuator )
20010102-1.c:68:20 punctuator ->
20010102-1.c:68:23 identifier use_extra_arg
20010102-1.c:68:36 punctuator )
20010102-1.c:68:38 punctuator (
20010102-1.c:68:39 punctuator *
20010102-1.c:68:40 punctuator (
20010102-1.c:68:41 identifier h
20010102-1.c:68:42 punctuator )
20010102-1.c:68:43 punctuator ->
20010102-1.c:68:45 identifier freefun
20010102-1.c:68:52 punctuator )
20010102-1.c:68:54 punctuator (
20010102-1.c:68:55 punctuator (
20010102-1.c:68:56 identifier h
20010102-1.c:68:57 punctuator )
20010102-1.c:68:58 punctuator ->
20010102-1.c:68:60 identifier extra_arg
20010102-1.c:68:69 punctuator ,
20010102-1.c:68:71 punctuator (
20010102-1.c:68:72 identifier old_chunk
20010102-1.c:68:81 punctuator )
20010102-1.c:68:82 punctuator )
20010102-1.c:68:83 punctuator ;
20010102-1.c:68:85 keyword else
20010102-1.c:68:90 punctuator (
20010102-1.c:68:91 punctuator *
20010102-1.c:68:92 punctuator (
20010102-1.c:68:93 keyword void
20010102-1.c:68:98 punctuator (
20010102-1.c:68:99 punctuator *
20010102-1.c:68:100 punctuator )
20010102-1.c:68:102 punctuator (
20010102-1.c:68:103 keyword void
20010102-1.c:68:108 punctuator *
20010102-1.c:68:109 punctuator )
20010102-1.c:68:110 punctuator )
20010102-1.c:68:112 punctuator (
20010102-1.c:68:113 identifier h
20010102-1.c:68:114 punctuator )
20010102-1.c:68:115 punctuator ->
20010102-1.c:68:117 identifier freefun
20010102-1.c:68:124 punctuator )
20010102-1.c:68:126 punctuator (
20010102-1.c:68:127 punctuator (
20010102-1.c:68:128 identifier old_chunk
20010102-1.c:68:137 punctuator )
20010102-1.c:68:138 punctuator )
20010102-1.c:68:139 punctuator ;
20010102-1.c:68:141 punctuator }
20010102-1.c:68:143 keyword while
20010102-1.c:68:149 punctuator (
20010102-1.c:68:150 constant 0
20010102-1.c:68:151 punctuator )
20010102-1.c:68:152 punctuator ;
20010102-1.c:69:5 punctuator }
20010102-1.c:71:3 identifier h
20010102-1.c:71:4 punctuator ->
20010102-1.c:71:6 identifier object_base
20010102-1.c:71:18 punctuator =
20010102-1.c:71:20 identifier new_chunk
20010102-1.c:71:29 punctuator ->
20010102-1.c:71:31 identifier contents
20010102-1.c:71:39 punctuator ;
20010102-1.c:72:3 identifier h
20010102-1.c:72:4 punctuator ->
20010102-1.c:72:6 identifier next_free
20010102-1.c:72:16 punctuator =
20010102-1.c:72:18 identifier h
20010102-1.c:72:19 punctuator ->
20010102-1.c:72:21 identifier object_base
20010102-1.c:72:33 punctuator +
20010102-1.c:72:35 identifier obj_size
20010102-1.c:72:43 punctuator ;
20010102-1.c:73:3 identifier h
20010102-1.c:73:4 punctuator ->
20010102-1.c:73:6 identifier maybe_empty_object
20010102-1.c:73:25 punctuator =
20010102-1.c:73:27 constant 0
20010102-1.c:73:28 punctuator ;
20010102-1.c:74:1 punctuator }
