0
if_test.c:21:1: keyword typedef
if_test.c:21:9: keyword long
if_test.c:21:14: keyword unsigned
if_test.c:21:23: keyword int
if_test.c:21:27: identifier size_t
if_test.c:21:33: punctuator ;
if_test.c:22:1: keyword typedef
if_test.c:22:9: keyword int
if_test.c:22:13: identifier wchar_t
if_test.c:22:20: punctuator ;
if_test.c:32:1: keyword union
if_test.c:32:7: identifier wait
if_test.c:33:3: punctuator {
if_test.c:34:5: keyword int
if_test.c:34:9: identifier w_status
if_test.c:34:17: punctuator ;
if_test.c:35:5: keyword struct
if_test.c:36:7: punctuator {
if_test.c:38:2: keyword unsigned
if_test.c:38:11: keyword int
if_test.c:38:15: identifier __w_termsig
if_test.c:38:26: punctuator :
if_test.c:38:27: constant 7
if_test.c:38:28: punctuator ;
if_test.c:39:2: keyword unsigned
if_test.c:39:11: keyword int
if_test.c:39:15: identifier __w_coredump
if_test.c:39:27: punctuator :
if_test.c:39:28: constant 1
if_test.c:39:29: punctuator ;
if_test.c:40:2: keyword unsigned
if_test.c:40:11: keyword int
if_test.c:40:15: identifier __w_retcode
if_test.c:40:26: punctuator :
if_test.c:40:27: constant 8
if_test.c:40:28: punctuator ;
if_test.c:41:2: keyword unsigned
if_test.c:41:11: keyword int
if_test.c:41:14: punctuator :
if_test.c:41:15: constant 16
if_test.c:41:17: punctuator ;
if_test.c:49:7: punctuator }
if_test.c:49:9: identifier __wait_terminated
if_test.c:49:26: punctuator ;
if_test.c:50:5: keyword struct
if_test.c:51:7: punctuator {
if_test.c:53:2: keyword unsigned
if_test.c:53:11: keyword int
if_test.c:53:15: identifier __w_stopval
if_test.c:53:26: punctuator :
if_test.c:53:27: constant 8
if_test.c:53:28: punctuator ;
if_test.c:54:2: keyword unsigned
if_test.c:54:11: keyword int
if_test.c:54:15: identifier __w_stopsig
if_test.c:54:26: punctuator :
if_test.c:54:27: constant 8
if_test.c:54:28: punctuator ;
if_test.c:55:2: keyword unsigned
if_test.c:55:11: keyword int
if_test.c:55:14: punctuator :
if_test.c:55:15: constant 16
if_test.c:55:17: punctuator ;
if_test.c:62:7: punctuator }
if_test.c:62:9: identifier __wait_stopped
if_test.c:62:23: punctuator ;
if_test.c:63:3: punctuator }
if_test.c:63:4: punctuator ;
if_test.c:64:1: keyword typedef
if_test.c:64:9: keyword union
if_test.c:65:3: punctuator {
if_test.c:66:5: keyword union
if_test.c:66:11: identifier wait
if_test.c:66:16: punctuator *
if_test.c:66:17: identifier __uptr
if_test.c:66:23: punctuator ;
if_test.c:67:5: keyword int
if_test.c:67:9: punctuator *
if_test.c:67:10: identifier __iptr
if_test.c:67:16: punctuator ;
if_test.c:68:3: punctuator }
if_test.c:68:5: identifier __WAIT_STATUS
if_test.c:68:19: identifier __attribute__
if_test.c:68:33: punctuator (
if_test.c:68:34: punctuator (
if_test.c:68:35: identifier __transparent_union__
if_test.c:68:56: punctuator )
if_test.c:68:57: punctuator )
if_test.c:68:58: punctuator ;
if_test.c:71:1: keyword typedef
if_test.c:71:9: keyword struct
if_test.c:72:3: punctuator {
if_test.c:73:5: keyword int
if_test.c:73:9: identifier quot
if_test.c:73:13: punctuator ;
if_test.c:74:5: keyword int
if_test.c:74:9: identifier rem
if_test.c:74:12: punctuator ;
if_test.c:75:3: punctuator }
if_test.c:75:5: identifier div_t
if_test.c:75:10: punctuator ;
if_test.c:79:1: keyword typedef
if_test.c:79:9: keyword struct
if_test.c:80:3: punctuator {
if_test.c:81:5: keyword long
if_test.c:81:10: keyword int
if_test.c:81:14: identifier quot
if_test.c:81:18: punctuator ;
if_test.c:82:5: keyword long
if_test.c:82:10: keyword int
if_test.c:82:14: identifier rem
if_test.c:82:17: punctuator ;
if_test.c:83:3: punctuator }
if_test.c:83:5: identifier ldiv_t
if_test.c:83:11: punctuator ;
if_test.c:91:1: identifier __extension__
if_test.c:91:15: keyword typedef
if_test.c:91:23: keyword struct
if_test.c:92:3: punctuator {
if_test.c:93:5: keyword long
if_test.c:93:10: keyword long
if_test.c:93:15: keyword int
if_test.c:93:19: identifier quot
if_test.c:93:23: punctuator ;
if_test.c:94:5: keyword long
if_test.c:94:10: keyword long
if_test.c:94:15: keyword int
if_test.c:94:19: identifier rem
if_test.c:94:22: punctuator ;
if_test.c:95:3: punctuator }
if_test.c:95:5: identifier lldiv_t
if_test.c:95:12: punctuator ;
if_test.c:98:1: keyword extern
if_test.c:98:8: identifier size_t
if_test.c:98:15: identifier __ctype_get_mb_cur_max
if_test.c:98:38: punctuator (
if_test.c:98:39: keyword void
if_test.c:98:43: punctuator )
if_test.c:98:45: identifier __attribute__
if_test.c:98:59: punctuator (
if_test.c:98:60: punctuator (
if_test.c:98:61: identifier __nothrow__
if_test.c:98:73: punctuator ,
if_test.c:98:75: identifier __leaf__
if_test.c:98:83: punctuator )
if_test.c:98:84: punctuator )
if_test.c:98:86: punctuator ;
if_test.c:103:1: keyword extern
if_test.c:103:8: keyword double
if_test.c:103:15: identifier atof
if_test.c:103:20: punctuator (
if_test.c:103:21: identifier __const
if_test.c:103:29: keyword char
if_test.c:103:34: punctuator *
if_test.c:103:35: identifier __nptr
if_test.c:103:41: punctuator )
if_test.c:104:6: identifier __attribute__
if_test.c:104:20: punctuator (
if_test.c:104:21: punctuator (
if_test.c:104:22: identifier __nothrow__
if_test.c:104:34: punctuator ,
if_test.c:104:36: identifier __leaf__
if_test.c:104:44: punctuator )
if_test.c:104:45: punctuator )
if_test.c:104:47: identifier __attribute__
if_test.c:104:61: punctuator (
if_test.c:104:62: punctuator (
if_test.c:104:63: identifier __pure__
if_test.c:104:71: punctuator )
if_test.c:104:72: punctuator )
if_test.c:104:74: identifier __attribute__
if_test.c:104:88: punctuator (
if_test.c:104:89: punctuator (
if_test.c:104:90: identifier __nonnull__
if_test.c:104:102: punctuator (
if_test.c:104:103: constant 1
if_test.c:104:104: punctuator )
if_test.c:104:105: punctuator )
if_test.c:104:106: punctuator )
if_test.c:104:108: punctuator ;
if_test.c:106:1: keyword extern
if_test.c:106:8: keyword int
if_test.c:106:12: identifier atoi
if_test.c:106:17: punctuator (
if_test.c:106:18: identifier __const
if_test.c:106:26: keyword char
if_test.c:106:31: punctuator *
if_test.c:106:32: identifier __nptr
if_test.c:106:38: punctuator )
if_test.c:107:6: identifier __attribute__
if_test.c:107:20: punctuator (
if_test.c:107:21: punctuator (
if_test.c:107:22: identifier __nothrow__
if_test.c:107:34: punctuator ,
if_test.c:107:36: identifier __leaf__
if_test.c:107:44: punctuator )
if_test.c:107:45: punctuator )
if_test.c:107:47: identifier __attribute__
if_test.c:107:61: punctuator (
if_test.c:107:62: punctuator (
if_test.c:107:63: identifier __pure__
if_test.c:107:71: punctuator )
if_test.c:107:72: punctuator )
if_test.c:107:74: identifier __attribute__
if_test.c:107:88: punctuator (
if_test.c:107:89: punctuator (
if_test.c:107:90: identifier __nonnull__
if_test.c:107:102: punctuator (
if_test.c:107:103: constant 1
if_test.c:107:104: punctuator )
if_test.c:107:105: punctuator )
if_test.c:107:106: punctuator )
if_test.c:107:108: punctuator ;
if_test.c:109:1: keyword extern
if_test.c:109:8: keyword long
if_test.c:109:13: keyword int
if_test.c:109:17: identifier atol
if_test.c:109:22: punctuator (
if_test.c:109:23: identifier __const
if_test.c:109:31: keyword char
if_test.c:109:36: punctuator *
if_test.c:109:37: identifier __nptr
if_test.c:109:43: punctuator )
if_test.c:110:6: identifier __attribute__
if_test.c:110:20: punctuator (
if_test.c:110:21: punctuator (
if_test.c:110:22: identifier __nothrow__
if_test.c:110:34: punctuator ,
if_test.c:110:36: identifier __leaf__
if_test.c:110:44: punctuator )
if_test.c:110:45: punctuator )
if_test.c:110:47: identifier __attribute__
if_test.c:110:61: punctuator (
if_test.c:110:62: punctuator (
if_test.c:110:63: identifier __pure__
if_test.c:110:71: punctuator )
if_test.c:110:72: punctuator )
if_test.c:110:74: identifier __attribute__
if_test.c:110:88: punctuator (
if_test.c:110:89: punctuator (
if_test.c:110:90: identifier __nonnull__
if_test.c:110:102: punctuator (
if_test.c:110:103: constant 1
if_test.c:110:104: punctuator )
if_test.c:110:105: punctuator )
if_test.c:110:106: punctuator )
if_test.c:110:108: punctuator ;
if_test.c:116:1: identifier __extension__
if_test.c:116:15: keyword extern
if_test.c:116:22: keyword long
if_test.c:116:27: keyword long
if_test.c:116:32: keyword int
if_test.c:116:36: identifier atoll
if_test.c:116:42: punctuator (
if_test.c:116:43: identifier __const
if_test.c:116:51: keyword char
if_test.c:116:56: punctuator *
if_test.c:116:57: identifier __nptr
if_test.c:116:63: punctuator )
if_test.c:117:6: identifier __attribute__
if_test.c:117:20: punctuator (
if_test.c:117:21: punctuator (
if_test.c:117:22: identifier __nothrow__
if_test.c:117:34: punctuator ,
if_test.c:117:36: identifier __leaf__
if_test.c:117:44: punctuator )
if_test.c:117:45: punctuator )
if_test.c:117:47: identifier __attribute__
if_test.c:117:61: punctuator (
if_test.c:117:62: punctuator (
if_test.c:117:63: identifier __pure__
if_test.c:117:71: punctuator )
if_test.c:117:72: punctuator )
if_test.c:117:74: identifier __attribute__
if_test.c:117:88: punctuator (
if_test.c:117:89: punctuator (
if_test.c:117:90: identifier __nonnull__
if_test.c:117:102: punctuator (
if_test.c:117:103: constant 1
if_test.c:117:104: punctuator )
if_test.c:117:105: punctuator )
if_test.c:117:106: punctuator )
if_test.c:117:108: punctuator ;
if_test.c:123:1: keyword extern
if_test.c:123:8: keyword double
if_test.c:123:15: identifier strtod
if_test.c:123:22: punctuator (
if_test.c:123:23: identifier __const
if_test.c:123:31: keyword char
if_test.c:123:36: punctuator *
if_test.c:123:37: identifier __restrict
if_test.c:123:48: identifier __nptr
if_test.c:123:54: punctuator ,
if_test.c:124:9: keyword char
if_test.c:124:14: punctuator *
if_test.c:124:15: punctuator *
if_test.c:124:16: identifier __restrict
if_test.c:124:27: identifier __endptr
if_test.c:124:35: punctuator )
if_test.c:125:6: identifier __attribute__
if_test.c:125:20: punctuator (
if_test.c:125:21: punctuator (
if_test.c:125:22: identifier __nothrow__
if_test.c:125:34: punctuator ,
if_test.c:125:36: identifier __leaf__
if_test.c:125:44: punctuator )
if_test.c:125:45: punctuator )
if_test.c:125:47: identifier __attribute__
if_test.c:125:61: punctuator (
if_test.c:125:62: punctuator (
if_test.c:125:63: identifier __nonnull__
if_test.c:125:75: punctuator (
if_test.c:125:76: constant 1
if_test.c:125:77: punctuator )
if_test.c:125:78: punctuator )
if_test.c:125:79: punctuator )
if_test.c:125:81: punctuator ;
if_test.c:131:1: keyword extern
if_test.c:131:8: keyword float
if_test.c:131:14: identifier strtof
if_test.c:131:21: punctuator (
if_test.c:131:22: identifier __const
if_test.c:131:30: keyword char
if_test.c:131:35: punctuator *
if_test.c:131:36: identifier __restrict
if_test.c:131:47: identifier __nptr
if_test.c:131:53: punctuator ,
if_test.c:132:8: keyword char
if_test.c:132:13: punctuator *
if_test.c:132:14: punctuator *
if_test.c:132:15: identifier __restrict
if_test.c:132:26: identifier __endptr
if_test.c:132:34: punctuator )
if_test.c:132:36: identifier __attribute__
if_test.c:132:50: punctuator (
if_test.c:132:51: punctuator (
if_test.c:132:52: identifier __nothrow__
if_test.c:132:64: punctuator ,
if_test.c:132:66: identifier __leaf__
if_test.c:132:74: punctuator )
if_test.c:132:75: punctuator )
if_test.c:132:77: identifier __attribute__
if_test.c:132:91: punctuator (
if_test.c:132:92: punctuator (
if_test.c:132:93: identifier __nonnull__
if_test.c:132:105: punctuator (
if_test.c:132:106: constant 1
if_test.c:132:107: punctuator )
if_test.c:132:108: punctuator )
if_test.c:132:109: punctuator )
if_test.c:132:111: punctuator ;
if_test.c:134:1: keyword extern
if_test.c:134:8: keyword long
if_test.c:134:13: keyword double
if_test.c:134:20: identifier strtold
if_test.c:134:28: punctuator (
if_test.c:134:29: identifier __const
if_test.c:134:37: keyword char
if_test.c:134:42: punctuator *
if_test.c:134:43: identifier __restrict
if_test.c:134:54: identifier __nptr
if_test.c:134:60: punctuator ,
if_test.c:135:8: keyword char
if_test.c:135:13: punctuator *
if_test.c:135:14: punctuator *
if_test.c:135:15: identifier __restrict
if_test.c:135:26: identifier __endptr
if_test.c:135:34: punctuator )
if_test.c:136:6: identifier __attribute__
if_test.c:136:20: punctuator (
if_test.c:136:21: punctuator (
if_test.c:136:22: identifier __nothrow__
if_test.c:136:34: punctuator ,
if_test.c:136:36: identifier __leaf__
if_test.c:136:44: punctuator )
if_test.c:136:45: punctuator )
if_test.c:136:47: identifier __attribute__
if_test.c:136:61: punctuator (
if_test.c:136:62: punctuator (
if_test.c:136:63: identifier __nonnull__
if_test.c:136:75: punctuator (
if_test.c:136:76: constant 1
if_test.c:136:77: punctuator )
if_test.c:136:78: punctuator )
if_test.c:136:79: punctuator )
if_test.c:136:81: punctuator ;
if_test.c:142:1: keyword extern
if_test.c:142:8: keyword long
if_test.c:142:13: keyword int
if_test.c:142:17: identifier strtol
if_test.c:142:24: punctuator (
if_test.c:142:25: identifier __const
if_test.c:142:33: keyword char
if_test.c:142:38: punctuator *
if_test.c:142:39: identifier __restrict
if_test.c:142:50: identifier __nptr
if_test.c:142:56: punctuator ,
if_test.c:143:4: keyword char
if_test.c:143:9: punctuator *
if_test.c:143:10: punctuator *
if_test.c:143:11: identifier __restrict
if_test.c:143:22: identifier __endptr
if_test.c:143:30: punctuator ,
if_test.c:143:32: keyword int
if_test.c:143:36: identifier __base
if_test.c:143:42: punctuator )
if_test.c:144:6: identifier __attribute__
if_test.c:144:20: punctuator (
if_test.c:144:21: punctuator (
if_test.c:144:22: identifier __nothrow__
if_test.c:144:34: punctuator ,
if_test.c:144:36: identifier __leaf__
if_test.c:144:44: punctuator )
if_test.c:144:45: punctuator )
if_test.c:144:47: identifier __attribute__
if_test.c:144:61: punctuator (
if_test.c:144:62: punctuator (
if_test.c:144:63: identifier __nonnull__
if_test.c:144:75: punctuator (
if_test.c:144:76: constant 1
if_test.c:144:77: punctuator )
if_test.c:144:78: punctuator )
if_test.c:144:79: punctuator )
if_test.c:144:81: punctuator ;
if_test.c:146:1: keyword extern
if_test.c:146:8: keyword unsigned
if_test.c:146:17: keyword long
if_test.c:146:22: keyword int
if_test.c:146:26: identifier strtoul
if_test.c:146:34: punctuator (
if_test.c:146:35: identifier __const
if_test.c:146:43: keyword char
if_test.c:146:48: punctuator *
if_test.c:146:49: identifier __restrict
if_test.c:146:60: identifier __nptr
if_test.c:146:66: punctuator ,
if_test.c:147:7: keyword char
if_test.c:147:12: punctuator *
if_test.c:147:13: punctuator *
if_test.c:147:14: identifier __restrict
if_test.c:147:25: identifier __endptr
if_test.c:147:33: punctuator ,
if_test.c:147:35: keyword int
if_test.c:147:39: identifier __base
if_test.c:147:45: punctuator )
if_test.c:148:6: identifier __attribute__
if_test.c:148:20: punctuator (
if_test.c:148:21: punctuator (
if_test.c:148:22: identifier __nothrow__
if_test.c:148:34: punctuator ,
if_test.c:148:36: identifier __leaf__
if_test.c:148:44: punctuator )
if_test.c:148:45: punctuator )
if_test.c:148:47: identifier __attribute__
if_test.c:148:61: punctuator (
if_test.c:148:62: punctuator (
if_test.c:148:63: identifier __nonnull__
if_test.c:148:75: punctuator (
if_test.c:148:76: constant 1
if_test.c:148:77: punctuator )
if_test.c:148:78: punctuator )
if_test.c:148:79: punctuator )
if_test.c:148:81: punctuator ;
if_test.c:153:1: identifier __extension__
if_test.c:154:1: keyword extern
if_test.c:154:8: keyword long
if_test.c:154:13: keyword long
if_test.c:154:18: keyword int
if_test.c:154:22: identifier strtoq
if_test.c:154:29: punctuator (
if_test.c:154:30: identifier __const
if_test.c:154:38: keyword char
if_test.c:154:43: punctuator *
if_test.c:154:44: identifier __restrict
if_test.c:154:55: identifier __nptr
if_test.c:154:61: punctuator ,
if_test.c:155:9: keyword char
if_test.c:155:14: punctuator *
if_test.c:155:15: punctuator *
if_test.c:155:16: identifier __restrict
if_test.c:155:27: identifier __endptr
if_test.c:155:35: punctuator ,
if_test.c:155:37: keyword int
if_test.c:155:41: identifier __base
if_test.c:155:47: punctuator )
if_test.c:156:6: identifier __attribute__
if_test.c:156:20: punctuator (
if_test.c:156:21: punctuator (
if_test.c:156:22: identifier __nothrow__
if_test.c:156:34: punctuator ,
if_test.c:156:36: identifier __leaf__
if_test.c:156:44: punctuator )
if_test.c:156:45: punctuator )
if_test.c:156:47: identifier __attribute__
if_test.c:156:61: punctuator (
if_test.c:156:62: punctuator (
if_test.c:156:63: identifier __nonnull__
if_test.c:156:75: punctuator (
if_test.c:156:76: constant 1
if_test.c:156:77: punctuator )
if_test.c:156:78: punctuator )
if_test.c:156:79: punctuator )
if_test.c:156:81: punctuator ;
if_test.c:158:1: identifier __extension__
if_test.c:159:1: keyword extern
if_test.c:159:8: keyword unsigned
if_test.c:159:17: keyword long
if_test.c:159:22: keyword long
if_test.c:159:27: keyword int
if_test.c:159:31: identifier strtouq
if_test.c:159:39: punctuator (
if_test.c:159:40: identifier __const
if_test.c:159:48: keyword char
if_test.c:159:53: punctuator *
if_test.c:159:54: identifier __restrict
if_test.c:159:65: identifier __nptr
if_test.c:159:71: punctuator ,
if_test.c:160:12: keyword char
if_test.c:160:17: punctuator *
if_test.c:160:18: punctuator *
if_test.c:160:19: identifier __restrict
if_test.c:160:30: identifier __endptr
if_test.c:160:38: punctuator ,
if_test.c:160:40: keyword int
if_test.c:160:44: identifier __base
if_test.c:160:50: punctuator )
if_test.c:161:6: identifier __attribute__
if_test.c:161:20: punctuator (
if_test.c:161:21: punctuator (
if_test.c:161:22: identifier __nothrow__
if_test.c:161:34: punctuator ,
if_test.c:161:36: identifier __leaf__
if_test.c:161:44: punctuator )
if_test.c:161:45: punctuator )
if_test.c:161:47: identifier __attribute__
if_test.c:161:61: punctuator (
if_test.c:161:62: punctuator (
if_test.c:161:63: identifier __nonnull__
if_test.c:161:75: punctuator (
if_test.c:161:76: constant 1
if_test.c:161:77: punctuator )
if_test.c:161:78: punctuator )
if_test.c:161:79: punctuator )
if_test.c:161:81: punctuator ;
if_test.c:167:1: identifier __extension__
if_test.c:168:1: keyword extern
if_test.c:168:8: keyword long
if_test.c:168:13: keyword long
if_test.c:168:18: keyword int
if_test.c:168:22: identifier strtoll
if_test.c:168:30: punctuator (
if_test.c:168:31: identifier __const
if_test.c:168:39: keyword char
if_test.c:168:44: punctuator *
if_test.c:168:45: identifier __restrict
if_test.c:168:56: identifier __nptr
if_test.c:168:62: punctuator ,
if_test.c:169:10: keyword char
if_test.c:169:15: punctuator *
if_test.c:169:16: punctuator *
if_test.c:169:17: identifier __restrict
if_test.c:169:28: identifier __endptr
if_test.c:169:36: punctuator ,
if_test.c:169:38: keyword int
if_test.c:169:42: identifier __base
if_test.c:169:48: punctuator )
if_test.c:170:6: identifier __attribute__
if_test.c:170:20: punctuator (
if_test.c:170:21: punctuator (
if_test.c:170:22: identifier __nothrow__
if_test.c:170:34: punctuator ,
if_test.c:170:36: identifier __leaf__
if_test.c:170:44: punctuator )
if_test.c:170:45: punctuator )
if_test.c:170:47: identifier __attribute__
if_test.c:170:61: punctuator (
if_test.c:170:62: punctuator (
if_test.c:170:63: identifier __nonnull__
if_test.c:170:75: punctuator (
if_test.c:170:76: constant 1
if_test.c:170:77: punctuator )
if_test.c:170:78: punctuator )
if_test.c:170:79: punctuator )
if_test.c:170:81: punctuator ;
if_test.c:172:1: identifier __extension__
if_test.c:173:1: keyword extern
if_test.c:173:8: keyword unsigned
if_test.c:173:17: keyword long
if_test.c:173:22: keyword long
if_test.c:173:27: keyword int
if_test.c:173:31: identifier strtoull
if_test.c:173:40: punctuator (
if_test.c:173:41: identifier __const
if_test.c:173:49: keyword char
if_test.c:173:54: punctuator *
if_test.c:173:55: identifier __restrict
if_test.c:173:66: identifier __nptr
if_test.c:173:72: punctuator ,
if_test.c:174:6: keyword char
if_test.c:174:11: punctuator *
if_test.c:174:12: punctuator *
if_test.c:174:13: identifier __restrict
if_test.c:174:24: identifier __endptr
if_test.c:174:32: punctuator ,
if_test.c:174:34: keyword int
if_test.c:174:38: identifier __base
if_test.c:174:44: punctuator )
if_test.c:175:6: identifier __attribute__
if_test.c:175:20: punctuator (
if_test.c:175:21: punctuator (
if_test.c:175:22: identifier __nothrow__
if_test.c:175:34: punctuator ,
if_test.c:175:36: identifier __leaf__
if_test.c:175:44: punctuator )
if_test.c:175:45: punctuator )
if_test.c:175:47: identifier __attribute__
if_test.c:175:61: punctuator (
if_test.c:175:62: punctuator (
if_test.c:175:63: identifier __nonnull__
if_test.c:175:75: punctuator (
if_test.c:175:76: constant 1
if_test.c:175:77: punctuator )
if_test.c:175:78: punctuator )
if_test.c:175:79: punctuator )
if_test.c:175:81: punctuator ;
if_test.c:177:1: keyword extern
if_test.c:177:8: keyword char
if_test.c:177:13: punctuator *
if_test.c:177:14: identifier l64a
if_test.c:177:19: punctuator (
if_test.c:177:20: keyword long
if_test.c:177:25: keyword int
if_test.c:177:29: identifier __n
if_test.c:177:32: punctuator )
if_test.c:177:34: identifier __attribute__
if_test.c:177:48: punctuator (
if_test.c:177:49: punctuator (
if_test.c:177:50: identifier __nothrow__
if_test.c:177:62: punctuator ,
if_test.c:177:64: identifier __leaf__
if_test.c:177:72: punctuator )
if_test.c:177:73: punctuator )
if_test.c:177:75: punctuator ;
if_test.c:180:1: keyword extern
if_test.c:180:8: keyword long
if_test.c:180:13: keyword int
if_test.c:180:17: identifier a64l
if_test.c:180:22: punctuator (
if_test.c:180:23: identifier __const
if_test.c:180:31: keyword char
if_test.c:180:36: punctuator *
if_test.c:180:37: identifier __s
if_test.c:180:40: punctuator )
if_test.c:181:6: identifier __attribute__
if_test.c:181:20: punctuator (
if_test.c:181:21: punctuator (
if_test.c:181:22: identifier __nothrow__
if_test.c:181:34: punctuator ,
if_test.c:181:36: identifier __leaf__
if_test.c:181:44: punctuator )
if_test.c:181:45: punctuator )
if_test.c:181:47: identifier __attribute__
if_test.c:181:61: punctuator (
if_test.c:181:62: punctuator (
if_test.c:181:63: identifier __pure__
if_test.c:181:71: punctuator )
if_test.c:181:72: punctuator )
if_test.c:181:74: identifier __attribute__
if_test.c:181:88: punctuator (
if_test.c:181:89: punctuator (
if_test.c:181:90: identifier __nonnull__
if_test.c:181:102: punctuator (
if_test.c:181:103: constant 1
if_test.c:181:104: punctuator )
if_test.c:181:105: punctuator )
if_test.c:181:106: punctuator )
if_test.c:181:108: punctuator ;
if_test.c:190:1: keyword typedef
if_test.c:190:9: keyword unsigned
if_test.c:190:18: keyword char
if_test.c:190:23: identifier __u_char
if_test.c:190:31: punctuator ;
if_test.c:191:1: keyword typedef
if_test.c:191:9: keyword unsigned
if_test.c:191:18: keyword short
if_test.c:191:24: keyword int
if_test.c:191:28: identifier __u_short
if_test.c:191:37: punctuator ;
if_test.c:192:1: keyword typedef
if_test.c:192:9: keyword unsigned
if_test.c:192:18: keyword int
if_test.c:192:22: identifier __u_int
if_test.c:192:29: punctuator ;
if_test.c:193:1: keyword typedef
if_test.c:193:9: keyword unsigned
if_test.c:193:18: keyword long
if_test.c:193:23: keyword int
if_test.c:193:27: identifier __u_long
if_test.c:193:35: punctuator ;
if_test.c:196:1: keyword typedef
if_test.c:196:9: keyword signed
if_test.c:196:16: keyword char
if_test.c:196:21: identifier __int8_t
if_test.c:196:29: punctuator ;
if_test.c:197:1: keyword typedef
if_test.c:197:9: keyword unsigned
if_test.c:197:18: keyword char
if_test.c:197:23: identifier __uint8_t
if_test.c:197:32: punctuator ;
if_test.c:198:1: keyword typedef
if_test.c:198:9: keyword signed
if_test.c:198:16: keyword short
if_test.c:198:22: keyword int
if_test.c:198:26: identifier __int16_t
if_test.c:198:35: punctuator ;
if_test.c:199:1: keyword typedef
if_test.c:199:9: keyword unsigned
if_test.c:199:18: keyword short
if_test.c:199:24: keyword int
if_test.c:199:28: identifier __uint16_t
if_test.c:199:38: punctuator ;
if_test.c:200:1: keyword typedef
if_test.c:200:9: keyword signed
if_test.c:200:16: keyword int
if_test.c:200:20: identifier __int32_t
if_test.c:200:29: punctuator ;
if_test.c:201:1: keyword typedef
if_test.c:201:9: keyword unsigned
if_test.c:201:18: keyword int
if_test.c:201:22: identifier __uint32_t
if_test.c:201:32: punctuator ;
if_test.c:203:1: keyword typedef
if_test.c:203:9: keyword signed
if_test.c:203:16: keyword long
if_test.c:203:21: keyword int
if_test.c:203:25: identifier __int64_t
if_test.c:203:34: punctuator ;
if_test.c:204:1: keyword typedef
if_test.c:204:9: keyword unsigned
if_test.c:204:18: keyword long
if_test.c:204:23: keyword int
if_test.c:204:27: identifier __uint64_t
if_test.c:204:37: punctuator ;
if_test.c:212:1: keyword typedef
if_test.c:212:9: keyword long
if_test.c:212:14: keyword int
if_test.c:212:18: identifier __quad_t
if_test.c:212:26: punctuator ;
if_test.c:213:1: keyword typedef
if_test.c:213:9: keyword unsigned
if_test.c:213:18: keyword long
if_test.c:213:23: keyword int
if_test.c:213:27: identifier __u_quad_t
if_test.c:213:37: punctuator ;
if_test.c:216:1: keyword typedef
if_test.c:216:9: keyword unsigned
if_test.c:216:18: keyword long
if_test.c:216:23: keyword int
if_test.c:216:27: identifier __dev_t
if_test.c:216:34: punctuator ;
if_test.c:217:1: keyword typedef
if_test.c:217:9: keyword unsigned
if_test.c:217:18: keyword int
if_test.c:217:22: identifier __uid_t
if_test.c:217:29: punctuator ;
if_test.c:218:1: keyword typedef
if_test.c:218:9: keyword unsigned
if_test.c:218:18: keyword int
if_test.c:218:22: identifier __gid_t
if_test.c:218:29: punctuator ;
if_test.c:219:1: keyword typedef
if_test.c:219:9: keyword unsigned
if_test.c:219:18: keyword long
if_test.c:219:23: keyword int
if_test.c:219:27: identifier __ino_t
if_test.c:219:34: punctuator ;
if_test.c:220:1: keyword typedef
if_test.c:220:9: keyword unsigned
if_test.c:220:18: keyword long
if_test.c:220:23: keyword int
if_test.c:220:27: identifier __ino64_t
if_test.c:220:36: punctuator ;
if_test.c:221:1: keyword typedef
if_test.c:221:9: keyword unsigned
if_test.c:221:18: keyword int
if_test.c:221:22: identifier __mode_t
if_test.c:221:30: punctuator ;
if_test.c:222:1: keyword typedef
if_test.c:222:9: keyword unsigned
if_test.c:222:18: keyword long
if_test.c:222:23: keyword int
if_test.c:222:27: identifier __nlink_t
if_test.c:222:36: punctuator ;
if_test.c:223:1: keyword typedef
if_test.c:223:9: keyword long
if_test.c:223:14: keyword int
if_test.c:223:18: identifier __off_t
if_test.c:223:25: punctuator ;
if_test.c:224:1: keyword typedef
if_test.c:224:9: keyword long
if_test.c:224:14: keyword int
if_test.c:224:18: identifier __off64_t
if_test.c:224:27: punctuator ;
if_test.c:225:1: keyword typedef
if_test.c:225:9: keyword int
if_test.c:225:13: identifier __pid_t
if_test.c:225:20: punctuator ;
if_test.c:226:1: keyword typedef
if_test.c:226:9: keyword struct
if_test.c:226:16: punctuator {
if_test.c:226:18: keyword int
if_test.c:226:22: identifier __val
if_test.c:226:27: punctuator [
if_test.c:226:28: constant 2
if_test.c:226:29: punctuator ]
if_test.c:226:30: punctuator ;
if_test.c:226:32: punctuator }
if_test.c:226:34: identifier __fsid_t
if_test.c:226:42: punctuator ;
if_test.c:227:1: keyword typedef
if_test.c:227:9: keyword long
if_test.c:227:14: keyword int
if_test.c:227:18: identifier __clock_t
if_test.c:227:27: punctuator ;
if_test.c:228:1: keyword typedef
if_test.c:228:9: keyword unsigned
if_test.c:228:18: keyword long
if_test.c:228:23: keyword int
if_test.c:228:27: identifier __rlim_t
if_test.c:228:35: punctuator ;
if_test.c:229:1: keyword typedef
if_test.c:229:9: keyword unsigned
if_test.c:229:18: keyword long
if_test.c:229:23: keyword int
if_test.c:229:27: identifier __rlim64_t
if_test.c:229:37: punctuator ;
if_test.c:230:1: keyword typedef
if_test.c:230:9: keyword unsigned
if_test.c:230:18: keyword int
if_test.c:230:22: identifier __id_t
if_test.c:230:28: punctuator ;
if_test.c:231:1: keyword typedef
if_test.c:231:9: keyword long
if_test.c:231:14: keyword int
if_test.c:231:18: identifier __time_t
if_test.c:231:26: punctuator ;
if_test.c:232:1: keyword typedef
if_test.c:232:9: keyword unsigned
if_test.c:232:18: keyword int
if_test.c:232:22: identifier __useconds_t
if_test.c:232:34: punctuator ;
if_test.c:233:1: keyword typedef
if_test.c:233:9: keyword long
if_test.c:233:14: keyword int
if_test.c:233:18: identifier __suseconds_t
if_test.c:233:31: punctuator ;
if_test.c:235:1: keyword typedef
if_test.c:235:9: keyword int
if_test.c:235:13: identifier __daddr_t
if_test.c:235:22: punctuator ;
if_test.c:236:1: keyword typedef
if_test.c:236:9: keyword long
if_test.c:236:14: keyword int
if_test.c:236:18: identifier __swblk_t
if_test.c:236:27: punctuator ;
if_test.c:237:1: keyword typedef
if_test.c:237:9: keyword int
if_test.c:237:13: identifier __key_t
if_test.c:237:20: punctuator ;
if_test.c:240:1: keyword typedef
if_test.c:240:9: keyword int
if_test.c:240:13: identifier __clockid_t
if_test.c:240:24: punctuator ;
if_test.c:243:1: keyword typedef
if_test.c:243:9: keyword void
if_test.c:243:14: punctuator *
if_test.c:243:16: identifier __timer_t
if_test.c:243:25: punctuator ;
if_test.c:246:1: keyword typedef
if_test.c:246:9: keyword long
if_test.c:246:14: keyword int
if_test.c:246:18: identifier __blksize_t
if_test.c:246:29: punctuator ;
if_test.c:251:1: keyword typedef
if_test.c:251:9: keyword long
if_test.c:251:14: keyword int
if_test.c:251:18: identifier __blkcnt_t
if_test.c:251:28: punctuator ;
if_test.c:252:1: keyword typedef
if_test.c:252:9: keyword long
if_test.c:252:14: keyword int
if_test.c:252:18: identifier __blkcnt64_t
if_test.c:252:30: punctuator ;
if_test.c:255:1: keyword typedef
if_test.c:255:9: keyword unsigned
if_test.c:255:18: keyword long
if_test.c:255:23: keyword int
if_test.c:255:27: identifier __fsblkcnt_t
if_test.c:255:39: punctuator ;
if_test.c:256:1: keyword typedef
if_test.c:256:9: keyword unsigned
if_test.c:256:18: keyword long
if_test.c:256:23: keyword int
if_test.c:256:27: identifier __fsblkcnt64_t
if_test.c:256:41: punctuator ;
if_test.c:259:1: keyword typedef
if_test.c:259:9: keyword unsigned
if_test.c:259:18: keyword long
if_test.c:259:23: keyword int
if_test.c:259:27: identifier __fsfilcnt_t
if_test.c:259:39: punctuator ;
if_test.c:260:1: keyword typedef
if_test.c:260:9: keyword unsigned
if_test.c:260:18: keyword long
if_test.c:260:23: keyword int
if_test.c:260:27: identifier __fsfilcnt64_t
if_test.c:260:41: punctuator ;
if_test.c:262:1: keyword typedef
if_test.c:262:9: keyword long
if_test.c:262:14: keyword int
if_test.c:262:18: identifier __ssize_t
if_test.c:262:27: punctuator ;
if_test.c:266:1: keyword typedef
if_test.c:266:9: identifier __off64_t
if_test.c:266:19: identifier __loff_t
if_test.c:266:27: punctuator ;
if_test.c:267:1: keyword typedef
if_test.c:267:9: identifier __quad_t
if_test.c:267:18: punctuator *
if_test.c:267:19: identifier __qaddr_t
if_test.c:267:28: punctuator ;
if_test.c:268:1: keyword typedef
if_test.c:268:9: keyword char
if_test.c:268:14: punctuator *
if_test.c:268:15: identifier __caddr_t
if_test.c:268:24: punctuator ;
if_test.c:271:1: keyword typedef
if_test.c:271:9: keyword long
if_test.c:271:14: keyword int
if_test.c:271:18: identifier __intptr_t
if_test.c:271:28: punctuator ;
if_test.c:274:1: keyword typedef
if_test.c:274:9: keyword unsigned
if_test.c:274:18: keyword int
if_test.c:274:22: identifier __socklen_t
if_test.c:274:33: punctuator ;
if_test.c:278:1: keyword typedef
if_test.c:278:9: identifier __u_char
if_test.c:278:18: identifier u_char
if_test.c:278:24: punctuator ;
if_test.c:279:1: keyword typedef
if_test.c:279:9: identifier __u_short
if_test.c:279:19: identifier u_short
if_test.c:279:26: punctuator ;
if_test.c:280:1: keyword typedef
if_test.c:280:9: identifier __u_int
if_test.c:280:17: identifier u_int
if_test.c:280:22: punctuator ;
if_test.c:281:1: keyword typedef
if_test.c:281:9: identifier __u_long
if_test.c:281:18: identifier u_long
if_test.c:281:24: punctuator ;
if_test.c:282:1: keyword typedef
if_test.c:282:9: identifier __quad_t
if_test.c:282:18: identifier quad_t
if_test.c:282:24: punctuator ;
if_test.c:283:1: keyword typedef
if_test.c:283:9: identifier __u_quad_t
if_test.c:283:20: identifier u_quad_t
if_test.c:283:28: punctuator ;
if_test.c:284:1: keyword typedef
if_test.c:284:9: identifier __fsid_t
if_test.c:284:18: identifier fsid_t
if_test.c:284:24: punctuator ;
if_test.c:289:1: keyword typedef
if_test.c:289:9: identifier __loff_t
if_test.c:289:18: identifier loff_t
if_test.c:289:24: punctuator ;
if_test.c:293:1: keyword typedef
if_test.c:293:9: identifier __ino_t
if_test.c:293:17: identifier ino_t
if_test.c:293:22: punctuator ;
if_test.c:294:1: keyword typedef
if_test.c:294:9: identifier __dev_t
if_test.c:294:17: identifier dev_t
if_test.c:294:22: punctuator ;
if_test.c:299:1: keyword typedef
if_test.c:299:9: identifier __gid_t
if_test.c:299:17: identifier gid_t
if_test.c:299:22: punctuator ;
if_test.c:304:1: keyword typedef
if_test.c:304:9: identifier __mode_t
if_test.c:304:18: identifier mode_t
if_test.c:304:24: punctuator ;
if_test.c:309:1: keyword typedef
if_test.c:309:9: identifier __nlink_t
if_test.c:309:19: identifier nlink_t
if_test.c:309:26: punctuator ;
if_test.c:314:1: keyword typedef
if_test.c:314:9: identifier __uid_t
if_test.c:314:17: identifier uid_t
if_test.c:314:22: punctuator ;
if_test.c:320:1: keyword typedef
if_test.c:320:9: identifier __off_t
if_test.c:320:17: identifier off_t
if_test.c:320:22: punctuator ;
if_test.c:321:1: keyword typedef
if_test.c:321:9: identifier __pid_t
if_test.c:321:17: identifier pid_t
if_test.c:321:22: punctuator ;
if_test.c:327:1: keyword typedef
if_test.c:327:9: identifier __id_t
if_test.c:327:16: identifier id_t
if_test.c:327:20: punctuator ;
if_test.c:332:1: keyword typedef
if_test.c:332:9: identifier __ssize_t
if_test.c:332:19: identifier ssize_t
if_test.c:332:26: punctuator ;
if_test.c:338:1: keyword typedef
if_test.c:338:9: identifier __daddr_t
if_test.c:338:19: identifier daddr_t
if_test.c:338:26: punctuator ;
if_test.c:339:1: keyword typedef
if_test.c:339:9: identifier __caddr_t
if_test.c:339:19: identifier caddr_t
if_test.c:339:26: punctuator ;
if_test.c:345:1: keyword typedef
if_test.c:345:9: identifier __key_t
if_test.c:345:17: identifier key_t
if_test.c:345:22: punctuator ;
if_test.c:348:1: keyword typedef
if_test.c:348:9: identifier __clock_t
if_test.c:348:19: identifier clock_t
if_test.c:348:26: punctuator ;
if_test.c:354:1: keyword typedef
if_test.c:354:9: identifier __time_t
if_test.c:354:18: identifier time_t
if_test.c:354:24: punctuator ;
if_test.c:358:1: keyword typedef
if_test.c:358:9: identifier __clockid_t
if_test.c:358:21: identifier clockid_t
if_test.c:358:30: punctuator ;
if_test.c:359:1: keyword typedef
if_test.c:359:9: identifier __timer_t
if_test.c:359:19: identifier timer_t
if_test.c:359:26: punctuator ;
if_test.c:363:1: keyword typedef
if_test.c:363:9: keyword unsigned
if_test.c:363:18: keyword long
if_test.c:363:23: keyword int
if_test.c:363:27: identifier ulong
if_test.c:363:32: punctuator ;
if_test.c:364:1: keyword typedef
if_test.c:364:9: keyword unsigned
if_test.c:364:18: keyword short
if_test.c:364:24: keyword int
if_test.c:364:28: identifier ushort
if_test.c:364:34: punctuator ;
if_test.c:365:1: keyword typedef
if_test.c:365:9: keyword unsigned
if_test.c:365:18: keyword int
if_test.c:365:22: identifier uint
if_test.c:365:26: punctuator ;
if_test.c:366:1: keyword typedef
if_test.c:366:9: keyword int
if_test.c:366:13: identifier int8_t
if_test.c:366:20: identifier __attribute__
if_test.c:366:34: punctuator (
if_test.c:366:35: punctuator (
if_test.c:366:36: identifier __mode__
if_test.c:366:45: punctuator (
if_test.c:366:46: identifier __QI__
if_test.c:366:52: punctuator )
if_test.c:366:53: punctuator )
if_test.c:366:54: punctuator )
if_test.c:366:55: punctuator ;
if_test.c:367:1: keyword typedef
if_test.c:367:9: keyword int
if_test.c:367:13: identifier int16_t
if_test.c:367:21: identifier __attribute__
if_test.c:367:35: punctuator (
if_test.c:367:36: punctuator (
if_test.c:367:37: identifier __mode__
if_test.c:367:46: punctuator (
if_test.c:367:47: identifier __HI__
if_test.c:367:53: punctuator )
if_test.c:367:54: punctuator )
if_test.c:367:55: punctuator )
if_test.c:367:56: punctuator ;
if_test.c:368:1: keyword typedef
if_test.c:368:9: keyword int
if_test.c:368:13: identifier int32_t
if_test.c:368:21: identifier __attribute__
if_test.c:368:35: punctuator (
if_test.c:368:36: punctuator (
if_test.c:368:37: identifier __mode__
if_test.c:368:46: punctuator (
if_test.c:368:47: identifier __SI__
if_test.c:368:53: punctuator )
if_test.c:368:54: punctuator )
if_test.c:368:55: punctuator )
if_test.c:368:56: punctuator ;
if_test.c:369:1: keyword typedef
if_test.c:369:9: keyword int
if_test.c:369:13: identifier int64_t
if_test.c:369:21: identifier __attribute__
if_test.c:369:35: punctuator (
if_test.c:369:36: punctuator (
if_test.c:369:37: identifier __mode__
if_test.c:369:46: punctuator (
if_test.c:369:47: identifier __DI__
if_test.c:369:53: punctuator )
if_test.c:369:54: punctuator )
if_test.c:369:55: punctuator )
if_test.c:369:56: punctuator ;
if_test.c:372:1: keyword typedef
if_test.c:372:9: keyword unsigned
if_test.c:372:18: keyword int
if_test.c:372:22: identifier u_int8_t
if_test.c:372:31: identifier __attribute__
if_test.c:372:45: punctuator (
if_test.c:372:46: punctuator (
if_test.c:372:47: identifier __mode__
if_test.c:372:56: punctuator (
if_test.c:372:57: identifier __QI__
if_test.c:372:63: punctuator )
if_test.c:372:64: punctuator )
if_test.c:372:65: punctuator )
if_test.c:372:66: punctuator ;
if_test.c:373:1: keyword typedef
if_test.c:373:9: keyword unsigned
if_test.c:373:18: keyword int
if_test.c:373:22: identifier u_int16_t
if_test.c:373:32: identifier __attribute__
if_test.c:373:46: punctuator (
if_test.c:373:47: punctuator (
if_test.c:373:48: identifier __mode__
if_test.c:373:57: punctuator (
if_test.c:373:58: identifier __HI__
if_test.c:373:64: punctuator )
if_test.c:373:65: punctuator )
if_test.c:373:66: punctuator )
if_test.c:373:67: punctuator ;
if_test.c:374:1: keyword typedef
if_test.c:374:9: keyword unsigned
if_test.c:374:18: keyword int
if_test.c:374:22: identifier u_int32_t
if_test.c:374:32: identifier __attribute__
if_test.c:374:46: punctuator (
if_test.c:374:47: punctuator (
if_test.c:374:48: identifier __mode__
if_test.c:374:57: punctuator (
if_test.c:374:58: identifier __SI__
if_test.c:374:64: punctuator )
if_test.c:374:65: punctuator )
if_test.c:374:66: punctuator )
if_test.c:374:67: punctuator ;
if_test.c:375:1: keyword typedef
if_test.c:375:9: keyword unsigned
if_test.c:375:18: keyword int
if_test.c:375:22: identifier u_int64_t
if_test.c:375:32: identifier __attribute__
if_test.c:375:46: punctuator (
if_test.c:375:47: punctuator (
if_test.c:375:48: identifier __mode__
if_test.c:375:57: punctuator (
if_test.c:375:58: identifier __DI__
if_test.c:375:64: punctuator )
if_test.c:375:65: punctuator )
if_test.c:375:66: punctuator )
if_test.c:375:67: punctuator ;
if_test.c:377:1: keyword typedef
if_test.c:377:9: keyword int
if_test.c:377:13: identifier register_t
if_test.c:377:24: identifier __attribute__
if_test.c:377:38: punctuator (
if_test.c:377:39: punctuator (
if_test.c:377:40: identifier __mode__
if_test.c:377:49: punctuator (
if_test.c:377:50: identifier __word__
if_test.c:377:58: punctuator )
if_test.c:377:59: punctuator )
if_test.c:377:60: punctuator )
if_test.c:377:61: punctuator ;
if_test.c:380:1: keyword typedef
if_test.c:380:9: keyword int
if_test.c:380:13: identifier __sig_atomic_t
if_test.c:380:27: punctuator ;
if_test.c:385:1: keyword typedef
if_test.c:385:9: keyword struct
if_test.c:386:3: punctuator {
if_test.c:387:5: keyword unsigned
if_test.c:387:14: keyword long
if_test.c:387:19: keyword int
if_test.c:387:23: identifier __val
if_test.c:387:28: punctuator [
if_test.c:387:29: punctuator (
if_test.c:387:30: constant 1024
if_test.c:387:35: punctuator /
if_test.c:387:37: punctuator (
if_test.c:387:38: constant 8
if_test.c:387:40: punctuator *
if_test.c:387:42: keyword sizeof
if_test.c:387:49: punctuator (
if_test.c:387:50: keyword unsigned
if_test.c:387:59: keyword long
if_test.c:387:64: keyword int
if_test.c:387:67: punctuator )
if_test.c:387:68: punctuator )
if_test.c:387:69: punctuator )
if_test.c:387:70: punctuator ]
if_test.c:387:71: punctuator ;
if_test.c:388:3: punctuator }
if_test.c:388:5: identifier __sigset_t
if_test.c:388:15: punctuator ;
if_test.c:392:1: keyword typedef
if_test.c:392:9: identifier __sigset_t
if_test.c:392:20: identifier sigset_t
if_test.c:392:28: punctuator ;
if_test.c:398:1: keyword struct
if_test.c:398:8: identifier timespec
if_test.c:399:3: punctuator {
if_test.c:400:5: identifier __time_t
if_test.c:400:14: identifier tv_sec
if_test.c:400:20: punctuator ;
if_test.c:401:5: keyword long
if_test.c:401:10: keyword int
if_test.c:401:14: identifier tv_nsec
if_test.c:401:21: punctuator ;
if_test.c:402:3: punctuator }
if_test.c:402:4: punctuator ;
if_test.c:404:1: keyword struct
if_test.c:404:8: identifier timeval
if_test.c:405:3: punctuator {
if_test.c:406:5: identifier __time_t
if_test.c:406:14: identifier tv_sec
if_test.c:406:20: punctuator ;
if_test.c:407:5: identifier __suseconds_t
if_test.c:407:19: identifier tv_usec
if_test.c:407:26: punctuator ;
if_test.c:408:3: punctuator }
if_test.c:408:4: punctuator ;
if_test.c:411:1: keyword typedef
if_test.c:411:9: identifier __suseconds_t
if_test.c:411:23: identifier suseconds_t
if_test.c:411:34: punctuator ;
if_test.c:417:1: keyword typedef
if_test.c:417:9: keyword long
if_test.c:417:14: keyword int
if_test.c:417:18: identifier __fd_mask
if_test.c:417:27: punctuator ;
if_test.c:418:1: keyword typedef
if_test.c:418:9: keyword struct
if_test.c:419:3: punctuator {
if_test.c:426:5: identifier __fd_mask
if_test.c:426:15: identifier __fds_bits
if_test.c:426:25: punctuator [
if_test.c:426:26: constant 1024
if_test.c:426:31: punctuator /
if_test.c:426:33: punctuator (
if_test.c:426:34: constant 8
if_test.c:426:36: punctuator *
if_test.c:426:38: punctuator (
if_test.c:426:39: keyword int
if_test.c:426:42: punctuator )
if_test.c:426:44: keyword sizeof
if_test.c:426:51: punctuator (
if_test.c:426:52: identifier __fd_mask
if_test.c:426:61: punctuator )
if_test.c:426:62: punctuator )
if_test.c:426:63: punctuator ]
if_test.c:426:64: punctuator ;
if_test.c:429:3: punctuator }
if_test.c:429:5: identifier fd_set
if_test.c:429:11: punctuator ;
if_test.c:436:1: keyword typedef
if_test.c:436:9: identifier __fd_mask
if_test.c:436:19: identifier fd_mask
if_test.c:436:26: punctuator ;
if_test.c:438:1: keyword extern
if_test.c:438:8: keyword int
if_test.c:438:12: identifier select
if_test.c:438:19: punctuator (
if_test.c:438:20: keyword int
if_test.c:438:24: identifier __nfds
if_test.c:438:30: punctuator ,
if_test.c:438:32: identifier fd_set
if_test.c:438:39: punctuator *
if_test.c:438:40: identifier __restrict
if_test.c:438:51: identifier __readfds
if_test.c:438:60: punctuator ,
if_test.c:439:6: identifier fd_set
if_test.c:439:13: punctuator *
if_test.c:439:14: identifier __restrict
if_test.c:439:25: identifier __writefds
if_test.c:439:35: punctuator ,
if_test.c:440:6: identifier fd_set
if_test.c:440:13: punctuator *
if_test.c:440:14: identifier __restrict
if_test.c:440:25: identifier __exceptfds
if_test.c:440:36: punctuator ,
if_test.c:441:6: keyword struct
if_test.c:441:13: identifier timeval
if_test.c:441:21: punctuator *
if_test.c:441:22: identifier __restrict
if_test.c:441:33: identifier __timeout
if_test.c:441:42: punctuator )
if_test.c:441:43: punctuator ;
if_test.c:442:1: keyword extern
if_test.c:442:8: keyword int
if_test.c:442:12: identifier pselect
if_test.c:442:20: punctuator (
if_test.c:442:21: keyword int
if_test.c:442:25: identifier __nfds
if_test.c:442:31: punctuator ,
if_test.c:442:33: identifier fd_set
if_test.c:442:40: punctuator *
if_test.c:442:41: identifier __restrict
if_test.c:442:52: identifier __readfds
if_test.c:442:61: punctuator ,
if_test.c:443:7: identifier fd_set
if_test.c:443:14: punctuator *
if_test.c:443:15: identifier __restrict
if_test.c:443:26: identifier __writefds
if_test.c:443:36: punctuator ,
if_test.c:444:7: identifier fd_set
if_test.c:444:14: punctuator *
if_test.c:444:15: identifier __restrict
if_test.c:444:26: identifier __exceptfds
if_test.c:444:37: punctuator ,
if_test.c:445:7: keyword const
if_test.c:445:13: keyword struct
if_test.c:445:20: identifier timespec
if_test.c:445:29: punctuator *
if_test.c:445:30: identifier __restrict
if_test.c:445:41: identifier __timeout
if_test.c:445:50: punctuator ,
if_test.c:446:7: keyword const
if_test.c:446:13: identifier __sigset_t
if_test.c:446:24: punctuator *
if_test.c:446:25: identifier __restrict
if_test.c:446:36: identifier __sigmask
if_test.c:446:45: punctuator )
if_test.c:446:46: punctuator ;
if_test.c:452:1: identifier __extension__
if_test.c:453:1: keyword extern
if_test.c:453:8: keyword unsigned
if_test.c:453:17: keyword int
if_test.c:453:21: identifier gnu_dev_major
if_test.c:453:35: punctuator (
if_test.c:453:36: keyword unsigned
if_test.c:453:45: keyword long
if_test.c:453:50: keyword long
if_test.c:453:55: keyword int
if_test.c:453:59: identifier __dev
if_test.c:453:64: punctuator )
if_test.c:454:6: identifier __attribute__
if_test.c:454:20: punctuator (
if_test.c:454:21: punctuator (
if_test.c:454:22: identifier __nothrow__
if_test.c:454:34: punctuator ,
if_test.c:454:36: identifier __leaf__
if_test.c:454:44: punctuator )
if_test.c:454:45: punctuator )
if_test.c:454:47: identifier __attribute__
if_test.c:454:61: punctuator (
if_test.c:454:62: punctuator (
if_test.c:454:63: identifier __const__
if_test.c:454:72: punctuator )
if_test.c:454:73: punctuator )
if_test.c:454:74: punctuator ;
if_test.c:455:1: identifier __extension__
if_test.c:456:1: keyword extern
if_test.c:456:8: keyword unsigned
if_test.c:456:17: keyword int
if_test.c:456:21: identifier gnu_dev_minor
if_test.c:456:35: punctuator (
if_test.c:456:36: keyword unsigned
if_test.c:456:45: keyword long
if_test.c:456:50: keyword long
if_test.c:456:55: keyword int
if_test.c:456:59: identifier __dev
if_test.c:456:64: punctuator )
if_test.c:457:6: identifier __attribute__
if_test.c:457:20: punctuator (
if_test.c:457:21: punctuator (
if_test.c:457:22: identifier __nothrow__
if_test.c:457:34: punctuator ,
if_test.c:457:36: identifier __leaf__
if_test.c:457:44: punctuator )
if_test.c:457:45: punctuator )
if_test.c:457:47: identifier __attribute__
if_test.c:457:61: punctuator (
if_test.c:457:62: punctuator (
if_test.c:457:63: identifier __const__
if_test.c:457:72: punctuator )
if_test.c:457:73: punctuator )
if_test.c:457:74: punctuator ;
if_test.c:458:1: identifier __extension__
if_test.c:459:1: keyword extern
if_test.c:459:8: keyword unsigned
if_test.c:459:17: keyword long
if_test.c:459:22: keyword long
if_test.c:459:27: keyword int
if_test.c:459:31: identifier gnu_dev_makedev
if_test.c:459:47: punctuator (
if_test.c:459:48: keyword unsigned
if_test.c:459:57: keyword int
if_test.c:459:61: identifier __major
if_test.c:459:68: punctuator ,
if_test.c:460:13: keyword unsigned
if_test.c:460:22: keyword int
if_test.c:460:26: identifier __minor
if_test.c:460:33: punctuator )
if_test.c:461:6: identifier __attribute__
if_test.c:461:20: punctuator (
if_test.c:461:21: punctuator (
if_test.c:461:22: identifier __nothrow__
if_test.c:461:34: punctuator ,
if_test.c:461:36: identifier __leaf__
if_test.c:461:44: punctuator )
if_test.c:461:45: punctuator )
if_test.c:461:47: identifier __attribute__
if_test.c:461:61: punctuator (
if_test.c:461:62: punctuator (
if_test.c:461:63: identifier __const__
if_test.c:461:72: punctuator )
if_test.c:461:73: punctuator )
if_test.c:461:74: punctuator ;
if_test.c:468:1: keyword typedef
if_test.c:468:9: identifier __blksize_t
if_test.c:468:21: identifier blksize_t
if_test.c:468:30: punctuator ;
if_test.c:475:1: keyword typedef
if_test.c:475:9: identifier __blkcnt_t
if_test.c:475:20: identifier blkcnt_t
if_test.c:475:28: punctuator ;
if_test.c:479:1: keyword typedef
if_test.c:479:9: identifier __fsblkcnt_t
if_test.c:479:22: identifier fsblkcnt_t
if_test.c:479:32: punctuator ;
if_test.c:483:1: keyword typedef
if_test.c:483:9: identifier __fsfilcnt_t
if_test.c:483:22: identifier fsfilcnt_t
if_test.c:483:32: punctuator ;
if_test.c:484:1: keyword typedef
if_test.c:484:9: keyword unsigned
if_test.c:484:18: keyword long
if_test.c:484:23: keyword int
if_test.c:484:27: identifier pthread_t
if_test.c:484:36: punctuator ;
if_test.c:487:1: keyword typedef
if_test.c:487:9: keyword union
if_test.c:488:1: punctuator {
if_test.c:489:3: keyword char
if_test.c:489:8: identifier __size
if_test.c:489:14: punctuator [
if_test.c:489:15: constant 56
if_test.c:489:17: punctuator ]
if_test.c:489:18: punctuator ;
if_test.c:490:3: keyword long
if_test.c:490:8: keyword int
if_test.c:490:12: identifier __align
if_test.c:490:19: punctuator ;
if_test.c:491:1: punctuator }
if_test.c:491:3: identifier pthread_attr_t
if_test.c:491:17: punctuator ;
if_test.c:495:1: keyword typedef
if_test.c:495:9: keyword struct
if_test.c:495:16: identifier __pthread_internal_list
if_test.c:496:1: punctuator {
if_test.c:497:3: keyword struct
if_test.c:497:10: identifier __pthread_internal_list
if_test.c:497:34: punctuator *
if_test.c:497:35: identifier __prev
if_test.c:497:41: punctuator ;
if_test.c:498:3: keyword struct
if_test.c:498:10: identifier __pthread_internal_list
if_test.c:498:34: punctuator *
if_test.c:498:35: identifier __next
if_test.c:498:41: punctuator ;
if_test.c:499:1: punctuator }
if_test.c:499:3: identifier __pthread_list_t
if_test.c:499:19: punctuator ;
if_test.c:500:1: keyword typedef
if_test.c:500:9: keyword union
if_test.c:501:1: punctuator {
if_test.c:502:3: keyword struct
if_test.c:502:10: identifier __pthread_mutex_s
if_test.c:503:3: punctuator {
if_test.c:504:5: keyword int
if_test.c:504:9: identifier __lock
if_test.c:504:15: punctuator ;
if_test.c:505:5: keyword unsigned
if_test.c:505:14: keyword int
if_test.c:505:18: identifier __count
if_test.c:505:25: punctuator ;
if_test.c:506:5: keyword int
if_test.c:506:9: identifier __owner
if_test.c:506:16: punctuator ;
if_test.c:508:5: keyword unsigned
if_test.c:508:14: keyword int
if_test.c:508:18: identifier __nusers
if_test.c:508:26: punctuator ;
if_test.c:512:5: keyword int
if_test.c:512:9: identifier __kind
if_test.c:512:15: punctuator ;
if_test.c:514:5: keyword int
if_test.c:514:9: identifier __spins
if_test.c:514:16: punctuator ;
if_test.c:515:5: identifier __pthread_list_t
if_test.c:515:22: identifier __list
if_test.c:515:28: punctuator ;
if_test.c:516:3: punctuator }
if_test.c:516:5: identifier __data
if_test.c:516:11: punctuator ;
if_test.c:517:3: keyword char
if_test.c:517:8: identifier __size
if_test.c:517:14: punctuator [
if_test.c:517:15: constant 40
if_test.c:517:17: punctuator ]
if_test.c:517:18: punctuator ;
if_test.c:518:3: keyword long
if_test.c:518:8: keyword int
if_test.c:518:12: identifier __align
if_test.c:518:19: punctuator ;
if_test.c:519:1: punctuator }
if_test.c:519:3: identifier pthread_mutex_t
if_test.c:519:18: punctuator ;
if_test.c:521:1: keyword typedef
if_test.c:521:9: keyword union
if_test.c:522:1: punctuator {
if_test.c:523:3: keyword char
if_test.c:523:8: identifier __size
if_test.c:523:14: punctuator [
if_test.c:523:15: constant 4
if_test.c:523:16: punctuator ]
if_test.c:523:17: punctuator ;
if_test.c:524:3: keyword int
if_test.c:524:7: identifier __align
if_test.c:524:14: punctuator ;
if_test.c:525:1: punctuator }
if_test.c:525:3: identifier pthread_mutexattr_t
if_test.c:525:22: punctuator ;
if_test.c:530:1: keyword typedef
if_test.c:530:9: keyword union
if_test.c:531:1: punctuator {
if_test.c:532:3: keyword struct
if_test.c:533:3: punctuator {
if_test.c:534:5: keyword int
if_test.c:534:9: identifier __lock
if_test.c:534:15: punctuator ;
if_test.c:535:5: keyword unsigned
if_test.c:535:14: keyword int
if_test.c:535:18: identifier __futex
if_test.c:535:25: punctuator ;
if_test.c:536:5: identifier __extension__
if_test.c:536:19: keyword unsigned
if_test.c:536:28: keyword long
if_test.c:536:33: keyword long
if_test.c:536:38: keyword int
if_test.c:536:42: identifier __total_seq
if_test.c:536:53: punctuator ;
if_test.c:537:5: identifier __extension__
if_test.c:537:19: keyword unsigned
if_test.c:537:28: keyword long
if_test.c:537:33: keyword long
if_test.c:537:38: keyword int
if_test.c:537:42: identifier __wakeup_seq
if_test.c:537:54: punctuator ;
if_test.c:538:5: identifier __extension__
if_test.c:538:19: keyword unsigned
if_test.c:538:28: keyword long
if_test.c:538:33: keyword long
if_test.c:538:38: keyword int
if_test.c:538:42: identifier __woken_seq
if_test.c:538:53: punctuator ;
if_test.c:539:5: keyword void
if_test.c:539:10: punctuator *
if_test.c:539:11: identifier __mutex
if_test.c:539:18: punctuator ;
if_test.c:540:5: keyword unsigned
if_test.c:540:14: keyword int
if_test.c:540:18: identifier __nwaiters
if_test.c:540:28: punctuator ;
if_test.c:541:5: keyword unsigned
if_test.c:541:14: keyword int
if_test.c:541:18: identifier __broadcast_seq
if_test.c:541:33: punctuator ;
if_test.c:542:3: punctuator }
if_test.c:542:5: identifier __data
if_test.c:542:11: punctuator ;
if_test.c:543:3: keyword char
if_test.c:543:8: identifier __size
if_test.c:543:14: punctuator [
if_test.c:543:15: constant 48
if_test.c:543:17: punctuator ]
if_test.c:543:18: punctuator ;
if_test.c:544:3: identifier __extension__
if_test.c:544:17: keyword long
if_test.c:544:22: keyword long
if_test.c:544:27: keyword int
if_test.c:544:31: identifier __align
if_test.c:544:38: punctuator ;
if_test.c:545:1: punctuator }
if_test.c:545:3: identifier pthread_cond_t
if_test.c:545:17: punctuator ;
if_test.c:547:1: keyword typedef
if_test.c:547:9: keyword union
if_test.c:548:1: punctuator {
if_test.c:549:3: keyword char
if_test.c:549:8: identifier __size
if_test.c:549:14: punctuator [
if_test.c:549:15: constant 4
if_test.c:549:16: punctuator ]
if_test.c:549:17: punctuator ;
if_test.c:550:3: keyword int
if_test.c:550:7: identifier __align
if_test.c:550:14: punctuator ;
if_test.c:551:1: punctuator }
if_test.c:551:3: identifier pthread_condattr_t
if_test.c:551:21: punctuator ;
if_test.c:555:1: keyword typedef
if_test.c:555:9: keyword unsigned
if_test.c:555:18: keyword int
if_test.c:555:22: identifier pthread_key_t
if_test.c:555:35: punctuator ;
if_test.c:559:1: keyword typedef
if_test.c:559:9: keyword int
if_test.c:559:13: identifier pthread_once_t
if_test.c:559:27: punctuator ;
if_test.c:565:1: keyword typedef
if_test.c:565:9: keyword union
if_test.c:566:1: punctuator {
if_test.c:568:3: keyword struct
if_test.c:569:3: punctuator {
if_test.c:570:5: keyword int
if_test.c:570:9: identifier __lock
if_test.c:570:15: punctuator ;
if_test.c:571:5: keyword unsigned
if_test.c:571:14: keyword int
if_test.c:571:18: identifier __nr_readers
if_test.c:571:30: punctuator ;
if_test.c:572:5: keyword unsigned
if_test.c:572:14: keyword int
if_test.c:572:18: identifier __readers_wakeup
if_test.c:572:34: punctuator ;
if_test.c:573:5: keyword unsigned
if_test.c:573:14: keyword int
if_test.c:573:18: identifier __writer_wakeup
if_test.c:573:33: punctuator ;
if_test.c:574:5: keyword unsigned
if_test.c:574:14: keyword int
if_test.c:574:18: identifier __nr_readers_queued
if_test.c:574:37: punctuator ;
if_test.c:575:5: keyword unsigned
if_test.c:575:14: keyword int
if_test.c:575:18: identifier __nr_writers_queued
if_test.c:575:37: punctuator ;
if_test.c:576:5: keyword int
if_test.c:576:9: identifier __writer
if_test.c:576:17: punctuator ;
if_test.c:577:5: keyword int
if_test.c:577:9: identifier __shared
if_test.c:577:17: punctuator ;
if_test.c:578:5: keyword unsigned
if_test.c:578:14: keyword long
if_test.c:578:19: keyword int
if_test.c:578:23: identifier __pad1
if_test.c:578:29: punctuator ;
if_test.c:579:5: keyword unsigned
if_test.c:579:14: keyword long
if_test.c:579:19: keyword int
if_test.c:579:23: identifier __pad2
if_test.c:579:29: punctuator ;
if_test.c:582:5: keyword unsigned
if_test.c:582:14: keyword int
if_test.c:582:18: identifier __flags
if_test.c:582:25: punctuator ;
if_test.c:583:3: punctuator }
if_test.c:583:5: identifier __data
if_test.c:583:11: punctuator ;
if_test.c:584:3: keyword char
if_test.c:584:8: identifier __size
if_test.c:584:14: punctuator [
if_test.c:584:15: constant 56
if_test.c:584:17: punctuator ]
if_test.c:584:18: punctuator ;
if_test.c:585:3: keyword long
if_test.c:585:8: keyword int
if_test.c:585:12: identifier __align
if_test.c:585:19: punctuator ;
if_test.c:586:1: punctuator }
if_test.c:586:3: identifier pthread_rwlock_t
if_test.c:586:19: punctuator ;
if_test.c:588:1: keyword typedef
if_test.c:588:9: keyword union
if_test.c:589:1: punctuator {
if_test.c:590:3: keyword char
if_test.c:590:8: identifier __size
if_test.c:590:14: punctuator [
if_test.c:590:15: constant 8
if_test.c:590:16: punctuator ]
if_test.c:590:17: punctuator ;
if_test.c:591:3: keyword long
if_test.c:591:8: keyword int
if_test.c:591:12: identifier __align
if_test.c:591:19: punctuator ;
if_test.c:592:1: punctuator }
if_test.c:592:3: identifier pthread_rwlockattr_t
if_test.c:592:23: punctuator ;
if_test.c:598:1: keyword typedef
if_test.c:598:9: keyword volatile
if_test.c:598:18: keyword int
if_test.c:598:22: identifier pthread_spinlock_t
if_test.c:598:40: punctuator ;
if_test.c:603:1: keyword typedef
if_test.c:603:9: keyword union
if_test.c:604:1: punctuator {
if_test.c:605:3: keyword char
if_test.c:605:8: identifier __size
if_test.c:605:14: punctuator [
if_test.c:605:15: constant 32
if_test.c:605:17: punctuator ]
if_test.c:605:18: punctuator ;
if_test.c:606:3: keyword long
if_test.c:606:8: keyword int
if_test.c:606:12: identifier __align
if_test.c:606:19: punctuator ;
if_test.c:607:1: punctuator }
if_test.c:607:3: identifier pthread_barrier_t
if_test.c:607:20: punctuator ;
if_test.c:609:1: keyword typedef
if_test.c:609:9: keyword union
if_test.c:610:1: punctuator {
if_test.c:611:3: keyword char
if_test.c:611:8: identifier __size
if_test.c:611:14: punctuator [
if_test.c:611:15: constant 4
if_test.c:611:16: punctuator ]
if_test.c:611:17: punctuator ;
if_test.c:612:3: keyword int
if_test.c:612:7: identifier __align
if_test.c:612:14: punctuator ;
if_test.c:613:1: punctuator }
if_test.c:613:3: identifier pthread_barrierattr_t
if_test.c:613:24: punctuator ;
if_test.c:623:1: keyword extern
if_test.c:623:8: keyword long
if_test.c:623:13: keyword int
if_test.c:623:17: identifier random
if_test.c:623:24: punctuator (
if_test.c:623:25: keyword void
if_test.c:623:29: punctuator )
if_test.c:623:31: identifier __attribute__
if_test.c:623:45: punctuator (
if_test.c:623:46: punctuator (
if_test.c:623:47: identifier __nothrow__
if_test.c:623:59: punctuator ,
if_test.c:623:61: identifier __leaf__
if_test.c:623:69: punctuator )
if_test.c:623:70: punctuator )
if_test.c:623:71: punctuator ;
if_test.c:626:1: keyword extern
if_test.c:626:8: keyword void
if_test.c:626:13: identifier srandom
if_test.c:626:21: punctuator (
if_test.c:626:22: keyword unsigned
if_test.c:626:31: keyword int
if_test.c:626:35: identifier __seed
if_test.c:626:41: punctuator )
if_test.c:626:43: identifier __attribute__
if_test.c:626:57: punctuator (
if_test.c:626:58: punctuator (
if_test.c:626:59: identifier __nothrow__
if_test.c:626:71: punctuator ,
if_test.c:626:73: identifier __leaf__
if_test.c:626:81: punctuator )
if_test.c:626:82: punctuator )
if_test.c:626:83: punctuator ;
if_test.c:632:1: keyword extern
if_test.c:632:8: keyword char
if_test.c:632:13: punctuator *
if_test.c:632:14: identifier initstate
if_test.c:632:24: punctuator (
if_test.c:632:25: keyword unsigned
if_test.c:632:34: keyword int
if_test.c:632:38: identifier __seed
if_test.c:632:44: punctuator ,
if_test.c:632:46: keyword char
if_test.c:632:51: punctuator *
if_test.c:632:52: identifier __statebuf
if_test.c:632:62: punctuator ,
if_test.c:633:4: identifier size_t
if_test.c:633:11: identifier __statelen
if_test.c:633:21: punctuator )
if_test.c:633:23: identifier __attribute__
if_test.c:633:37: punctuator (
if_test.c:633:38: punctuator (
if_test.c:633:39: identifier __nothrow__
if_test.c:633:51: punctuator ,
if_test.c:633:53: identifier __leaf__
if_test.c:633:61: punctuator )
if_test.c:633:62: punctuator )
if_test.c:633:64: identifier __attribute__
if_test.c:633:78: punctuator (
if_test.c:633:79: punctuator (
if_test.c:633:80: identifier __nonnull__
if_test.c:633:92: punctuator (
if_test.c:633:93: constant 2
if_test.c:633:94: punctuator )
if_test.c:633:95: punctuator )
if_test.c:633:96: punctuator )
if_test.c:633:97: punctuator ;
if_test.c:637:1: keyword extern
if_test.c:637:8: keyword char
if_test.c:637:13: punctuator *
if_test.c:637:14: identifier setstate
if_test.c:637:23: punctuator (
if_test.c:637:24: keyword char
if_test.c:637:29: punctuator *
if_test.c:637:30: identifier __statebuf
if_test.c:637:40: punctuator )
if_test.c:637:42: identifier __attribute__
if_test.c:637:56: punctuator (
if_test.c:637:57: punctuator (
if_test.c:637:58: identifier __nothrow__
if_test.c:637:70: punctuator ,
if_test.c:637:72: identifier __leaf__
if_test.c:637:80: punctuator )
if_test.c:637:81: punctuator )
if_test.c:637:83: identifier __attribute__
if_test.c:637:97: punctuator (
if_test.c:637:98: punctuator (
if_test.c:637:99: identifier __nonnull__
if_test.c:637:111: punctuator (
if_test.c:637:112: constant 1
if_test.c:637:113: punctuator )
if_test.c:637:114: punctuator )
if_test.c:637:115: punctuator )
if_test.c:637:116: punctuator ;
if_test.c:645:1: keyword struct
if_test.c:645:8: identifier random_data
if_test.c:646:3: punctuator {
if_test.c:647:5: identifier int32_t
if_test.c:647:13: punctuator *
if_test.c:647:14: identifier fptr
if_test.c:647:18: punctuator ;
if_test.c:648:5: identifier int32_t
if_test.c:648:13: punctuator *
if_test.c:648:14: identifier rptr
if_test.c:648:18: punctuator ;
if_test.c:649:5: identifier int32_t
if_test.c:649:13: punctuator *
if_test.c:649:14: identifier state
if_test.c:649:19: punctuator ;
if_test.c:650:5: keyword int
if_test.c:650:9: identifier rand_type
if_test.c:650:18: punctuator ;
if_test.c:651:5: keyword int
if_test.c:651:9: identifier rand_deg
if_test.c:651:17: punctuator ;
if_test.c:652:5: keyword int
if_test.c:652:9: identifier rand_sep
if_test.c:652:17: punctuator ;
if_test.c:653:5: identifier int32_t
if_test.c:653:13: punctuator *
if_test.c:653:14: identifier end_ptr
if_test.c:653:21: punctuator ;
if_test.c:654:3: punctuator }
if_test.c:654:4: punctuator ;
if_test.c:656:1: keyword extern
if_test.c:656:8: keyword int
if_test.c:656:12: identifier random_r
if_test.c:656:21: punctuator (
if_test.c:656:22: keyword struct
if_test.c:656:29: identifier random_data
if_test.c:656:41: punctuator *
if_test.c:656:42: identifier __restrict
if_test.c:656:53: identifier __buf
if_test.c:656:58: punctuator ,
if_test.c:657:8: identifier int32_t
if_test.c:657:16: punctuator *
if_test.c:657:17: identifier __restrict
if_test.c:657:28: identifier __result
if_test.c:657:36: punctuator )
if_test.c:657:38: identifier __attribute__
if_test.c:657:52: punctuator (
if_test.c:657:53: punctuator (
if_test.c:657:54: identifier __nothrow__
if_test.c:657:66: punctuator ,
if_test.c:657:68: identifier __leaf__
if_test.c:657:76: punctuator )
if_test.c:657:77: punctuator )
if_test.c:657:79: identifier __attribute__
if_test.c:657:93: punctuator (
if_test.c:657:94: punctuator (
if_test.c:657:95: identifier __nonnull__
if_test.c:657:107: punctuator (
if_test.c:657:108: constant 1
if_test.c:657:109: punctuator ,
if_test.c:657:111: constant 2
if_test.c:657:112: punctuator )
if_test.c:657:113: punctuator )
if_test.c:657:114: punctuator )
if_test.c:657:115: punctuator ;
if_test.c:659:1: keyword extern
if_test.c:659:8: keyword int
if_test.c:659:12: identifier srandom_r
if_test.c:659:22: punctuator (
if_test.c:659:23: keyword unsigned
if_test.c:659:32: keyword int
if_test.c:659:36: identifier __seed
if_test.c:659:42: punctuator ,
if_test.c:659:44: keyword struct
if_test.c:659:51: identifier random_data
if_test.c:659:63: punctuator *
if_test.c:659:64: identifier __buf
if_test.c:659:69: punctuator )
if_test.c:660:6: identifier __attribute__
if_test.c:660:20: punctuator (
if_test.c:660:21: punctuator (
if_test.c:660:22: identifier __nothrow__
if_test.c:660:34: punctuator ,
if_test.c:660:36: identifier __leaf__
if_test.c:660:44: punctuator )
if_test.c:660:45: punctuator )
if_test.c:660:47: identifier __attribute__
if_test.c:660:61: punctuator (
if_test.c:660:62: punctuator (
if_test.c:660:63: identifier __nonnull__
if_test.c:660:75: punctuator (
if_test.c:660:76: constant 2
if_test.c:660:77: punctuator )
if_test.c:660:78: punctuator )
if_test.c:660:79: punctuator )
if_test.c:660:80: punctuator ;
if_test.c:662:1: keyword extern
if_test.c:662:8: keyword int
if_test.c:662:12: identifier initstate_r
if_test.c:662:24: punctuator (
if_test.c:662:25: keyword unsigned
if_test.c:662:34: keyword int
if_test.c:662:38: identifier __seed
if_test.c:662:44: punctuator ,
if_test.c:662:46: keyword char
if_test.c:662:51: punctuator *
if_test.c:662:52: identifier __restrict
if_test.c:662:63: identifier __statebuf
if_test.c:662:73: punctuator ,
if_test.c:663:4: identifier size_t
if_test.c:663:11: identifier __statelen
if_test.c:663:21: punctuator ,
if_test.c:664:4: keyword struct
if_test.c:664:11: identifier random_data
if_test.c:664:23: punctuator *
if_test.c:664:24: identifier __restrict
if_test.c:664:35: identifier __buf
if_test.c:664:40: punctuator )
if_test.c:665:6: identifier __attribute__
if_test.c:665:20: punctuator (
if_test.c:665:21: punctuator (
if_test.c:665:22: identifier __nothrow__
if_test.c:665:34: punctuator ,
if_test.c:665:36: identifier __leaf__
if_test.c:665:44: punctuator )
if_test.c:665:45: punctuator )
if_test.c:665:47: identifier __attribute__
if_test.c:665:61: punctuator (
if_test.c:665:62: punctuator (
if_test.c:665:63: identifier __nonnull__
if_test.c:665:75: punctuator (
if_test.c:665:76: constant 2
if_test.c:665:77: punctuator ,
if_test.c:665:79: constant 4
if_test.c:665:80: punctuator )
if_test.c:665:81: punctuator )
if_test.c:665:82: punctuator )
if_test.c:665:83: punctuator ;
if_test.c:667:1: keyword extern
if_test.c:667:8: keyword int
if_test.c:667:12: identifier setstate_r
if_test.c:667:23: punctuator (
if_test.c:667:24: keyword char
if_test.c:667:29: punctuator *
if_test.c:667:30: identifier __restrict
if_test.c:667:41: identifier __statebuf
if_test.c:667:51: punctuator ,
if_test.c:668:10: keyword struct
if_test.c:668:17: identifier random_data
if_test.c:668:29: punctuator *
if_test.c:668:30: identifier __restrict
if_test.c:668:41: identifier __buf
if_test.c:668:46: punctuator )
if_test.c:669:6: identifier __attribute__
if_test.c:669:20: punctuator (
if_test.c:669:21: punctuator (
if_test.c:669:22: identifier __nothrow__
if_test.c:669:34: punctuator ,
if_test.c:669:36: identifier __leaf__
if_test.c:669:44: punctuator )
if_test.c:669:45: punctuator )
if_test.c:669:47: identifier __attribute__
if_test.c:669:61: punctuator (
if_test.c:669:62: punctuator (
if_test.c:669:63: identifier __nonnull__
if_test.c:669:75: punctuator (
if_test.c:669:76: constant 1
if_test.c:669:77: punctuator ,
if_test.c:669:79: constant 2
if_test.c:669:80: punctuator )
if_test.c:669:81: punctuator )
if_test.c:669:82: punctuator )
if_test.c:669:83: punctuator ;
if_test.c:676:1: keyword extern
if_test.c:676:8: keyword int
if_test.c:676:12: identifier rand
if_test.c:676:17: punctuator (
if_test.c:676:18: keyword void
if_test.c:676:22: punctuator )
if_test.c:676:24: identifier __attribute__
if_test.c:676:38: punctuator (
if_test.c:676:39: punctuator (
if_test.c:676:40: identifier __nothrow__
if_test.c:676:52: punctuator ,
if_test.c:676:54: identifier __leaf__
if_test.c:676:62: punctuator )
if_test.c:676:63: punctuator )
if_test.c:676:64: punctuator ;
if_test.c:678:1: keyword extern
if_test.c:678:8: keyword void
if_test.c:678:13: identifier srand
if_test.c:678:19: punctuator (
if_test.c:678:20: keyword unsigned
if_test.c:678:29: keyword int
if_test.c:678:33: identifier __seed
if_test.c:678:39: punctuator )
if_test.c:678:41: identifier __attribute__
if_test.c:678:55: punctuator (
if_test.c:678:56: punctuator (
if_test.c:678:57: identifier __nothrow__
if_test.c:678:69: punctuator ,
if_test.c:678:71: identifier __leaf__
if_test.c:678:79: punctuator )
if_test.c:678:80: punctuator )
if_test.c:678:81: punctuator ;
if_test.c:683:1: keyword extern
if_test.c:683:8: keyword int
if_test.c:683:12: identifier rand_r
if_test.c:683:19: punctuator (
if_test.c:683:20: keyword unsigned
if_test.c:683:29: keyword int
if_test.c:683:33: punctuator *
if_test.c:683:34: identifier __seed
if_test.c:683:40: punctuator )
if_test.c:683:42: identifier __attribute__
if_test.c:683:56: punctuator (
if_test.c:683:57: punctuator (
if_test.c:683:58: identifier __nothrow__
if_test.c:683:70: punctuator ,
if_test.c:683:72: identifier __leaf__
if_test.c:683:80: punctuator )
if_test.c:683:81: punctuator )
if_test.c:683:82: punctuator ;
if_test.c:691:1: keyword extern
if_test.c:691:8: keyword double
if_test.c:691:15: identifier drand48
if_test.c:691:23: punctuator (
if_test.c:691:24: keyword void
if_test.c:691:28: punctuator )
if_test.c:691:30: identifier __attribute__
if_test.c:691:44: punctuator (
if_test.c:691:45: punctuator (
if_test.c:691:46: identifier __nothrow__
if_test.c:691:58: punctuator ,
if_test.c:691:60: identifier __leaf__
if_test.c:691:68: punctuator )
if_test.c:691:69: punctuator )
if_test.c:691:70: punctuator ;
if_test.c:692:1: keyword extern
if_test.c:692:8: keyword double
if_test.c:692:15: identifier erand48
if_test.c:692:23: punctuator (
if_test.c:692:24: keyword unsigned
if_test.c:692:33: keyword short
if_test.c:692:39: keyword int
if_test.c:692:43: identifier __xsubi
if_test.c:692:50: punctuator [
if_test.c:692:51: constant 3
if_test.c:692:52: punctuator ]
if_test.c:692:53: punctuator )
if_test.c:692:55: identifier __attribute__
if_test.c:692:69: punctuator (
if_test.c:692:70: punctuator (
if_test.c:692:71: identifier __nothrow__
if_test.c:692:83: punctuator ,
if_test.c:692:85: identifier __leaf__
if_test.c:692:93: punctuator )
if_test.c:692:94: punctuator )
if_test.c:692:96: identifier __attribute__
if_test.c:692:110: punctuator (
if_test.c:692:111: punctuator (
if_test.c:692:112: identifier __nonnull__
if_test.c:692:124: punctuator (
if_test.c:692:125: constant 1
if_test.c:692:126: punctuator )
if_test.c:692:127: punctuator )
if_test.c:692:128: punctuator )
if_test.c:692:129: punctuator ;
if_test.c:695:1: keyword extern
if_test.c:695:8: keyword long
if_test.c:695:13: keyword int
if_test.c:695:17: identifier lrand48
if_test.c:695:25: punctuator (
if_test.c:695:26: keyword void
if_test.c:695:30: punctuator )
if_test.c:695:32: identifier __attribute__
if_test.c:695:46: punctuator (
if_test.c:695:47: punctuator (
if_test.c:695:48: identifier __nothrow__
if_test.c:695:60: punctuator ,
if_test.c:695:62: identifier __leaf__
if_test.c:695:70: punctuator )
if_test.c:695:71: punctuator )
if_test.c:695:72: punctuator ;
if_test.c:696:1: keyword extern
if_test.c:696:8: keyword long
if_test.c:696:13: keyword int
if_test.c:696:17: identifier nrand48
if_test.c:696:25: punctuator (
if_test.c:696:26: keyword unsigned
if_test.c:696:35: keyword short
if_test.c:696:41: keyword int
if_test.c:696:45: identifier __xsubi
if_test.c:696:52: punctuator [
if_test.c:696:53: constant 3
if_test.c:696:54: punctuator ]
if_test.c:696:55: punctuator )
if_test.c:697:6: identifier __attribute__
if_test.c:697:20: punctuator (
if_test.c:697:21: punctuator (
if_test.c:697:22: identifier __nothrow__
if_test.c:697:34: punctuator ,
if_test.c:697:36: identifier __leaf__
if_test.c:697:44: punctuator )
if_test.c:697:45: punctuator )
if_test.c:697:47: identifier __attribute__
if_test.c:697:61: punctuator (
if_test.c:697:62: punctuator (
if_test.c:697:63: identifier __nonnull__
if_test.c:697:75: punctuator (
if_test.c:697:76: constant 1
if_test.c:697:77: punctuator )
if_test.c:697:78: punctuator )
if_test.c:697:79: punctuator )
if_test.c:697:80: punctuator ;
if_test.c:700:1: keyword extern
if_test.c:700:8: keyword long
if_test.c:700:13: keyword int
if_test.c:700:17: identifier mrand48
if_test.c:700:25: punctuator (
if_test.c:700:26: keyword void
if_test.c:700:30: punctuator )
if_test.c:700:32: identifier __attribute__
if_test.c:700:46: punctuator (
if_test.c:700:47: punctuator (
if_test.c:700:48: identifier __nothrow__
if_test.c:700:60: punctuator ,
if_test.c:700:62: identifier __leaf__
if_test.c:700:70: punctuator )
if_test.c:700:71: punctuator )
if_test.c:700:72: punctuator ;
if_test.c:701:1: keyword extern
if_test.c:701:8: keyword long
if_test.c:701:13: keyword int
if_test.c:701:17: identifier jrand48
if_test.c:701:25: punctuator (
if_test.c:701:26: keyword unsigned
if_test.c:701:35: keyword short
if_test.c:701:41: keyword int
if_test.c:701:45: identifier __xsubi
if_test.c:701:52: punctuator [
if_test.c:701:53: constant 3
if_test.c:701:54: punctuator ]
if_test.c:701:55: punctuator )
if_test.c:702:6: identifier __attribute__
if_test.c:702:20: punctuator (
if_test.c:702:21: punctuator (
if_test.c:702:22: identifier __nothrow__
if_test.c:702:34: punctuator ,
if_test.c:702:36: identifier __leaf__
if_test.c:702:44: punctuator )
if_test.c:702:45: punctuator )
if_test.c:702:47: identifier __attribute__
if_test.c:702:61: punctuator (
if_test.c:702:62: punctuator (
if_test.c:702:63: identifier __nonnull__
if_test.c:702:75: punctuator (
if_test.c:702:76: constant 1
if_test.c:702:77: punctuator )
if_test.c:702:78: punctuator )
if_test.c:702:79: punctuator )
if_test.c:702:80: punctuator ;
if_test.c:705:1: keyword extern
if_test.c:705:8: keyword void
if_test.c:705:13: identifier srand48
if_test.c:705:21: punctuator (
if_test.c:705:22: keyword long
if_test.c:705:27: keyword int
if_test.c:705:31: identifier __seedval
if_test.c:705:40: punctuator )
if_test.c:705:42: identifier __attribute__
if_test.c:705:56: punctuator (
if_test.c:705:57: punctuator (
if_test.c:705:58: identifier __nothrow__
if_test.c:705:70: punctuator ,
if_test.c:705:72: identifier __leaf__
if_test.c:705:80: punctuator )
if_test.c:705:81: punctuator )
if_test.c:705:82: punctuator ;
if_test.c:706:1: keyword extern
if_test.c:706:8: keyword unsigned
if_test.c:706:17: keyword short
if_test.c:706:23: keyword int
if_test.c:706:27: punctuator *
if_test.c:706:28: identifier seed48
if_test.c:706:35: punctuator (
if_test.c:706:36: keyword unsigned
if_test.c:706:45: keyword short
if_test.c:706:51: keyword int
if_test.c:706:55: identifier __seed16v
if_test.c:706:64: punctuator [
if_test.c:706:65: constant 3
if_test.c:706:66: punctuator ]
if_test.c:706:67: punctuator )
if_test.c:707:6: identifier __attribute__
if_test.c:707:20: punctuator (
if_test.c:707:21: punctuator (
if_test.c:707:22: identifier __nothrow__
if_test.c:707:34: punctuator ,
if_test.c:707:36: identifier __leaf__
if_test.c:707:44: punctuator )
if_test.c:707:45: punctuator )
if_test.c:707:47: identifier __attribute__
if_test.c:707:61: punctuator (
if_test.c:707:62: punctuator (
if_test.c:707:63: identifier __nonnull__
if_test.c:707:75: punctuator (
if_test.c:707:76: constant 1
if_test.c:707:77: punctuator )
if_test.c:707:78: punctuator )
if_test.c:707:79: punctuator )
if_test.c:707:80: punctuator ;
if_test.c:708:1: keyword extern
if_test.c:708:8: keyword void
if_test.c:708:13: identifier lcong48
if_test.c:708:21: punctuator (
if_test.c:708:22: keyword unsigned
if_test.c:708:31: keyword short
if_test.c:708:37: keyword int
if_test.c:708:41: identifier __param
if_test.c:708:48: punctuator [
if_test.c:708:49: constant 7
if_test.c:708:50: punctuator ]
if_test.c:708:51: punctuator )
if_test.c:708:53: identifier __attribute__
if_test.c:708:67: punctuator (
if_test.c:708:68: punctuator (
if_test.c:708:69: identifier __nothrow__
if_test.c:708:81: punctuator ,
if_test.c:708:83: identifier __leaf__
if_test.c:708:91: punctuator )
if_test.c:708:92: punctuator )
if_test.c:708:94: identifier __attribute__
if_test.c:708:108: punctuator (
if_test.c:708:109: punctuator (
if_test.c:708:110: identifier __nonnull__
if_test.c:708:122: punctuator (
if_test.c:708:123: constant 1
if_test.c:708:124: punctuator )
if_test.c:708:125: punctuator )
if_test.c:708:126: punctuator )
if_test.c:708:127: punctuator ;
if_test.c:714:1: keyword struct
if_test.c:714:8: identifier drand48_data
if_test.c:715:3: punctuator {
if_test.c:716:5: keyword unsigned
if_test.c:716:14: keyword short
if_test.c:716:20: keyword int
if_test.c:716:24: identifier __x
if_test.c:716:27: punctuator [
if_test.c:716:28: constant 3
if_test.c:716:29: punctuator ]
if_test.c:716:30: punctuator ;
if_test.c:717:5: keyword unsigned
if_test.c:717:14: keyword short
if_test.c:717:20: keyword int
if_test.c:717:24: identifier __old_x
if_test.c:717:31: punctuator [
if_test.c:717:32: constant 3
if_test.c:717:33: punctuator ]
if_test.c:717:34: punctuator ;
if_test.c:718:5: keyword unsigned
if_test.c:718:14: keyword short
if_test.c:718:20: keyword int
if_test.c:718:24: identifier __c
if_test.c:718:27: punctuator ;
if_test.c:719:5: keyword unsigned
if_test.c:719:14: keyword short
if_test.c:719:20: keyword int
if_test.c:719:24: identifier __init
if_test.c:719:30: punctuator ;
if_test.c:720:5: keyword unsigned
if_test.c:720:14: keyword long
if_test.c:720:19: keyword long
if_test.c:720:24: keyword int
if_test.c:720:28: identifier __a
if_test.c:720:31: punctuator ;
if_test.c:721:3: punctuator }
if_test.c:721:4: punctuator ;
if_test.c:724:1: keyword extern
if_test.c:724:8: keyword int
if_test.c:724:12: identifier drand48_r
if_test.c:724:22: punctuator (
if_test.c:724:23: keyword struct
if_test.c:724:30: identifier drand48_data
if_test.c:724:43: punctuator *
if_test.c:724:44: identifier __restrict
if_test.c:724:55: identifier __buffer
if_test.c:724:63: punctuator ,
if_test.c:725:9: keyword double
if_test.c:725:16: punctuator *
if_test.c:725:17: identifier __restrict
if_test.c:725:28: identifier __result
if_test.c:725:36: punctuator )
if_test.c:725:38: identifier __attribute__
if_test.c:725:52: punctuator (
if_test.c:725:53: punctuator (
if_test.c:725:54: identifier __nothrow__
if_test.c:725:66: punctuator ,
if_test.c:725:68: identifier __leaf__
if_test.c:725:76: punctuator )
if_test.c:725:77: punctuator )
if_test.c:725:79: identifier __attribute__
if_test.c:725:93: punctuator (
if_test.c:725:94: punctuator (
if_test.c:725:95: identifier __nonnull__
if_test.c:725:107: punctuator (
if_test.c:725:108: constant 1
if_test.c:725:109: punctuator ,
if_test.c:725:111: constant 2
if_test.c:725:112: punctuator )
if_test.c:725:113: punctuator )
if_test.c:725:114: punctuator )
if_test.c:725:115: punctuator ;
if_test.c:726:1: keyword extern
if_test.c:726:8: keyword int
if_test.c:726:12: identifier erand48_r
if_test.c:726:22: punctuator (
if_test.c:726:23: keyword unsigned
if_test.c:726:32: keyword short
if_test.c:726:38: keyword int
if_test.c:726:42: identifier __xsubi
if_test.c:726:49: punctuator [
if_test.c:726:50: constant 3
if_test.c:726:51: punctuator ]
if_test.c:726:52: punctuator ,
if_test.c:727:9: keyword struct
if_test.c:727:16: identifier drand48_data
if_test.c:727:29: punctuator *
if_test.c:727:30: identifier __restrict
if_test.c:727:41: identifier __buffer
if_test.c:727:49: punctuator ,
if_test.c:728:9: keyword double
if_test.c:728:16: punctuator *
if_test.c:728:17: identifier __restrict
if_test.c:728:28: identifier __result
if_test.c:728:36: punctuator )
if_test.c:728:38: identifier __attribute__
if_test.c:728:52: punctuator (
if_test.c:728:53: punctuator (
if_test.c:728:54: identifier __nothrow__
if_test.c:728:66: punctuator ,
if_test.c:728:68: identifier __leaf__
if_test.c:728:76: punctuator )
if_test.c:728:77: punctuator )
if_test.c:728:79: identifier __attribute__
if_test.c:728:93: punctuator (
if_test.c:728:94: punctuator (
if_test.c:728:95: identifier __nonnull__
if_test.c:728:107: punctuator (
if_test.c:728:108: constant 1
if_test.c:728:109: punctuator ,
if_test.c:728:111: constant 2
if_test.c:728:112: punctuator )
if_test.c:728:113: punctuator )
if_test.c:728:114: punctuator )
if_test.c:728:115: punctuator ;
if_test.c:731:1: keyword extern
if_test.c:731:8: keyword int
if_test.c:731:12: identifier lrand48_r
if_test.c:731:22: punctuator (
if_test.c:731:23: keyword struct
if_test.c:731:30: identifier drand48_data
if_test.c:731:43: punctuator *
if_test.c:731:44: identifier __restrict
if_test.c:731:55: identifier __buffer
if_test.c:731:63: punctuator ,
if_test.c:732:9: keyword long
if_test.c:732:14: keyword int
if_test.c:732:18: punctuator *
if_test.c:732:19: identifier __restrict
if_test.c:732:30: identifier __result
if_test.c:732:38: punctuator )
if_test.c:733:6: identifier __attribute__
if_test.c:733:20: punctuator (
if_test.c:733:21: punctuator (
if_test.c:733:22: identifier __nothrow__
if_test.c:733:34: punctuator ,
if_test.c:733:36: identifier __leaf__
if_test.c:733:44: punctuator )
if_test.c:733:45: punctuator )
if_test.c:733:47: identifier __attribute__
if_test.c:733:61: punctuator (
if_test.c:733:62: punctuator (
if_test.c:733:63: identifier __nonnull__
if_test.c:733:75: punctuator (
if_test.c:733:76: constant 1
if_test.c:733:77: punctuator ,
if_test.c:733:79: constant 2
if_test.c:733:80: punctuator )
if_test.c:733:81: punctuator )
if_test.c:733:82: punctuator )
if_test.c:733:83: punctuator ;
if_test.c:734:1: keyword extern
if_test.c:734:8: keyword int
if_test.c:734:12: identifier nrand48_r
if_test.c:734:22: punctuator (
if_test.c:734:23: keyword unsigned
if_test.c:734:32: keyword short
if_test.c:734:38: keyword int
if_test.c:734:42: identifier __xsubi
if_test.c:734:49: punctuator [
if_test.c:734:50: constant 3
if_test.c:734:51: punctuator ]
if_test.c:734:52: punctuator ,
if_test.c:735:9: keyword struct
if_test.c:735:16: identifier drand48_data
if_test.c:735:29: punctuator *
if_test.c:735:30: identifier __restrict
if_test.c:735:41: identifier __buffer
if_test.c:735:49: punctuator ,
if_test.c:736:9: keyword long
if_test.c:736:14: keyword int
if_test.c:736:18: punctuator *
if_test.c:736:19: identifier __restrict
if_test.c:736:30: identifier __result
if_test.c:736:38: punctuator )
if_test.c:737:6: identifier __attribute__
if_test.c:737:20: punctuator (
if_test.c:737:21: punctuator (
if_test.c:737:22: identifier __nothrow__
if_test.c:737:34: punctuator ,
if_test.c:737:36: identifier __leaf__
if_test.c:737:44: punctuator )
if_test.c:737:45: punctuator )
if_test.c:737:47: identifier __attribute__
if_test.c:737:61: punctuator (
if_test.c:737:62: punctuator (
if_test.c:737:63: identifier __nonnull__
if_test.c:737:75: punctuator (
if_test.c:737:76: constant 1
if_test.c:737:77: punctuator ,
if_test.c:737:79: constant 2
if_test.c:737:80: punctuator )
if_test.c:737:81: punctuator )
if_test.c:737:82: punctuator )
if_test.c:737:83: punctuator ;
if_test.c:740:1: keyword extern
if_test.c:740:8: keyword int
if_test.c:740:12: identifier mrand48_r
if_test.c:740:22: punctuator (
if_test.c:740:23: keyword struct
if_test.c:740:30: identifier drand48_data
if_test.c:740:43: punctuator *
if_test.c:740:44: identifier __restrict
if_test.c:740:55: identifier __buffer
if_test.c:740:63: punctuator ,
if_test.c:741:9: keyword long
if_test.c:741:14: keyword int
if_test.c:741:18: punctuator *
if_test.c:741:19: identifier __restrict
if_test.c:741:30: identifier __result
if_test.c:741:38: punctuator )
if_test.c:742:6: identifier __attribute__
if_test.c:742:20: punctuator (
if_test.c:742:21: punctuator (
if_test.c:742:22: identifier __nothrow__
if_test.c:742:34: punctuator ,
if_test.c:742:36: identifier __leaf__
if_test.c:742:44: punctuator )
if_test.c:742:45: punctuator )
if_test.c:742:47: identifier __attribute__
if_test.c:742:61: punctuator (
if_test.c:742:62: punctuator (
if_test.c:742:63: identifier __nonnull__
if_test.c:742:75: punctuator (
if_test.c:742:76: constant 1
if_test.c:742:77: punctuator ,
if_test.c:742:79: constant 2
if_test.c:742:80: punctuator )
if_test.c:742:81: punctuator )
if_test.c:742:82: punctuator )
if_test.c:742:83: punctuator ;
if_test.c:743:1: keyword extern
if_test.c:743:8: keyword int
if_test.c:743:12: identifier jrand48_r
if_test.c:743:22: punctuator (
if_test.c:743:23: keyword unsigned
if_test.c:743:32: keyword short
if_test.c:743:38: keyword int
if_test.c:743:42: identifier __xsubi
if_test.c:743:49: punctuator [
if_test.c:743:50: constant 3
if_test.c:743:51: punctuator ]
if_test.c:743:52: punctuator ,
if_test.c:744:9: keyword struct
if_test.c:744:16: identifier drand48_data
if_test.c:744:29: punctuator *
if_test.c:744:30: identifier __restrict
if_test.c:744:41: identifier __buffer
if_test.c:744:49: punctuator ,
if_test.c:745:9: keyword long
if_test.c:745:14: keyword int
if_test.c:745:18: punctuator *
if_test.c:745:19: identifier __restrict
if_test.c:745:30: identifier __result
if_test.c:745:38: punctuator )
if_test.c:746:6: identifier __attribute__
if_test.c:746:20: punctuator (
if_test.c:746:21: punctuator (
if_test.c:746:22: identifier __nothrow__
if_test.c:746:34: punctuator ,
if_test.c:746:36: identifier __leaf__
if_test.c:746:44: punctuator )
if_test.c:746:45: punctuator )
if_test.c:746:47: identifier __attribute__
if_test.c:746:61: punctuator (
if_test.c:746:62: punctuator (
if_test.c:746:63: identifier __nonnull__
if_test.c:746:75: punctuator (
if_test.c:746:76: constant 1
if_test.c:746:77: punctuator ,
if_test.c:746:79: constant 2
if_test.c:746:80: punctuator )
if_test.c:746:81: punctuator )
if_test.c:746:82: punctuator )
if_test.c:746:83: punctuator ;
if_test.c:749:1: keyword extern
if_test.c:749:8: keyword int
if_test.c:749:12: identifier srand48_r
if_test.c:749:22: punctuator (
if_test.c:749:23: keyword long
if_test.c:749:28: keyword int
if_test.c:749:32: identifier __seedval
if_test.c:749:41: punctuator ,
if_test.c:749:43: keyword struct
if_test.c:749:50: identifier drand48_data
if_test.c:749:63: punctuator *
if_test.c:749:64: identifier __buffer
if_test.c:749:72: punctuator )
if_test.c:750:6: identifier __attribute__
if_test.c:750:20: punctuator (
if_test.c:750:21: punctuator (
if_test.c:750:22: identifier __nothrow__
if_test.c:750:34: punctuator ,
if_test.c:750:36: identifier __leaf__
if_test.c:750:44: punctuator )
if_test.c:750:45: punctuator )
if_test.c:750:47: identifier __attribute__
if_test.c:750:61: punctuator (
if_test.c:750:62: punctuator (
if_test.c:750:63: identifier __nonnull__
if_test.c:750:75: punctuator (
if_test.c:750:76: constant 2
if_test.c:750:77: punctuator )
if_test.c:750:78: punctuator )
if_test.c:750:79: punctuator )
if_test.c:750:80: punctuator ;
if_test.c:752:1: keyword extern
if_test.c:752:8: keyword int
if_test.c:752:12: identifier seed48_r
if_test.c:752:21: punctuator (
if_test.c:752:22: keyword unsigned
if_test.c:752:31: keyword short
if_test.c:752:37: keyword int
if_test.c:752:41: identifier __seed16v
if_test.c:752:50: punctuator [
if_test.c:752:51: constant 3
if_test.c:752:52: punctuator ]
if_test.c:752:53: punctuator ,
if_test.c:753:8: keyword struct
if_test.c:753:15: identifier drand48_data
if_test.c:753:28: punctuator *
if_test.c:753:29: identifier __buffer
if_test.c:753:37: punctuator )
if_test.c:753:39: identifier __attribute__
if_test.c:753:53: punctuator (
if_test.c:753:54: punctuator (
if_test.c:753:55: identifier __nothrow__
if_test.c:753:67: punctuator ,
if_test.c:753:69: identifier __leaf__
if_test.c:753:77: punctuator )
if_test.c:753:78: punctuator )
if_test.c:753:80: identifier __attribute__
if_test.c:753:94: punctuator (
if_test.c:753:95: punctuator (
if_test.c:753:96: identifier __nonnull__
if_test.c:753:108: punctuator (
if_test.c:753:109: constant 1
if_test.c:753:110: punctuator ,
if_test.c:753:112: constant 2
if_test.c:753:113: punctuator )
if_test.c:753:114: punctuator )
if_test.c:753:115: punctuator )
if_test.c:753:116: punctuator ;
if_test.c:755:1: keyword extern
if_test.c:755:8: keyword int
if_test.c:755:12: identifier lcong48_r
if_test.c:755:22: punctuator (
if_test.c:755:23: keyword unsigned
if_test.c:755:32: keyword short
if_test.c:755:38: keyword int
if_test.c:755:42: identifier __param
if_test.c:755:49: punctuator [
if_test.c:755:50: constant 7
if_test.c:755:51: punctuator ]
if_test.c:755:52: punctuator ,
if_test.c:756:9: keyword struct
if_test.c:756:16: identifier drand48_data
if_test.c:756:29: punctuator *
if_test.c:756:30: identifier __buffer
if_test.c:756:38: punctuator )
if_test.c:757:6: identifier __attribute__
if_test.c:757:20: punctuator (
if_test.c:757:21: punctuator (
if_test.c:757:22: identifier __nothrow__
if_test.c:757:34: punctuator ,
if_test.c:757:36: identifier __leaf__
if_test.c:757:44: punctuator )
if_test.c:757:45: punctuator )
if_test.c:757:47: identifier __attribute__
if_test.c:757:61: punctuator (
if_test.c:757:62: punctuator (
if_test.c:757:63: identifier __nonnull__
if_test.c:757:75: punctuator (
if_test.c:757:76: constant 1
if_test.c:757:77: punctuator ,
if_test.c:757:79: constant 2
if_test.c:757:80: punctuator )
if_test.c:757:81: punctuator )
if_test.c:757:82: punctuator )
if_test.c:757:83: punctuator ;
if_test.c:767:1: keyword extern
if_test.c:767:8: keyword void
if_test.c:767:13: punctuator *
if_test.c:767:14: identifier malloc
if_test.c:767:21: punctuator (
if_test.c:767:22: identifier size_t
if_test.c:767:29: identifier __size
if_test.c:767:35: punctuator )
if_test.c:767:37: identifier __attribute__
if_test.c:767:51: punctuator (
if_test.c:767:52: punctuator (
if_test.c:767:53: identifier __nothrow__
if_test.c:767:65: punctuator ,
if_test.c:767:67: identifier __leaf__
if_test.c:767:75: punctuator )
if_test.c:767:76: punctuator )
if_test.c:767:78: identifier __attribute__
if_test.c:767:92: punctuator (
if_test.c:767:93: punctuator (
if_test.c:767:94: identifier __malloc__
if_test.c:767:104: punctuator )
if_test.c:767:105: punctuator )
if_test.c:767:107: punctuator ;
if_test.c:769:1: keyword extern
if_test.c:769:8: keyword void
if_test.c:769:13: punctuator *
if_test.c:769:14: identifier calloc
if_test.c:769:21: punctuator (
if_test.c:769:22: identifier size_t
if_test.c:769:29: identifier __nmemb
if_test.c:769:36: punctuator ,
if_test.c:769:38: identifier size_t
if_test.c:769:45: identifier __size
if_test.c:769:51: punctuator )
if_test.c:770:6: identifier __attribute__
if_test.c:770:20: punctuator (
if_test.c:770:21: punctuator (
if_test.c:770:22: identifier __nothrow__
if_test.c:770:34: punctuator ,
if_test.c:770:36: identifier __leaf__
if_test.c:770:44: punctuator )
if_test.c:770:45: punctuator )
if_test.c:770:47: identifier __attribute__
if_test.c:770:61: punctuator (
if_test.c:770:62: punctuator (
if_test.c:770:63: identifier __malloc__
if_test.c:770:73: punctuator )
if_test.c:770:74: punctuator )
if_test.c:770:76: punctuator ;
if_test.c:781:1: keyword extern
if_test.c:781:8: keyword void
if_test.c:781:13: punctuator *
if_test.c:781:14: identifier realloc
if_test.c:781:22: punctuator (
if_test.c:781:23: keyword void
if_test.c:781:28: punctuator *
if_test.c:781:29: identifier __ptr
if_test.c:781:34: punctuator ,
if_test.c:781:36: identifier size_t
if_test.c:781:43: identifier __size
if_test.c:781:49: punctuator )
if_test.c:782:6: identifier __attribute__
if_test.c:782:20: punctuator (
if_test.c:782:21: punctuator (
if_test.c:782:22: identifier __nothrow__
if_test.c:782:34: punctuator ,
if_test.c:782:36: identifier __leaf__
if_test.c:782:44: punctuator )
if_test.c:782:45: punctuator )
if_test.c:782:47: identifier __attribute__
if_test.c:782:61: punctuator (
if_test.c:782:62: punctuator (
if_test.c:782:63: identifier __warn_unused_result__
if_test.c:782:85: punctuator )
if_test.c:782:86: punctuator )
if_test.c:782:87: punctuator ;
if_test.c:784:1: keyword extern
if_test.c:784:8: keyword void
if_test.c:784:13: identifier free
if_test.c:784:18: punctuator (
if_test.c:784:19: keyword void
if_test.c:784:24: punctuator *
if_test.c:784:25: identifier __ptr
if_test.c:784:30: punctuator )
if_test.c:784:32: identifier __attribute__
if_test.c:784:46: punctuator (
if_test.c:784:47: punctuator (
if_test.c:784:48: identifier __nothrow__
if_test.c:784:60: punctuator ,
if_test.c:784:62: identifier __leaf__
if_test.c:784:70: punctuator )
if_test.c:784:71: punctuator )
if_test.c:784:72: punctuator ;
if_test.c:789:1: keyword extern
if_test.c:789:8: keyword void
if_test.c:789:13: identifier cfree
if_test.c:789:19: punctuator (
if_test.c:789:20: keyword void
if_test.c:789:25: punctuator *
if_test.c:789:26: identifier __ptr
if_test.c:789:31: punctuator )
if_test.c:789:33: identifier __attribute__
if_test.c:789:47: punctuator (
if_test.c:789:48: punctuator (
if_test.c:789:49: identifier __nothrow__
if_test.c:789:61: punctuator ,
if_test.c:789:63: identifier __leaf__
if_test.c:789:71: punctuator )
if_test.c:789:72: punctuator )
if_test.c:789:73: punctuator ;
if_test.c:800:1: keyword extern
if_test.c:800:8: keyword void
if_test.c:800:13: punctuator *
if_test.c:800:14: identifier alloca
if_test.c:800:21: punctuator (
if_test.c:800:22: identifier size_t
if_test.c:800:29: identifier __size
if_test.c:800:35: punctuator )
if_test.c:800:37: identifier __attribute__
if_test.c:800:51: punctuator (
if_test.c:800:52: punctuator (
if_test.c:800:53: identifier __nothrow__
if_test.c:800:65: punctuator ,
if_test.c:800:67: identifier __leaf__
if_test.c:800:75: punctuator )
if_test.c:800:76: punctuator )
if_test.c:800:77: punctuator ;
if_test.c:812:1: keyword extern
if_test.c:812:8: keyword void
if_test.c:812:13: punctuator *
if_test.c:812:14: identifier valloc
if_test.c:812:21: punctuator (
if_test.c:812:22: identifier size_t
if_test.c:812:29: identifier __size
if_test.c:812:35: punctuator )
if_test.c:812:37: identifier __attribute__
if_test.c:812:51: punctuator (
if_test.c:812:52: punctuator (
if_test.c:812:53: identifier __nothrow__
if_test.c:812:65: punctuator ,
if_test.c:812:67: identifier __leaf__
if_test.c:812:75: punctuator )
if_test.c:812:76: punctuator )
if_test.c:812:78: identifier __attribute__
if_test.c:812:92: punctuator (
if_test.c:812:93: punctuator (
if_test.c:812:94: identifier __malloc__
if_test.c:812:104: punctuator )
if_test.c:812:105: punctuator )
if_test.c:812:107: punctuator ;
if_test.c:817:1: keyword extern
if_test.c:817:8: keyword int
if_test.c:817:12: identifier posix_memalign
if_test.c:817:27: punctuator (
if_test.c:817:28: keyword void
if_test.c:817:33: punctuator *
if_test.c:817:34: punctuator *
if_test.c:817:35: identifier __memptr
if_test.c:817:43: punctuator ,
if_test.c:817:45: identifier size_t
if_test.c:817:52: identifier __alignment
if_test.c:817:63: punctuator ,
if_test.c:817:65: identifier size_t
if_test.c:817:72: identifier __size
if_test.c:817:78: punctuator )
if_test.c:818:6: identifier __attribute__
if_test.c:818:20: punctuator (
if_test.c:818:21: punctuator (
if_test.c:818:22: identifier __nothrow__
if_test.c:818:34: punctuator ,
if_test.c:818:36: identifier __leaf__
if_test.c:818:44: punctuator )
if_test.c:818:45: punctuator )
if_test.c:818:47: identifier __attribute__
if_test.c:818:61: punctuator (
if_test.c:818:62: punctuator (
if_test.c:818:63: identifier __nonnull__
if_test.c:818:75: punctuator (
if_test.c:818:76: constant 1
if_test.c:818:77: punctuator )
if_test.c:818:78: punctuator )
if_test.c:818:79: punctuator )
if_test.c:818:81: punctuator ;
if_test.c:823:1: keyword extern
if_test.c:823:8: keyword void
if_test.c:823:13: identifier abort
if_test.c:823:19: punctuator (
if_test.c:823:20: keyword void
if_test.c:823:24: punctuator )
if_test.c:823:26: identifier __attribute__
if_test.c:823:40: punctuator (
if_test.c:823:41: punctuator (
if_test.c:823:42: identifier __nothrow__
if_test.c:823:54: punctuator ,
if_test.c:823:56: identifier __leaf__
if_test.c:823:64: punctuator )
if_test.c:823:65: punctuator )
if_test.c:823:67: identifier __attribute__
if_test.c:823:81: punctuator (
if_test.c:823:82: punctuator (
if_test.c:823:83: identifier __noreturn__
if_test.c:823:95: punctuator )
if_test.c:823:96: punctuator )
if_test.c:823:97: punctuator ;
if_test.c:827:1: keyword extern
if_test.c:827:8: keyword int
if_test.c:827:12: identifier atexit
if_test.c:827:19: punctuator (
if_test.c:827:20: keyword void
if_test.c:827:25: punctuator (
if_test.c:827:26: punctuator *
if_test.c:827:27: identifier __func
if_test.c:827:33: punctuator )
if_test.c:827:35: punctuator (
if_test.c:827:36: keyword void
if_test.c:827:40: punctuator )
if_test.c:827:41: punctuator )
if_test.c:827:43: identifier __attribute__
if_test.c:827:57: punctuator (
if_test.c:827:58: punctuator (
if_test.c:827:59: identifier __nothrow__
if_test.c:827:71: punctuator ,
if_test.c:827:73: identifier __leaf__
if_test.c:827:81: punctuator )
if_test.c:827:82: punctuator )
if_test.c:827:84: identifier __attribute__
if_test.c:827:98: punctuator (
if_test.c:827:99: punctuator (
if_test.c:827:100: identifier __nonnull__
if_test.c:827:112: punctuator (
if_test.c:827:113: constant 1
if_test.c:827:114: punctuator )
if_test.c:827:115: punctuator )
if_test.c:827:116: punctuator )
if_test.c:827:117: punctuator ;
if_test.c:833:1: keyword extern
if_test.c:833:8: keyword int
if_test.c:833:12: identifier on_exit
if_test.c:833:20: punctuator (
if_test.c:833:21: keyword void
if_test.c:833:26: punctuator (
if_test.c:833:27: punctuator *
if_test.c:833:28: identifier __func
if_test.c:833:34: punctuator )
if_test.c:833:36: punctuator (
if_test.c:833:37: keyword int
if_test.c:833:41: identifier __status
if_test.c:833:49: punctuator ,
if_test.c:833:51: keyword void
if_test.c:833:56: punctuator *
if_test.c:833:57: identifier __arg
if_test.c:833:62: punctuator )
if_test.c:833:63: punctuator ,
if_test.c:833:65: keyword void
if_test.c:833:70: punctuator *
if_test.c:833:71: identifier __arg
if_test.c:833:76: punctuator )
if_test.c:834:6: identifier __attribute__
if_test.c:834:20: punctuator (
if_test.c:834:21: punctuator (
if_test.c:834:22: identifier __nothrow__
if_test.c:834:34: punctuator ,
if_test.c:834:36: identifier __leaf__
if_test.c:834:44: punctuator )
if_test.c:834:45: punctuator )
if_test.c:834:47: identifier __attribute__
if_test.c:834:61: punctuator (
if_test.c:834:62: punctuator (
if_test.c:834:63: identifier __nonnull__
if_test.c:834:75: punctuator (
if_test.c:834:76: constant 1
if_test.c:834:77: punctuator )
if_test.c:834:78: punctuator )
if_test.c:834:79: punctuator )
if_test.c:834:80: punctuator ;
if_test.c:841:1: keyword extern
if_test.c:841:8: keyword void
if_test.c:841:13: identifier exit
if_test.c:841:18: punctuator (
if_test.c:841:19: keyword int
if_test.c:841:23: identifier __status
if_test.c:841:31: punctuator )
if_test.c:841:33: identifier __attribute__
if_test.c:841:47: punctuator (
if_test.c:841:48: punctuator (
if_test.c:841:49: identifier __nothrow__
if_test.c:841:61: punctuator ,
if_test.c:841:63: identifier __leaf__
if_test.c:841:71: punctuator )
if_test.c:841:72: punctuator )
if_test.c:841:74: identifier __attribute__
if_test.c:841:88: punctuator (
if_test.c:841:89: punctuator (
if_test.c:841:90: identifier __noreturn__
if_test.c:841:102: punctuator )
if_test.c:841:103: punctuator )
if_test.c:841:104: punctuator ;
if_test.c:848:1: keyword extern
if_test.c:848:8: keyword void
if_test.c:848:13: identifier _Exit
if_test.c:848:19: punctuator (
if_test.c:848:20: keyword int
if_test.c:848:24: identifier __status
if_test.c:848:32: punctuator )
if_test.c:848:34: identifier __attribute__
if_test.c:848:48: punctuator (
if_test.c:848:49: punctuator (
if_test.c:848:50: identifier __nothrow__
if_test.c:848:62: punctuator ,
if_test.c:848:64: identifier __leaf__
if_test.c:848:72: punctuator )
if_test.c:848:73: punctuator )
if_test.c:848:75: identifier __attribute__
if_test.c:848:89: punctuator (
if_test.c:848:90: punctuator (
if_test.c:848:91: identifier __noreturn__
if_test.c:848:103: punctuator )
if_test.c:848:104: punctuator )
if_test.c:848:105: punctuator ;
if_test.c:855:1: keyword extern
if_test.c:855:8: keyword char
if_test.c:855:13: punctuator *
if_test.c:855:14: identifier getenv
if_test.c:855:21: punctuator (
if_test.c:855:22: identifier __const
if_test.c:855:30: keyword char
if_test.c:855:35: punctuator *
if_test.c:855:36: identifier __name
if_test.c:855:42: punctuator )
if_test.c:855:44: identifier __attribute__
if_test.c:855:58: punctuator (
if_test.c:855:59: punctuator (
if_test.c:855:60: identifier __nothrow__
if_test.c:855:72: punctuator ,
if_test.c:855:74: identifier __leaf__
if_test.c:855:82: punctuator )
if_test.c:855:83: punctuator )
if_test.c:855:85: identifier __attribute__
if_test.c:855:99: punctuator (
if_test.c:855:100: punctuator (
if_test.c:855:101: identifier __nonnull__
if_test.c:855:113: punctuator (
if_test.c:855:114: constant 1
if_test.c:855:115: punctuator )
if_test.c:855:116: punctuator )
if_test.c:855:117: punctuator )
if_test.c:855:119: punctuator ;
if_test.c:860:1: keyword extern
if_test.c:860:8: keyword char
if_test.c:860:13: punctuator *
if_test.c:860:14: identifier __secure_getenv
if_test.c:860:30: punctuator (
if_test.c:860:31: identifier __const
if_test.c:860:39: keyword char
if_test.c:860:44: punctuator *
if_test.c:860:45: identifier __name
if_test.c:860:51: punctuator )
if_test.c:861:6: identifier __attribute__
if_test.c:861:20: punctuator (
if_test.c:861:21: punctuator (
if_test.c:861:22: identifier __nothrow__
if_test.c:861:34: punctuator ,
if_test.c:861:36: identifier __leaf__
if_test.c:861:44: punctuator )
if_test.c:861:45: punctuator )
if_test.c:861:47: identifier __attribute__
if_test.c:861:61: punctuator (
if_test.c:861:62: punctuator (
if_test.c:861:63: identifier __nonnull__
if_test.c:861:75: punctuator (
if_test.c:861:76: constant 1
if_test.c:861:77: punctuator )
if_test.c:861:78: punctuator )
if_test.c:861:79: punctuator )
if_test.c:861:81: punctuator ;
if_test.c:867:1: keyword extern
if_test.c:867:8: keyword int
if_test.c:867:12: identifier putenv
if_test.c:867:19: punctuator (
if_test.c:867:20: keyword char
if_test.c:867:25: punctuator *
if_test.c:867:26: identifier __string
if_test.c:867:34: punctuator )
if_test.c:867:36: identifier __attribute__
if_test.c:867:50: punctuator (
if_test.c:867:51: punctuator (
if_test.c:867:52: identifier __nothrow__
if_test.c:867:64: punctuator ,
if_test.c:867:66: identifier __leaf__
if_test.c:867:74: punctuator )
if_test.c:867:75: punctuator )
if_test.c:867:77: identifier __attribute__
if_test.c:867:91: punctuator (
if_test.c:867:92: punctuator (
if_test.c:867:93: identifier __nonnull__
if_test.c:867:105: punctuator (
if_test.c:867:106: constant 1
if_test.c:867:107: punctuator )
if_test.c:867:108: punctuator )
if_test.c:867:109: punctuator )
if_test.c:867:110: punctuator ;
if_test.c:873:1: keyword extern
if_test.c:873:8: keyword int
if_test.c:873:12: identifier setenv
if_test.c:873:19: punctuator (
if_test.c:873:20: identifier __const
if_test.c:873:28: keyword char
if_test.c:873:33: punctuator *
if_test.c:873:34: identifier __name
if_test.c:873:40: punctuator ,
if_test.c:873:42: identifier __const
if_test.c:873:50: keyword char
if_test.c:873:55: punctuator *
if_test.c:873:56: identifier __value
if_test.c:873:63: punctuator ,
if_test.c:873:65: keyword int
if_test.c:873:69: identifier __replace
if_test.c:873:78: punctuator )
if_test.c:874:6: identifier __attribute__
if_test.c:874:20: punctuator (
if_test.c:874:21: punctuator (
if_test.c:874:22: identifier __nothrow__
if_test.c:874:34: punctuator ,
if_test.c:874:36: identifier __leaf__
if_test.c:874:44: punctuator )
if_test.c:874:45: punctuator )
if_test.c:874:47: identifier __attribute__
if_test.c:874:61: punctuator (
if_test.c:874:62: punctuator (
if_test.c:874:63: identifier __nonnull__
if_test.c:874:75: punctuator (
if_test.c:874:76: constant 2
if_test.c:874:77: punctuator )
if_test.c:874:78: punctuator )
if_test.c:874:79: punctuator )
if_test.c:874:80: punctuator ;
if_test.c:877:1: keyword extern
if_test.c:877:8: keyword int
if_test.c:877:12: identifier unsetenv
if_test.c:877:21: punctuator (
if_test.c:877:22: identifier __const
if_test.c:877:30: keyword char
if_test.c:877:35: punctuator *
if_test.c:877:36: identifier __name
if_test.c:877:42: punctuator )
if_test.c:877:44: identifier __attribute__
if_test.c:877:58: punctuator (
if_test.c:877:59: punctuator (
if_test.c:877:60: identifier __nothrow__
if_test.c:877:72: punctuator ,
if_test.c:877:74: identifier __leaf__
if_test.c:877:82: punctuator )
if_test.c:877:83: punctuator )
if_test.c:877:85: identifier __attribute__
if_test.c:877:99: punctuator (
if_test.c:877:100: punctuator (
if_test.c:877:101: identifier __nonnull__
if_test.c:877:113: punctuator (
if_test.c:877:114: constant 1
if_test.c:877:115: punctuator )
if_test.c:877:116: punctuator )
if_test.c:877:117: punctuator )
if_test.c:877:118: punctuator ;
if_test.c:884:1: keyword extern
if_test.c:884:8: keyword int
if_test.c:884:12: identifier clearenv
if_test.c:884:21: punctuator (
if_test.c:884:22: keyword void
if_test.c:884:26: punctuator )
if_test.c:884:28: identifier __attribute__
if_test.c:884:42: punctuator (
if_test.c:884:43: punctuator (
if_test.c:884:44: identifier __nothrow__
if_test.c:884:56: punctuator ,
if_test.c:884:58: identifier __leaf__
if_test.c:884:66: punctuator )
if_test.c:884:67: punctuator )
if_test.c:884:68: punctuator ;
if_test.c:885:1: keyword extern
if_test.c:885:8: keyword char
if_test.c:885:13: punctuator *
if_test.c:885:14: identifier mktemp
if_test.c:885:21: punctuator (
if_test.c:885:22: keyword char
if_test.c:885:27: punctuator *
if_test.c:885:28: identifier __template
if_test.c:885:38: punctuator )
if_test.c:885:40: identifier __attribute__
if_test.c:885:54: punctuator (
if_test.c:885:55: punctuator (
if_test.c:885:56: identifier __nothrow__
if_test.c:885:68: punctuator ,
if_test.c:885:70: identifier __leaf__
if_test.c:885:78: punctuator )
if_test.c:885:79: punctuator )
if_test.c:885:81: identifier __attribute__
if_test.c:885:95: punctuator (
if_test.c:885:96: punctuator (
if_test.c:885:97: identifier __nonnull__
if_test.c:885:109: punctuator (
if_test.c:885:110: constant 1
if_test.c:885:111: punctuator )
if_test.c:885:112: punctuator )
if_test.c:885:113: punctuator )
if_test.c:885:115: punctuator ;
if_test.c:886:1: keyword extern
if_test.c:886:8: keyword int
if_test.c:886:12: identifier mkstemp
if_test.c:886:20: punctuator (
if_test.c:886:21: keyword char
if_test.c:886:26: punctuator *
if_test.c:886:27: identifier __template
if_test.c:886:37: punctuator )
if_test.c:886:39: identifier __attribute__
if_test.c:886:53: punctuator (
if_test.c:886:54: punctuator (
if_test.c:886:55: identifier __nonnull__
if_test.c:886:67: punctuator (
if_test.c:886:68: constant 1
if_test.c:886:69: punctuator )
if_test.c:886:70: punctuator )
if_test.c:886:71: punctuator )
if_test.c:886:73: punctuator ;
if_test.c:887:1: keyword extern
if_test.c:887:8: keyword int
if_test.c:887:12: identifier mkstemps
if_test.c:887:21: punctuator (
if_test.c:887:22: keyword char
if_test.c:887:27: punctuator *
if_test.c:887:28: identifier __template
if_test.c:887:38: punctuator ,
if_test.c:887:40: keyword int
if_test.c:887:44: identifier __suffixlen
if_test.c:887:55: punctuator )
if_test.c:887:57: identifier __attribute__
if_test.c:887:71: punctuator (
if_test.c:887:72: punctuator (
if_test.c:887:73: identifier __nonnull__
if_test.c:887:85: punctuator (
if_test.c:887:86: constant 1
if_test.c:887:87: punctuator )
if_test.c:887:88: punctuator )
if_test.c:887:89: punctuator )
if_test.c:887:91: punctuator ;
if_test.c:888:1: keyword extern
if_test.c:888:8: keyword char
if_test.c:888:13: punctuator *
if_test.c:888:14: identifier mkdtemp
if_test.c:888:22: punctuator (
if_test.c:888:23: keyword char
if_test.c:888:28: punctuator *
if_test.c:888:29: identifier __template
if_test.c:888:39: punctuator )
if_test.c:888:41: identifier __attribute__
if_test.c:888:55: punctuator (
if_test.c:888:56: punctuator (
if_test.c:888:57: identifier __nothrow__
if_test.c:888:69: punctuator ,
if_test.c:888:71: identifier __leaf__
if_test.c:888:79: punctuator )
if_test.c:888:80: punctuator )
if_test.c:888:82: identifier __attribute__
if_test.c:888:96: punctuator (
if_test.c:888:97: punctuator (
if_test.c:888:98: identifier __nonnull__
if_test.c:888:110: punctuator (
if_test.c:888:111: constant 1
if_test.c:888:112: punctuator )
if_test.c:888:113: punctuator )
if_test.c:888:114: punctuator )
if_test.c:888:116: punctuator ;
if_test.c:894:1: keyword extern
if_test.c:894:8: keyword int
if_test.c:894:12: identifier system
if_test.c:894:19: punctuator (
if_test.c:894:20: identifier __const
if_test.c:894:28: keyword char
if_test.c:894:33: punctuator *
if_test.c:894:34: identifier __command
if_test.c:894:43: punctuator )
if_test.c:894:45: punctuator ;
if_test.c:896:1: keyword extern
if_test.c:896:8: keyword char
if_test.c:896:13: punctuator *
if_test.c:896:14: identifier realpath
if_test.c:896:23: punctuator (
if_test.c:896:24: identifier __const
if_test.c:896:32: keyword char
if_test.c:896:37: punctuator *
if_test.c:896:38: identifier __restrict
if_test.c:896:49: identifier __name
if_test.c:896:55: punctuator ,
if_test.c:897:10: keyword char
if_test.c:897:15: punctuator *
if_test.c:897:16: identifier __restrict
if_test.c:897:27: identifier __resolved
if_test.c:897:37: punctuator )
if_test.c:897:39: identifier __attribute__
if_test.c:897:53: punctuator (
if_test.c:897:54: punctuator (
if_test.c:897:55: identifier __nothrow__
if_test.c:897:67: punctuator ,
if_test.c:897:69: identifier __leaf__
if_test.c:897:77: punctuator )
if_test.c:897:78: punctuator )
if_test.c:897:80: punctuator ;
if_test.c:904:1: keyword typedef
if_test.c:904:9: keyword int
if_test.c:904:13: punctuator (
if_test.c:904:14: punctuator *
if_test.c:904:15: identifier __compar_fn_t
if_test.c:904:28: punctuator )
if_test.c:904:30: punctuator (
if_test.c:904:31: identifier __const
if_test.c:904:39: keyword void
if_test.c:904:44: punctuator *
if_test.c:904:45: punctuator ,
if_test.c:904:47: identifier __const
if_test.c:904:55: keyword void
if_test.c:904:60: punctuator *
if_test.c:904:61: punctuator )
if_test.c:904:62: punctuator ;
if_test.c:908:1: keyword extern
if_test.c:908:8: keyword void
if_test.c:908:13: punctuator *
if_test.c:908:14: identifier bsearch
if_test.c:908:22: punctuator (
if_test.c:908:23: identifier __const
if_test.c:908:31: keyword void
if_test.c:908:36: punctuator *
if_test.c:908:37: identifier __key
if_test.c:908:42: punctuator ,
if_test.c:908:44: identifier __const
if_test.c:908:52: keyword void
if_test.c:908:57: punctuator *
if_test.c:908:58: identifier __base
if_test.c:908:64: punctuator ,
if_test.c:909:9: identifier size_t
if_test.c:909:16: identifier __nmemb
if_test.c:909:23: punctuator ,
if_test.c:909:25: identifier size_t
if_test.c:909:32: identifier __size
if_test.c:909:38: punctuator ,
if_test.c:909:40: identifier __compar_fn_t
if_test.c:909:54: identifier __compar
if_test.c:909:62: punctuator )
if_test.c:910:6: identifier __attribute__
if_test.c:910:20: punctuator (
if_test.c:910:21: punctuator (
if_test.c:910:22: identifier __nonnull__
if_test.c:910:34: punctuator (
if_test.c:910:35: constant 1
if_test.c:910:36: punctuator ,
if_test.c:910:38: constant 2
if_test.c:910:39: punctuator ,
if_test.c:910:41: constant 5
if_test.c:910:42: punctuator )
if_test.c:910:43: punctuator )
if_test.c:910:44: punctuator )
if_test.c:910:46: punctuator ;
if_test.c:914:1: keyword extern
if_test.c:914:8: keyword void
if_test.c:914:13: identifier qsort
if_test.c:914:19: punctuator (
if_test.c:914:20: keyword void
if_test.c:914:25: punctuator *
if_test.c:914:26: identifier __base
if_test.c:914:32: punctuator ,
if_test.c:914:34: identifier size_t
if_test.c:914:41: identifier __nmemb
if_test.c:914:48: punctuator ,
if_test.c:914:50: identifier size_t
if_test.c:914:57: identifier __size
if_test.c:914:63: punctuator ,
if_test.c:915:6: identifier __compar_fn_t
if_test.c:915:20: identifier __compar
if_test.c:915:28: punctuator )
if_test.c:915:30: identifier __attribute__
if_test.c:915:44: punctuator (
if_test.c:915:45: punctuator (
if_test.c:915:46: identifier __nonnull__
if_test.c:915:58: punctuator (
if_test.c:915:59: constant 1
if_test.c:915:60: punctuator ,
if_test.c:915:62: constant 4
if_test.c:915:63: punctuator )
if_test.c:915:64: punctuator )
if_test.c:915:65: punctuator )
if_test.c:915:66: punctuator ;
if_test.c:916:1: keyword extern
if_test.c:916:8: keyword int
if_test.c:916:12: identifier abs
if_test.c:916:16: punctuator (
if_test.c:916:17: keyword int
if_test.c:916:21: identifier __x
if_test.c:916:24: punctuator )
if_test.c:916:26: identifier __attribute__
if_test.c:916:40: punctuator (
if_test.c:916:41: punctuator (
if_test.c:916:42: identifier __nothrow__
if_test.c:916:54: punctuator ,
if_test.c:916:56: identifier __leaf__
if_test.c:916:64: punctuator )
if_test.c:916:65: punctuator )
if_test.c:916:67: identifier __attribute__
if_test.c:916:81: punctuator (
if_test.c:916:82: punctuator (
if_test.c:916:83: identifier __const__
if_test.c:916:92: punctuator )
if_test.c:916:93: punctuator )
if_test.c:916:95: punctuator ;
if_test.c:917:1: keyword extern
if_test.c:917:8: keyword long
if_test.c:917:13: keyword int
if_test.c:917:17: identifier labs
if_test.c:917:22: punctuator (
if_test.c:917:23: keyword long
if_test.c:917:28: keyword int
if_test.c:917:32: identifier __x
if_test.c:917:35: punctuator )
if_test.c:917:37: identifier __attribute__
if_test.c:917:51: punctuator (
if_test.c:917:52: punctuator (
if_test.c:917:53: identifier __nothrow__
if_test.c:917:65: punctuator ,
if_test.c:917:67: identifier __leaf__
if_test.c:917:75: punctuator )
if_test.c:917:76: punctuator )
if_test.c:917:78: identifier __attribute__
if_test.c:917:92: punctuator (
if_test.c:917:93: punctuator (
if_test.c:917:94: identifier __const__
if_test.c:917:103: punctuator )
if_test.c:917:104: punctuator )
if_test.c:917:106: punctuator ;
if_test.c:921:1: identifier __extension__
if_test.c:921:15: keyword extern
if_test.c:921:22: keyword long
if_test.c:921:27: keyword long
if_test.c:921:32: keyword int
if_test.c:921:36: identifier llabs
if_test.c:921:42: punctuator (
if_test.c:921:43: keyword long
if_test.c:921:48: keyword long
if_test.c:921:53: keyword int
if_test.c:921:57: identifier __x
if_test.c:921:60: punctuator )
if_test.c:922:6: identifier __attribute__
if_test.c:922:20: punctuator (
if_test.c:922:21: punctuator (
if_test.c:922:22: identifier __nothrow__
if_test.c:922:34: punctuator ,
if_test.c:922:36: identifier __leaf__
if_test.c:922:44: punctuator )
if_test.c:922:45: punctuator )
if_test.c:922:47: identifier __attribute__
if_test.c:922:61: punctuator (
if_test.c:922:62: punctuator (
if_test.c:922:63: identifier __const__
if_test.c:922:72: punctuator )
if_test.c:922:73: punctuator )
if_test.c:922:75: punctuator ;
if_test.c:930:1: keyword extern
if_test.c:930:8: identifier div_t
if_test.c:930:14: identifier div
if_test.c:930:18: punctuator (
if_test.c:930:19: keyword int
if_test.c:930:23: identifier __numer
if_test.c:930:30: punctuator ,
if_test.c:930:32: keyword int
if_test.c:930:36: identifier __denom
if_test.c:930:43: punctuator )
if_test.c:931:6: identifier __attribute__
if_test.c:931:20: punctuator (
if_test.c:931:21: punctuator (
if_test.c:931:22: identifier __nothrow__
if_test.c:931:34: punctuator ,
if_test.c:931:36: identifier __leaf__
if_test.c:931:44: punctuator )
if_test.c:931:45: punctuator )
if_test.c:931:47: identifier __attribute__
if_test.c:931:61: punctuator (
if_test.c:931:62: punctuator (
if_test.c:931:63: identifier __const__
if_test.c:931:72: punctuator )
if_test.c:931:73: punctuator )
if_test.c:931:75: punctuator ;
if_test.c:932:1: keyword extern
if_test.c:932:8: identifier ldiv_t
if_test.c:932:15: identifier ldiv
if_test.c:932:20: punctuator (
if_test.c:932:21: keyword long
if_test.c:932:26: keyword int
if_test.c:932:30: identifier __numer
if_test.c:932:37: punctuator ,
if_test.c:932:39: keyword long
if_test.c:932:44: keyword int
if_test.c:932:48: identifier __denom
if_test.c:932:55: punctuator )
if_test.c:933:6: identifier __attribute__
if_test.c:933:20: punctuator (
if_test.c:933:21: punctuator (
if_test.c:933:22: identifier __nothrow__
if_test.c:933:34: punctuator ,
if_test.c:933:36: identifier __leaf__
if_test.c:933:44: punctuator )
if_test.c:933:45: punctuator )
if_test.c:933:47: identifier __attribute__
if_test.c:933:61: punctuator (
if_test.c:933:62: punctuator (
if_test.c:933:63: identifier __const__
if_test.c:933:72: punctuator )
if_test.c:933:73: punctuator )
if_test.c:933:75: punctuator ;
if_test.c:938:1: identifier __extension__
if_test.c:938:15: keyword extern
if_test.c:938:22: identifier lldiv_t
if_test.c:938:30: identifier lldiv
if_test.c:938:36: punctuator (
if_test.c:938:37: keyword long
if_test.c:938:42: keyword long
if_test.c:938:47: keyword int
if_test.c:938:51: identifier __numer
if_test.c:938:58: punctuator ,
if_test.c:939:9: keyword long
if_test.c:939:14: keyword long
if_test.c:939:19: keyword int
if_test.c:939:23: identifier __denom
if_test.c:939:30: punctuator )
if_test.c:940:6: identifier __attribute__
if_test.c:940:20: punctuator (
if_test.c:940:21: punctuator (
if_test.c:940:22: identifier __nothrow__
if_test.c:940:34: punctuator ,
if_test.c:940:36: identifier __leaf__
if_test.c:940:44: punctuator )
if_test.c:940:45: punctuator )
if_test.c:940:47: identifier __attribute__
if_test.c:940:61: punctuator (
if_test.c:940:62: punctuator (
if_test.c:940:63: identifier __const__
if_test.c:940:72: punctuator )
if_test.c:940:73: punctuator )
if_test.c:940:75: punctuator ;
if_test.c:942:1: keyword extern
if_test.c:942:8: keyword char
if_test.c:942:13: punctuator *
if_test.c:942:14: identifier ecvt
if_test.c:942:19: punctuator (
if_test.c:942:20: keyword double
if_test.c:942:27: identifier __value
if_test.c:942:34: punctuator ,
if_test.c:942:36: keyword int
if_test.c:942:40: identifier __ndigit
if_test.c:942:48: punctuator ,
if_test.c:942:50: keyword int
if_test.c:942:54: punctuator *
if_test.c:942:55: identifier __restrict
if_test.c:942:66: identifier __decpt
if_test.c:942:73: punctuator ,
if_test.c:943:6: keyword int
if_test.c:943:10: punctuator *
if_test.c:943:11: identifier __restrict
if_test.c:943:22: identifier __sign
if_test.c:943:28: punctuator )
if_test.c:943:30: identifier __attribute__
if_test.c:943:44: punctuator (
if_test.c:943:45: punctuator (
if_test.c:943:46: identifier __nothrow__
if_test.c:943:58: punctuator ,
if_test.c:943:60: identifier __leaf__
if_test.c:943:68: punctuator )
if_test.c:943:69: punctuator )
if_test.c:943:71: identifier __attribute__
if_test.c:943:85: punctuator (
if_test.c:943:86: punctuator (
if_test.c:943:87: identifier __nonnull__
if_test.c:943:99: punctuator (
if_test.c:943:100: constant 3
if_test.c:943:101: punctuator ,
if_test.c:943:103: constant 4
if_test.c:943:104: punctuator )
if_test.c:943:105: punctuator )
if_test.c:943:106: punctuator )
if_test.c:943:108: punctuator ;
if_test.c:948:1: keyword extern
if_test.c:948:8: keyword char
if_test.c:948:13: punctuator *
if_test.c:948:14: identifier fcvt
if_test.c:948:19: punctuator (
if_test.c:948:20: keyword double
if_test.c:948:27: identifier __value
if_test.c:948:34: punctuator ,
if_test.c:948:36: keyword int
if_test.c:948:40: identifier __ndigit
if_test.c:948:48: punctuator ,
if_test.c:948:50: keyword int
if_test.c:948:54: punctuator *
if_test.c:948:55: identifier __restrict
if_test.c:948:66: identifier __decpt
if_test.c:948:73: punctuator ,
if_test.c:949:6: keyword int
if_test.c:949:10: punctuator *
if_test.c:949:11: identifier __restrict
if_test.c:949:22: identifier __sign
if_test.c:949:28: punctuator )
if_test.c:949:30: identifier __attribute__
if_test.c:949:44: punctuator (
if_test.c:949:45: punctuator (
if_test.c:949:46: identifier __nothrow__
if_test.c:949:58: punctuator ,
if_test.c:949:60: identifier __leaf__
if_test.c:949:68: punctuator )
if_test.c:949:69: punctuator )
if_test.c:949:71: identifier __attribute__
if_test.c:949:85: punctuator (
if_test.c:949:86: punctuator (
if_test.c:949:87: identifier __nonnull__
if_test.c:949:99: punctuator (
if_test.c:949:100: constant 3
if_test.c:949:101: punctuator ,
if_test.c:949:103: constant 4
if_test.c:949:104: punctuator )
if_test.c:949:105: punctuator )
if_test.c:949:106: punctuator )
if_test.c:949:108: punctuator ;
if_test.c:954:1: keyword extern
if_test.c:954:8: keyword char
if_test.c:954:13: punctuator *
if_test.c:954:14: identifier gcvt
if_test.c:954:19: punctuator (
if_test.c:954:20: keyword double
if_test.c:954:27: identifier __value
if_test.c:954:34: punctuator ,
if_test.c:954:36: keyword int
if_test.c:954:40: identifier __ndigit
if_test.c:954:48: punctuator ,
if_test.c:954:50: keyword char
if_test.c:954:55: punctuator *
if_test.c:954:56: identifier __buf
if_test.c:954:61: punctuator )
if_test.c:955:6: identifier __attribute__
if_test.c:955:20: punctuator (
if_test.c:955:21: punctuator (
if_test.c:955:22: identifier __nothrow__
if_test.c:955:34: punctuator ,
if_test.c:955:36: identifier __leaf__
if_test.c:955:44: punctuator )
if_test.c:955:45: punctuator )
if_test.c:955:47: identifier __attribute__
if_test.c:955:61: punctuator (
if_test.c:955:62: punctuator (
if_test.c:955:63: identifier __nonnull__
if_test.c:955:75: punctuator (
if_test.c:955:76: constant 3
if_test.c:955:77: punctuator )
if_test.c:955:78: punctuator )
if_test.c:955:79: punctuator )
if_test.c:955:81: punctuator ;
if_test.c:960:1: keyword extern
if_test.c:960:8: keyword char
if_test.c:960:13: punctuator *
if_test.c:960:14: identifier qecvt
if_test.c:960:20: punctuator (
if_test.c:960:21: keyword long
if_test.c:960:26: keyword double
if_test.c:960:33: identifier __value
if_test.c:960:40: punctuator ,
if_test.c:960:42: keyword int
if_test.c:960:46: identifier __ndigit
if_test.c:960:54: punctuator ,
if_test.c:961:7: keyword int
if_test.c:961:11: punctuator *
if_test.c:961:12: identifier __restrict
if_test.c:961:23: identifier __decpt
if_test.c:961:30: punctuator ,
if_test.c:961:32: keyword int
if_test.c:961:36: punctuator *
if_test.c:961:37: identifier __restrict
if_test.c:961:48: identifier __sign
if_test.c:961:54: punctuator )
if_test.c:962:6: identifier __attribute__
if_test.c:962:20: punctuator (
if_test.c:962:21: punctuator (
if_test.c:962:22: identifier __nothrow__
if_test.c:962:34: punctuator ,
if_test.c:962:36: identifier __leaf__
if_test.c:962:44: punctuator )
if_test.c:962:45: punctuator )
if_test.c:962:47: identifier __attribute__
if_test.c:962:61: punctuator (
if_test.c:962:62: punctuator (
if_test.c:962:63: identifier __nonnull__
if_test.c:962:75: punctuator (
if_test.c:962:76: constant 3
if_test.c:962:77: punctuator ,
if_test.c:962:79: constant 4
if_test.c:962:80: punctuator )
if_test.c:962:81: punctuator )
if_test.c:962:82: punctuator )
if_test.c:962:84: punctuator ;
if_test.c:963:1: keyword extern
if_test.c:963:8: keyword char
if_test.c:963:13: punctuator *
if_test.c:963:14: identifier qfcvt
if_test.c:963:20: punctuator (
if_test.c:963:21: keyword long
if_test.c:963:26: keyword double
if_test.c:963:33: identifier __value
if_test.c:963:40: punctuator ,
if_test.c:963:42: keyword int
if_test.c:963:46: identifier __ndigit
if_test.c:963:54: punctuator ,
if_test.c:964:7: keyword int
if_test.c:964:11: punctuator *
if_test.c:964:12: identifier __restrict
if_test.c:964:23: identifier __decpt
if_test.c:964:30: punctuator ,
if_test.c:964:32: keyword int
if_test.c:964:36: punctuator *
if_test.c:964:37: identifier __restrict
if_test.c:964:48: identifier __sign
if_test.c:964:54: punctuator )
if_test.c:965:6: identifier __attribute__
if_test.c:965:20: punctuator (
if_test.c:965:21: punctuator (
if_test.c:965:22: identifier __nothrow__
if_test.c:965:34: punctuator ,
if_test.c:965:36: identifier __leaf__
if_test.c:965:44: punctuator )
if_test.c:965:45: punctuator )
if_test.c:965:47: identifier __attribute__
if_test.c:965:61: punctuator (
if_test.c:965:62: punctuator (
if_test.c:965:63: identifier __nonnull__
if_test.c:965:75: punctuator (
if_test.c:965:76: constant 3
if_test.c:965:77: punctuator ,
if_test.c:965:79: constant 4
if_test.c:965:80: punctuator )
if_test.c:965:81: punctuator )
if_test.c:965:82: punctuator )
if_test.c:965:84: punctuator ;
if_test.c:966:1: keyword extern
if_test.c:966:8: keyword char
if_test.c:966:13: punctuator *
if_test.c:966:14: identifier qgcvt
if_test.c:966:20: punctuator (
if_test.c:966:21: keyword long
if_test.c:966:26: keyword double
if_test.c:966:33: identifier __value
if_test.c:966:40: punctuator ,
if_test.c:966:42: keyword int
if_test.c:966:46: identifier __ndigit
if_test.c:966:54: punctuator ,
if_test.c:966:56: keyword char
if_test.c:966:61: punctuator *
if_test.c:966:62: identifier __buf
if_test.c:966:67: punctuator )
if_test.c:967:6: identifier __attribute__
if_test.c:967:20: punctuator (
if_test.c:967:21: punctuator (
if_test.c:967:22: identifier __nothrow__
if_test.c:967:34: punctuator ,
if_test.c:967:36: identifier __leaf__
if_test.c:967:44: punctuator )
if_test.c:967:45: punctuator )
if_test.c:967:47: identifier __attribute__
if_test.c:967:61: punctuator (
if_test.c:967:62: punctuator (
if_test.c:967:63: identifier __nonnull__
if_test.c:967:75: punctuator (
if_test.c:967:76: constant 3
if_test.c:967:77: punctuator )
if_test.c:967:78: punctuator )
if_test.c:967:79: punctuator )
if_test.c:967:81: punctuator ;
if_test.c:972:1: keyword extern
if_test.c:972:8: keyword int
if_test.c:972:12: identifier ecvt_r
if_test.c:972:19: punctuator (
if_test.c:972:20: keyword double
if_test.c:972:27: identifier __value
if_test.c:972:34: punctuator ,
if_test.c:972:36: keyword int
if_test.c:972:40: identifier __ndigit
if_test.c:972:48: punctuator ,
if_test.c:972:50: keyword int
if_test.c:972:54: punctuator *
if_test.c:972:55: identifier __restrict
if_test.c:972:66: identifier __decpt
if_test.c:972:73: punctuator ,
if_test.c:973:6: keyword int
if_test.c:973:10: punctuator *
if_test.c:973:11: identifier __restrict
if_test.c:973:22: identifier __sign
if_test.c:973:28: punctuator ,
if_test.c:973:30: keyword char
if_test.c:973:35: punctuator *
if_test.c:973:36: identifier __restrict
if_test.c:973:47: identifier __buf
if_test.c:973:52: punctuator ,
if_test.c:974:6: identifier size_t
if_test.c:974:13: identifier __len
if_test.c:974:18: punctuator )
if_test.c:974:20: identifier __attribute__
if_test.c:974:34: punctuator (
if_test.c:974:35: punctuator (
if_test.c:974:36: identifier __nothrow__
if_test.c:974:48: punctuator ,
if_test.c:974:50: identifier __leaf__
if_test.c:974:58: punctuator )
if_test.c:974:59: punctuator )
if_test.c:974:61: identifier __attribute__
if_test.c:974:75: punctuator (
if_test.c:974:76: punctuator (
if_test.c:974:77: identifier __nonnull__
if_test.c:974:89: punctuator (
if_test.c:974:90: constant 3
if_test.c:974:91: punctuator ,
if_test.c:974:93: constant 4
if_test.c:974:94: punctuator ,
if_test.c:974:96: constant 5
if_test.c:974:97: punctuator )
if_test.c:974:98: punctuator )
if_test.c:974:99: punctuator )
if_test.c:974:100: punctuator ;
if_test.c:975:1: keyword extern
if_test.c:975:8: keyword int
if_test.c:975:12: identifier fcvt_r
if_test.c:975:19: punctuator (
if_test.c:975:20: keyword double
if_test.c:975:27: identifier __value
if_test.c:975:34: punctuator ,
if_test.c:975:36: keyword int
if_test.c:975:40: identifier __ndigit
if_test.c:975:48: punctuator ,
if_test.c:975:50: keyword int
if_test.c:975:54: punctuator *
if_test.c:975:55: identifier __restrict
if_test.c:975:66: identifier __decpt
if_test.c:975:73: punctuator ,
if_test.c:976:6: keyword int
if_test.c:976:10: punctuator *
if_test.c:976:11: identifier __restrict
if_test.c:976:22: identifier __sign
if_test.c:976:28: punctuator ,
if_test.c:976:30: keyword char
if_test.c:976:35: punctuator *
if_test.c:976:36: identifier __restrict
if_test.c:976:47: identifier __buf
if_test.c:976:52: punctuator ,
if_test.c:977:6: identifier size_t
if_test.c:977:13: identifier __len
if_test.c:977:18: punctuator )
if_test.c:977:20: identifier __attribute__
if_test.c:977:34: punctuator (
if_test.c:977:35: punctuator (
if_test.c:977:36: identifier __nothrow__
if_test.c:977:48: punctuator ,
if_test.c:977:50: identifier __leaf__
if_test.c:977:58: punctuator )
if_test.c:977:59: punctuator )
if_test.c:977:61: identifier __attribute__
if_test.c:977:75: punctuator (
if_test.c:977:76: punctuator (
if_test.c:977:77: identifier __nonnull__
if_test.c:977:89: punctuator (
if_test.c:977:90: constant 3
if_test.c:977:91: punctuator ,
if_test.c:977:93: constant 4
if_test.c:977:94: punctuator ,
if_test.c:977:96: constant 5
if_test.c:977:97: punctuator )
if_test.c:977:98: punctuator )
if_test.c:977:99: punctuator )
if_test.c:977:100: punctuator ;
if_test.c:979:1: keyword extern
if_test.c:979:8: keyword int
if_test.c:979:12: identifier qecvt_r
if_test.c:979:20: punctuator (
if_test.c:979:21: keyword long
if_test.c:979:26: keyword double
if_test.c:979:33: identifier __value
if_test.c:979:40: punctuator ,
if_test.c:979:42: keyword int
if_test.c:979:46: identifier __ndigit
if_test.c:979:54: punctuator ,
if_test.c:980:7: keyword int
if_test.c:980:11: punctuator *
if_test.c:980:12: identifier __restrict
if_test.c:980:23: identifier __decpt
if_test.c:980:30: punctuator ,
if_test.c:980:32: keyword int
if_test.c:980:36: punctuator *
if_test.c:980:37: identifier __restrict
if_test.c:980:48: identifier __sign
if_test.c:980:54: punctuator ,
if_test.c:981:7: keyword char
if_test.c:981:12: punctuator *
if_test.c:981:13: identifier __restrict
if_test.c:981:24: identifier __buf
if_test.c:981:29: punctuator ,
if_test.c:981:31: identifier size_t
if_test.c:981:38: identifier __len
if_test.c:981:43: punctuator )
if_test.c:982:6: identifier __attribute__
if_test.c:982:20: punctuator (
if_test.c:982:21: punctuator (
if_test.c:982:22: identifier __nothrow__
if_test.c:982:34: punctuator ,
if_test.c:982:36: identifier __leaf__
if_test.c:982:44: punctuator )
if_test.c:982:45: punctuator )
if_test.c:982:47: identifier __attribute__
if_test.c:982:61: punctuator (
if_test.c:982:62: punctuator (
if_test.c:982:63: identifier __nonnull__
if_test.c:982:75: punctuator (
if_test.c:982:76: constant 3
if_test.c:982:77: punctuator ,
if_test.c:982:79: constant 4
if_test.c:982:80: punctuator ,
if_test.c:982:82: constant 5
if_test.c:982:83: punctuator )
if_test.c:982:84: punctuator )
if_test.c:982:85: punctuator )
if_test.c:982:86: punctuator ;
if_test.c:983:1: keyword extern
if_test.c:983:8: keyword int
if_test.c:983:12: identifier qfcvt_r
if_test.c:983:20: punctuator (
if_test.c:983:21: keyword long
if_test.c:983:26: keyword double
if_test.c:983:33: identifier __value
if_test.c:983:40: punctuator ,
if_test.c:983:42: keyword int
if_test.c:983:46: identifier __ndigit
if_test.c:983:54: punctuator ,
if_test.c:984:7: keyword int
if_test.c:984:11: punctuator *
if_test.c:984:12: identifier __restrict
if_test.c:984:23: identifier __decpt
if_test.c:984:30: punctuator ,
if_test.c:984:32: keyword int
if_test.c:984:36: punctuator *
if_test.c:984:37: identifier __restrict
if_test.c:984:48: identifier __sign
if_test.c:984:54: punctuator ,
if_test.c:985:7: keyword char
if_test.c:985:12: punctuator *
if_test.c:985:13: identifier __restrict
if_test.c:985:24: identifier __buf
if_test.c:985:29: punctuator ,
if_test.c:985:31: identifier size_t
if_test.c:985:38: identifier __len
if_test.c:985:43: punctuator )
if_test.c:986:6: identifier __attribute__
if_test.c:986:20: punctuator (
if_test.c:986:21: punctuator (
if_test.c:986:22: identifier __nothrow__
if_test.c:986:34: punctuator ,
if_test.c:986:36: identifier __leaf__
if_test.c:986:44: punctuator )
if_test.c:986:45: punctuator )
if_test.c:986:47: identifier __attribute__
if_test.c:986:61: punctuator (
if_test.c:986:62: punctuator (
if_test.c:986:63: identifier __nonnull__
if_test.c:986:75: punctuator (
if_test.c:986:76: constant 3
if_test.c:986:77: punctuator ,
if_test.c:986:79: constant 4
if_test.c:986:80: punctuator ,
if_test.c:986:82: constant 5
if_test.c:986:83: punctuator )
if_test.c:986:84: punctuator )
if_test.c:986:85: punctuator )
if_test.c:986:86: punctuator ;
if_test.c:994:1: keyword extern
if_test.c:994:8: keyword int
if_test.c:994:12: identifier mblen
if_test.c:994:18: punctuator (
if_test.c:994:19: identifier __const
if_test.c:994:27: keyword char
if_test.c:994:32: punctuator *
if_test.c:994:33: identifier __s
if_test.c:994:36: punctuator ,
if_test.c:994:38: identifier size_t
if_test.c:994:45: identifier __n
if_test.c:994:48: punctuator )
if_test.c:994:50: identifier __attribute__
if_test.c:994:64: punctuator (
if_test.c:994:65: punctuator (
if_test.c:994:66: identifier __nothrow__
if_test.c:994:78: punctuator ,
if_test.c:994:80: identifier __leaf__
if_test.c:994:88: punctuator )
if_test.c:994:89: punctuator )
if_test.c:994:91: punctuator ;
if_test.c:997:1: keyword extern
if_test.c:997:8: keyword int
if_test.c:997:12: identifier mbtowc
if_test.c:997:19: punctuator (
if_test.c:997:20: identifier wchar_t
if_test.c:997:28: punctuator *
if_test.c:997:29: identifier __restrict
if_test.c:997:40: identifier __pwc
if_test.c:997:45: punctuator ,
if_test.c:998:6: identifier __const
if_test.c:998:14: keyword char
if_test.c:998:19: punctuator *
if_test.c:998:20: identifier __restrict
if_test.c:998:31: identifier __s
if_test.c:998:34: punctuator ,
if_test.c:998:36: identifier size_t
if_test.c:998:43: identifier __n
if_test.c:998:46: punctuator )
if_test.c:998:48: identifier __attribute__
if_test.c:998:62: punctuator (
if_test.c:998:63: punctuator (
if_test.c:998:64: identifier __nothrow__
if_test.c:998:76: punctuator ,
if_test.c:998:78: identifier __leaf__
if_test.c:998:86: punctuator )
if_test.c:998:87: punctuator )
if_test.c:998:89: punctuator ;
if_test.c:1001:1: keyword extern
if_test.c:1001:8: keyword int
if_test.c:1001:12: identifier wctomb
if_test.c:1001:19: punctuator (
if_test.c:1001:20: keyword char
if_test.c:1001:25: punctuator *
if_test.c:1001:26: identifier __s
if_test.c:1001:29: punctuator ,
if_test.c:1001:31: identifier wchar_t
if_test.c:1001:39: identifier __wchar
if_test.c:1001:46: punctuator )
if_test.c:1001:48: identifier __attribute__
if_test.c:1001:62: punctuator (
if_test.c:1001:63: punctuator (
if_test.c:1001:64: identifier __nothrow__
if_test.c:1001:76: punctuator ,
if_test.c:1001:78: identifier __leaf__
if_test.c:1001:86: punctuator )
if_test.c:1001:87: punctuator )
if_test.c:1001:89: punctuator ;
if_test.c:1005:1: keyword extern
if_test.c:1005:8: identifier size_t
if_test.c:1005:15: identifier mbstowcs
if_test.c:1005:24: punctuator (
if_test.c:1005:25: identifier wchar_t
if_test.c:1005:33: punctuator *
if_test.c:1005:34: identifier __restrict
if_test.c:1005:45: identifier __pwcs
if_test.c:1005:51: punctuator ,
if_test.c:1006:4: identifier __const
if_test.c:1006:12: keyword char
if_test.c:1006:17: punctuator *
if_test.c:1006:18: identifier __restrict
if_test.c:1006:29: identifier __s
if_test.c:1006:32: punctuator ,
if_test.c:1006:34: identifier size_t
if_test.c:1006:41: identifier __n
if_test.c:1006:44: punctuator )
if_test.c:1006:46: identifier __attribute__
if_test.c:1006:60: punctuator (
if_test.c:1006:61: punctuator (
if_test.c:1006:62: identifier __nothrow__
if_test.c:1006:74: punctuator ,
if_test.c:1006:76: identifier __leaf__
if_test.c:1006:84: punctuator )
if_test.c:1006:85: punctuator )
if_test.c:1006:86: punctuator ;
if_test.c:1008:1: keyword extern
if_test.c:1008:8: identifier size_t
if_test.c:1008:15: identifier wcstombs
if_test.c:1008:24: punctuator (
if_test.c:1008:25: keyword char
if_test.c:1008:30: punctuator *
if_test.c:1008:31: identifier __restrict
if_test.c:1008:42: identifier __s
if_test.c:1008:45: punctuator ,
if_test.c:1009:4: identifier __const
if_test.c:1009:12: identifier wchar_t
if_test.c:1009:20: punctuator *
if_test.c:1009:21: identifier __restrict
if_test.c:1009:32: identifier __pwcs
if_test.c:1009:38: punctuator ,
if_test.c:1009:40: identifier size_t
if_test.c:1009:47: identifier __n
if_test.c:1009:50: punctuator )
if_test.c:1010:6: identifier __attribute__
if_test.c:1010:20: punctuator (
if_test.c:1010:21: punctuator (
if_test.c:1010:22: identifier __nothrow__
if_test.c:1010:34: punctuator ,
if_test.c:1010:36: identifier __leaf__
if_test.c:1010:44: punctuator )
if_test.c:1010:45: punctuator )
if_test.c:1010:46: punctuator ;
if_test.c:1019:1: keyword extern
if_test.c:1019:8: keyword int
if_test.c:1019:12: identifier rpmatch
if_test.c:1019:20: punctuator (
if_test.c:1019:21: identifier __const
if_test.c:1019:29: keyword char
if_test.c:1019:34: punctuator *
if_test.c:1019:35: identifier __response
if_test.c:1019:45: punctuator )
if_test.c:1019:47: identifier __attribute__
if_test.c:1019:61: punctuator (
if_test.c:1019:62: punctuator (
if_test.c:1019:63: identifier __nothrow__
if_test.c:1019:75: punctuator ,
if_test.c:1019:77: identifier __leaf__
if_test.c:1019:85: punctuator )
if_test.c:1019:86: punctuator )
if_test.c:1019:88: identifier __attribute__
if_test.c:1019:102: punctuator (
if_test.c:1019:103: punctuator (
if_test.c:1019:104: identifier __nonnull__
if_test.c:1019:116: punctuator (
if_test.c:1019:117: constant 1
if_test.c:1019:118: punctuator )
if_test.c:1019:119: punctuator )
if_test.c:1019:120: punctuator )
if_test.c:1019:122: punctuator ;
if_test.c:1020:1: keyword extern
if_test.c:1020:8: keyword int
if_test.c:1020:12: identifier getsubopt
if_test.c:1020:22: punctuator (
if_test.c:1020:23: keyword char
if_test.c:1020:28: punctuator *
if_test.c:1020:29: punctuator *
if_test.c:1020:30: identifier __restrict
if_test.c:1020:41: identifier __optionp
if_test.c:1020:50: punctuator ,
if_test.c:1021:9: keyword char
if_test.c:1021:14: punctuator *
if_test.c:1021:15: identifier __const
if_test.c:1021:23: punctuator *
if_test.c:1021:24: identifier __restrict
if_test.c:1021:35: identifier __tokens
if_test.c:1021:43: punctuator ,
if_test.c:1022:9: keyword char
if_test.c:1022:14: punctuator *
if_test.c:1022:15: punctuator *
if_test.c:1022:16: identifier __restrict
if_test.c:1022:27: identifier __valuep
if_test.c:1022:35: punctuator )
if_test.c:1023:6: identifier __attribute__
if_test.c:1023:20: punctuator (
if_test.c:1023:21: punctuator (
if_test.c:1023:22: identifier __nothrow__
if_test.c:1023:34: punctuator ,
if_test.c:1023:36: identifier __leaf__
if_test.c:1023:44: punctuator )
if_test.c:1023:45: punctuator )
if_test.c:1023:47: identifier __attribute__
if_test.c:1023:61: punctuator (
if_test.c:1023:62: punctuator (
if_test.c:1023:63: identifier __nonnull__
if_test.c:1023:75: punctuator (
if_test.c:1023:76: constant 1
if_test.c:1023:77: punctuator ,
if_test.c:1023:79: constant 2
if_test.c:1023:80: punctuator ,
if_test.c:1023:82: constant 3
if_test.c:1023:83: punctuator )
if_test.c:1023:84: punctuator )
if_test.c:1023:85: punctuator )
if_test.c:1023:87: punctuator ;
if_test.c:1024:1: keyword extern
if_test.c:1024:8: keyword int
if_test.c:1024:12: identifier getloadavg
if_test.c:1024:23: punctuator (
if_test.c:1024:24: keyword double
if_test.c:1024:31: identifier __loadavg
if_test.c:1024:40: punctuator [
if_test.c:1024:41: punctuator ]
if_test.c:1024:42: punctuator ,
if_test.c:1024:44: keyword int
if_test.c:1024:48: identifier __nelem
if_test.c:1024:55: punctuator )
if_test.c:1025:6: identifier __attribute__
if_test.c:1025:20: punctuator (
if_test.c:1025:21: punctuator (
if_test.c:1025:22: identifier __nothrow__
if_test.c:1025:34: punctuator ,
if_test.c:1025:36: identifier __leaf__
if_test.c:1025:44: punctuator )
if_test.c:1025:45: punctuator )
if_test.c:1025:47: identifier __attribute__
if_test.c:1025:61: punctuator (
if_test.c:1025:62: punctuator (
if_test.c:1025:63: identifier __nonnull__
if_test.c:1025:75: punctuator (
if_test.c:1025:76: constant 1
if_test.c:1025:77: punctuator )
if_test.c:1025:78: punctuator )
if_test.c:1025:79: punctuator )
if_test.c:1025:80: punctuator ;
if_test.c:1027:1: keyword int
if_test.c:1027:5: identifier main2
if_test.c:1027:11: punctuator (
if_test.c:1027:12: keyword char
if_test.c:1027:17: punctuator *
if_test.c:1027:18: punctuator *
if_test.c:1027:19: identifier argv
if_test.c:1027:23: punctuator )
if_test.c:1027:24: punctuator ;
if_test.c:1028:1: keyword int
if_test.c:1028:5: identifier main
if_test.c:1028:9: punctuator (
if_test.c:1028:10: keyword int
if_test.c:1028:14: identifier argc
if_test.c:1028:18: punctuator ,
if_test.c:1028:20: keyword char
if_test.c:1028:25: punctuator *
if_test.c:1028:26: punctuator *
if_test.c:1028:27: identifier argv
if_test.c:1028:31: punctuator )
if_test.c:1029:1: punctuator {
if_test.c:1030:3: keyword int
if_test.c:1030:7: identifier x
if_test.c:1030:9: punctuator =
if_test.c:1030:11: constant 0
if_test.c:1030:12: punctuator ;
if_test.c:1031:3: keyword const
if_test.c:1031:9: keyword char
if_test.c:1031:14: punctuator *
if_test.c:1031:15: identifier array
if_test.c:1031:20: punctuator [
if_test.c:1031:21: punctuator ]
if_test.c:1031:23: punctuator =
if_test.c:1031:25: punctuator {
if_test.c:1031:26: string-literal "a.out"
if_test.c:1031:33: punctuator ,
if_test.c:1031:35: string-literal "10"
if_test.c:1031:39: punctuator ,
if_test.c:1031:41: string-literal "15"
if_test.c:1031:45: punctuator }
if_test.c:1031:46: punctuator ;
if_test.c:1032:3: identifier x
if_test.c:1032:5: punctuator =
if_test.c:1032:7: identifier main2
if_test.c:1032:13: punctuator (
if_test.c:1032:14: punctuator (
if_test.c:1032:15: keyword char
if_test.c:1032:20: punctuator *
if_test.c:1032:21: punctuator *
if_test.c:1032:22: punctuator )
if_test.c:1032:24: identifier array
if_test.c:1032:29: punctuator )
if_test.c:1032:30: punctuator ;
if_test.c:1033:3: keyword return
if_test.c:1033:10: identifier x
if_test.c:1033:11: punctuator ;
if_test.c:1034:1: punctuator }
if_test.c:1037:1: keyword int
if_test.c:1037:5: identifier main2
if_test.c:1037:11: punctuator (
if_test.c:1037:12: keyword char
if_test.c:1037:17: punctuator *
if_test.c:1037:18: punctuator *
if_test.c:1037:19: identifier argv
if_test.c:1037:23: punctuator )
if_test.c:1038:1: punctuator {
if_test.c:1039:3: keyword int
if_test.c:1039:7: identifier x
if_test.c:1039:9: punctuator =
if_test.c:1039:11: constant 3
if_test.c:1039:12: punctuator ,
if_test.c:1039:14: identifier y
if_test.c:1039:15: punctuator ,
if_test.c:1039:17: identifier z
if_test.c:1039:18: punctuator ,
if_test.c:1039:20: identifier array
if_test.c:1039:25: punctuator [
if_test.c:1039:26: constant 10
if_test.c:1039:28: punctuator ]
if_test.c:1039:29: punctuator ,
if_test.c:1039:31: identifier array2
if_test.c:1039:37: punctuator [
if_test.c:1039:38: constant 10
if_test.c:1039:40: punctuator ]
if_test.c:1039:41: punctuator ,
if_test.c:1039:43: identifier TwodArray
if_test.c:1039:52: punctuator [
if_test.c:1039:53: constant 10
if_test.c:1039:55: punctuator ]
if_test.c:1039:56: punctuator [
if_test.c:1039:57: constant 10
if_test.c:1039:59: punctuator ]
if_test.c:1039:60: punctuator ,
if_test.c:1039:62: identifier jj
if_test.c:1039:64: punctuator ,
if_test.c:1039:65: identifier kk
if_test.c:1039:67: punctuator ,
if_test.c:1039:68: identifier ll
if_test.c:1039:71: punctuator ;
if_test.c:1040:3: keyword int
if_test.c:1040:7: identifier array2_check
if_test.c:1040:19: punctuator [
if_test.c:1040:20: constant 10
if_test.c:1040:22: punctuator ]
if_test.c:1040:23: punctuator ,
if_test.c:1040:25: identifier array2d_check
if_test.c:1040:38: punctuator [
if_test.c:1040:39: constant 10
if_test.c:1040:41: punctuator ]
if_test.c:1040:42: punctuator [
if_test.c:1040:43: constant 10
if_test.c:1040:45: punctuator ]
if_test.c:1040:46: punctuator ,
if_test.c:1040:48: identifier array2d
if_test.c:1040:55: punctuator [
if_test.c:1040:56: constant 10
if_test.c:1040:58: punctuator ]
if_test.c:1040:59: punctuator [
if_test.c:1040:60: constant 10
if_test.c:1040:62: punctuator ]
if_test.c:1040:63: punctuator ;
if_test.c:1041:3: keyword int
if_test.c:1041:7: identifier FourDArray
if_test.c:1041:17: punctuator [
if_test.c:1041:18: constant 10
if_test.c:1041:20: punctuator ]
if_test.c:1041:21: punctuator [
if_test.c:1041:22: constant 10
if_test.c:1041:24: punctuator ]
if_test.c:1041:25: punctuator [
if_test.c:1041:26: constant 10
if_test.c:1041:28: punctuator ]
if_test.c:1041:29: punctuator [
if_test.c:1041:30: constant 10
if_test.c:1041:32: punctuator ]
if_test.c:1041:33: punctuator ,
if_test.c:1041:35: identifier array4
if_test.c:1041:41: punctuator [
if_test.c:1041:42: constant 10
if_test.c:1041:44: punctuator ]
if_test.c:1041:45: punctuator [
if_test.c:1041:46: constant 10
if_test.c:1041:48: punctuator ]
if_test.c:1041:49: punctuator [
if_test.c:1041:50: constant 10
if_test.c:1041:52: punctuator ]
if_test.c:1041:53: punctuator [
if_test.c:1041:54: constant 10
if_test.c:1041:56: punctuator ]
if_test.c:1041:57: punctuator ;
if_test.c:1042:3: keyword int
if_test.c:1042:7: identifier array4_check
if_test.c:1042:19: punctuator [
if_test.c:1042:20: constant 10
if_test.c:1042:22: punctuator ]
if_test.c:1042:23: punctuator [
if_test.c:1042:24: constant 10
if_test.c:1042:26: punctuator ]
if_test.c:1042:27: punctuator [
if_test.c:1042:28: constant 10
if_test.c:1042:30: punctuator ]
if_test.c:1042:31: punctuator [
if_test.c:1042:32: constant 10
if_test.c:1042:34: punctuator ]
if_test.c:1042:35: punctuator ;
if_test.c:1043:3: keyword int
if_test.c:1043:7: identifier ii
if_test.c:1043:10: punctuator =
if_test.c:1043:12: constant 0
if_test.c:1043:13: punctuator ,
if_test.c:1043:15: identifier argc
if_test.c:1043:20: punctuator =
if_test.c:1043:22: constant 3
if_test.c:1043:23: punctuator ;
if_test.c:1045:3: identifier __asm
if_test.c:1045:9: keyword volatile
if_test.c:1045:18: punctuator (
if_test.c:1045:19: string-literal ""
if_test.c:1045:22: punctuator :
if_test.c:1045:24: string-literal "+r"
if_test.c:1045:29: punctuator (
if_test.c:1045:30: identifier argc
if_test.c:1045:34: punctuator )
if_test.c:1045:35: punctuator )
if_test.c:1045:36: punctuator ;
if_test.c:1047:3: keyword for
if_test.c:1047:7: punctuator (
if_test.c:1047:8: identifier ii
if_test.c:1047:11: punctuator =
if_test.c:1047:13: constant 0
if_test.c:1047:14: punctuator ;
if_test.c:1047:16: identifier ii
if_test.c:1047:19: punctuator <
if_test.c:1047:21: constant 10
if_test.c:1047:23: punctuator ;
if_test.c:1047:25: identifier ii
if_test.c:1047:27: punctuator ++
if_test.c:1047:29: punctuator )
if_test.c:1048:5: punctuator {
if_test.c:1049:7: identifier array
if_test.c:1049:12: punctuator [
if_test.c:1049:13: identifier ii
if_test.c:1049:15: punctuator ]
if_test.c:1049:17: punctuator =
if_test.c:1049:19: identifier argc
if_test.c:1049:23: punctuator %
if_test.c:1049:24: constant 3
if_test.c:1049:25: punctuator ;
if_test.c:1050:7: identifier array2
if_test.c:1050:13: punctuator [
if_test.c:1050:14: identifier ii
if_test.c:1050:16: punctuator ]
if_test.c:1050:17: punctuator =
if_test.c:1050:19: constant 10
if_test.c:1050:21: punctuator ;
if_test.c:1051:7: identifier array2_check
if_test.c:1051:19: punctuator [
if_test.c:1051:20: identifier ii
if_test.c:1051:22: punctuator ]
if_test.c:1051:24: punctuator =
if_test.c:1051:26: constant 10
if_test.c:1051:28: punctuator ;
if_test.c:1052:5: punctuator }
if_test.c:1054:3: keyword if
if_test.c:1054:6: punctuator (
if_test.c:1054:7: punctuator !
if_test.c:1054:8: identifier array
if_test.c:1054:13: punctuator [
if_test.c:1054:14: punctuator :
if_test.c:1054:15: punctuator ]
if_test.c:1054:16: punctuator )
if_test.c:1055:5: identifier array2
if_test.c:1055:11: punctuator [
if_test.c:1055:12: punctuator :
if_test.c:1055:13: punctuator ]
if_test.c:1055:15: punctuator =
if_test.c:1055:17: constant 5
if_test.c:1055:18: punctuator ;
if_test.c:1056:3: keyword else
if_test.c:1057:5: identifier array2
if_test.c:1057:11: punctuator [
if_test.c:1057:12: punctuator :
if_test.c:1057:13: punctuator ]
if_test.c:1057:15: punctuator =
if_test.c:1057:17: constant 10
if_test.c:1057:19: punctuator ;
if_test.c:1060:3: keyword for
if_test.c:1060:7: punctuator (
if_test.c:1060:8: identifier ii
if_test.c:1060:11: punctuator =
if_test.c:1060:13: constant 0
if_test.c:1060:14: punctuator ;
if_test.c:1060:16: identifier ii
if_test.c:1060:19: punctuator <
if_test.c:1060:21: constant 10
if_test.c:1060:23: punctuator ;
if_test.c:1060:25: identifier ii
if_test.c:1060:27: punctuator ++
if_test.c:1060:29: punctuator )
if_test.c:1061:5: punctuator {
if_test.c:1062:7: keyword if
if_test.c:1062:10: punctuator (
if_test.c:1062:11: punctuator !
if_test.c:1062:12: identifier array
if_test.c:1062:17: punctuator [
if_test.c:1062:18: identifier ii
if_test.c:1062:20: punctuator ]
if_test.c:1062:21: punctuator )
if_test.c:1063:2: identifier array2_check
if_test.c:1063:14: punctuator [
if_test.c:1063:15: identifier ii
if_test.c:1063:17: punctuator ]
if_test.c:1063:19: punctuator =
if_test.c:1063:21: constant 5
if_test.c:1063:22: punctuator ;
if_test.c:1064:7: keyword else
if_test.c:1065:2: identifier array2_check
if_test.c:1065:14: punctuator [
if_test.c:1065:15: identifier ii
if_test.c:1065:17: punctuator ]
if_test.c:1065:19: punctuator =
if_test.c:1065:21: constant 10
if_test.c:1065:23: punctuator ;
if_test.c:1066:5: punctuator }
if_test.c:1068:3: keyword for
if_test.c:1068:7: punctuator (
if_test.c:1068:8: identifier ii
if_test.c:1068:11: punctuator =
if_test.c:1068:13: constant 0
if_test.c:1068:14: punctuator ;
if_test.c:1068:16: identifier ii
if_test.c:1068:19: punctuator <
if_test.c:1068:21: constant 10
if_test.c:1068:23: punctuator ;
if_test.c:1068:25: identifier ii
if_test.c:1068:27: punctuator ++
if_test.c:1068:29: punctuator )
if_test.c:1069:5: keyword if
if_test.c:1069:8: punctuator (
if_test.c:1069:9: identifier array2_check
if_test.c:1069:21: punctuator [
if_test.c:1069:22: identifier ii
if_test.c:1069:24: punctuator ]
if_test.c:1069:26: punctuator !=
if_test.c:1069:29: identifier array2
if_test.c:1069:35: punctuator [
if_test.c:1069:36: identifier ii
if_test.c:1069:38: punctuator ]
if_test.c:1069:39: punctuator )
if_test.c:1070:7: keyword return
if_test.c:1070:14: constant 2
if_test.c:1070:15: punctuator ;
if_test.c:1074:3: keyword if
if_test.c:1074:6: punctuator (
if_test.c:1074:7: punctuator !
if_test.c:1074:8: punctuator (
if_test.c:1074:9: identifier array
if_test.c:1074:14: punctuator [
if_test.c:1074:15: constant 0
if_test.c:1074:16: punctuator :
if_test.c:1074:17: constant 10
if_test.c:1074:19: punctuator :
if_test.c:1074:20: constant 1
if_test.c:1074:21: punctuator ]
if_test.c:1074:23: punctuator +
if_test.c:1074:25: identifier array
if_test.c:1074:30: punctuator [
if_test.c:1074:31: constant 0
if_test.c:1074:32: punctuator :
if_test.c:1074:33: constant 10
if_test.c:1074:35: punctuator :
if_test.c:1074:36: constant 1
if_test.c:1074:37: punctuator ]
if_test.c:1074:38: punctuator )
if_test.c:1074:39: punctuator )
if_test.c:1075:5: identifier array2
if_test.c:1075:11: punctuator [
if_test.c:1075:12: punctuator :
if_test.c:1075:13: punctuator ]
if_test.c:1075:15: punctuator =
if_test.c:1075:17: constant 5
if_test.c:1075:18: punctuator ;
if_test.c:1076:3: keyword else
if_test.c:1077:5: identifier array2
if_test.c:1077:11: punctuator [
if_test.c:1077:12: punctuator :
if_test.c:1077:13: punctuator ]
if_test.c:1077:15: punctuator =
if_test.c:1077:17: constant 10
if_test.c:1077:19: punctuator ;
if_test.c:1079:3: keyword for
if_test.c:1079:7: punctuator (
if_test.c:1079:8: identifier ii
if_test.c:1079:11: punctuator =
if_test.c:1079:13: constant 0
if_test.c:1079:14: punctuator ;
if_test.c:1079:16: identifier ii
if_test.c:1079:19: punctuator <
if_test.c:1079:21: constant 10
if_test.c:1079:23: punctuator ;
if_test.c:1079:25: identifier ii
if_test.c:1079:27: punctuator ++
if_test.c:1079:29: punctuator )
if_test.c:1080:5: punctuator {
if_test.c:1081:7: keyword if
if_test.c:1081:10: punctuator (
if_test.c:1081:11: punctuator !
if_test.c:1081:12: punctuator (
if_test.c:1081:13: identifier array
if_test.c:1081:18: punctuator [
if_test.c:1081:19: identifier ii
if_test.c:1081:21: punctuator ]
if_test.c:1081:22: punctuator +
if_test.c:1081:24: identifier array
if_test.c:1081:29: punctuator [
if_test.c:1081:30: identifier ii
if_test.c:1081:32: punctuator ]
if_test.c:1081:33: punctuator )
if_test.c:1081:34: punctuator )
if_test.c:1082:2: identifier array2_check
if_test.c:1082:14: punctuator [
if_test.c:1082:15: identifier ii
if_test.c:1082:17: punctuator ]
if_test.c:1082:19: punctuator =
if_test.c:1082:21: constant 5
if_test.c:1082:22: punctuator ;
if_test.c:1083:7: keyword else
if_test.c:1084:2: identifier array2_check
if_test.c:1084:14: punctuator [
if_test.c:1084:15: identifier ii
if_test.c:1084:17: punctuator ]
if_test.c:1084:19: punctuator =
if_test.c:1084:21: constant 10
if_test.c:1084:23: punctuator ;
if_test.c:1085:5: punctuator }
if_test.c:1087:3: keyword for
if_test.c:1087:7: punctuator (
if_test.c:1087:8: identifier ii
if_test.c:1087:11: punctuator =
if_test.c:1087:13: constant 0
if_test.c:1087:14: punctuator ;
if_test.c:1087:16: identifier ii
if_test.c:1087:19: punctuator <
if_test.c:1087:21: constant 10
if_test.c:1087:23: punctuator ;
if_test.c:1087:25: identifier ii
if_test.c:1087:27: punctuator ++
if_test.c:1087:29: punctuator )
if_test.c:1088:5: keyword if
if_test.c:1088:8: punctuator (
if_test.c:1088:9: identifier array2_check
if_test.c:1088:21: punctuator [
if_test.c:1088:22: identifier ii
if_test.c:1088:24: punctuator ]
if_test.c:1088:26: punctuator !=
if_test.c:1088:29: identifier array2
if_test.c:1088:35: punctuator [
if_test.c:1088:36: identifier ii
if_test.c:1088:38: punctuator ]
if_test.c:1088:39: punctuator )
if_test.c:1089:7: keyword return
if_test.c:1089:14: constant 3
if_test.c:1089:15: punctuator ;
if_test.c:1091:3: identifier x
if_test.c:1091:5: punctuator =
if_test.c:1091:7: identifier atoi
if_test.c:1091:12: punctuator (
if_test.c:1091:13: identifier argv
if_test.c:1091:17: punctuator [
if_test.c:1091:18: constant 1
if_test.c:1091:19: punctuator ]
if_test.c:1091:20: punctuator )
if_test.c:1091:21: punctuator -
if_test.c:1091:22: constant 10
if_test.c:1091:24: punctuator ;
if_test.c:1092:3: identifier y
if_test.c:1092:5: punctuator =
if_test.c:1092:7: identifier atoi
if_test.c:1092:12: punctuator (
if_test.c:1092:13: identifier argv
if_test.c:1092:17: punctuator [
if_test.c:1092:18: constant 1
if_test.c:1092:19: punctuator ]
if_test.c:1092:20: punctuator )
if_test.c:1092:21: punctuator /
if_test.c:1092:22: constant 2
if_test.c:1092:23: punctuator ;
if_test.c:1093:3: identifier z
if_test.c:1093:5: punctuator =
if_test.c:1093:7: punctuator (
if_test.c:1093:8: identifier atoi
if_test.c:1093:13: punctuator (
if_test.c:1093:14: identifier argv
if_test.c:1093:18: punctuator [
if_test.c:1093:19: constant 1
if_test.c:1093:20: punctuator ]
if_test.c:1093:21: punctuator )
if_test.c:1093:22: punctuator )
if_test.c:1093:23: punctuator /
if_test.c:1093:24: constant 5
if_test.c:1093:25: punctuator ;
if_test.c:1095:3: keyword for
if_test.c:1095:7: punctuator (
if_test.c:1095:8: identifier ii
if_test.c:1095:11: punctuator =
if_test.c:1095:13: constant 0
if_test.c:1095:14: punctuator ;
if_test.c:1095:16: identifier ii
if_test.c:1095:19: punctuator <
if_test.c:1095:21: constant 10
if_test.c:1095:23: punctuator ;
if_test.c:1095:25: identifier ii
if_test.c:1095:27: punctuator ++
if_test.c:1095:29: punctuator )
if_test.c:1096:5: punctuator {
if_test.c:1097:7: keyword if
if_test.c:1097:10: punctuator (
if_test.c:1097:11: identifier ii
if_test.c:1097:14: punctuator %
if_test.c:1097:16: constant 2
if_test.c:1097:17: punctuator )
if_test.c:1098:2: identifier array
if_test.c:1098:7: punctuator [
if_test.c:1098:8: identifier ii
if_test.c:1098:10: punctuator ]
if_test.c:1098:12: punctuator =
if_test.c:1098:14: constant 0
if_test.c:1098:15: punctuator ;
if_test.c:1099:7: keyword else
if_test.c:1100:2: identifier array
if_test.c:1100:7: punctuator [
if_test.c:1100:8: identifier ii
if_test.c:1100:10: punctuator ]
if_test.c:1100:12: punctuator =
if_test.c:1100:14: constant 1
if_test.c:1100:15: punctuator ;
if_test.c:1101:5: punctuator }
if_test.c:1105:3: keyword for
if_test.c:1105:7: punctuator (
if_test.c:1105:8: identifier ii
if_test.c:1105:11: punctuator =
if_test.c:1105:13: constant 0
if_test.c:1105:14: punctuator ;
if_test.c:1105:16: identifier ii
if_test.c:1105:19: punctuator <
if_test.c:1105:21: constant 10
if_test.c:1105:23: punctuator ;
if_test.c:1105:25: identifier ii
if_test.c:1105:27: punctuator ++
if_test.c:1105:29: punctuator )
if_test.c:1106:5: identifier array
if_test.c:1106:10: punctuator [
if_test.c:1106:11: identifier ii
if_test.c:1106:13: punctuator ]
if_test.c:1106:15: punctuator =
if_test.c:1106:17: constant 10
if_test.c:1106:19: punctuator ;
if_test.c:1109:3: keyword if
if_test.c:1109:6: punctuator (
if_test.c:1109:7: identifier array
if_test.c:1109:12: punctuator [
if_test.c:1109:13: identifier x
if_test.c:1109:14: punctuator :
if_test.c:1109:15: identifier y
if_test.c:1109:16: punctuator :
if_test.c:1109:17: identifier z
if_test.c:1109:18: punctuator ]
if_test.c:1109:20: punctuator !=
if_test.c:1109:23: constant 9
if_test.c:1109:24: punctuator )
if_test.c:1110:5: identifier array2
if_test.c:1110:11: punctuator [
if_test.c:1110:12: punctuator :
if_test.c:1110:13: punctuator ]
if_test.c:1110:15: punctuator =
if_test.c:1110:17: constant 5
if_test.c:1110:18: punctuator ;
if_test.c:1111:3: keyword else
if_test.c:1112:5: identifier array2
if_test.c:1112:11: punctuator [
if_test.c:1112:12: punctuator :
if_test.c:1112:13: punctuator ]
if_test.c:1112:15: punctuator =
if_test.c:1112:17: constant 10
if_test.c:1112:19: punctuator ;
if_test.c:1114:3: keyword for
if_test.c:1114:7: punctuator (
if_test.c:1114:8: identifier ii
if_test.c:1114:11: punctuator =
if_test.c:1114:13: identifier x
if_test.c:1114:14: punctuator ;
if_test.c:1114:16: identifier ii
if_test.c:1114:19: punctuator <
if_test.c:1114:21: punctuator (
if_test.c:1114:22: identifier x
if_test.c:1114:23: punctuator +
if_test.c:1114:24: identifier y
if_test.c:1114:25: punctuator )
if_test.c:1114:26: punctuator ;
if_test.c:1114:28: identifier ii
if_test.c:1114:31: punctuator +=
if_test.c:1114:34: identifier z
if_test.c:1114:35: punctuator )
if_test.c:1115:5: punctuator {
if_test.c:1116:7: keyword if
if_test.c:1116:10: punctuator (
if_test.c:1116:11: identifier array
if_test.c:1116:16: punctuator [
if_test.c:1116:17: identifier ii
if_test.c:1116:19: punctuator ]
if_test.c:1116:21: punctuator !=
if_test.c:1116:24: constant 9
if_test.c:1116:25: punctuator )
if_test.c:1117:2: identifier array2_check
if_test.c:1117:14: punctuator [
if_test.c:1117:15: identifier ii
if_test.c:1117:17: punctuator ]
if_test.c:1117:19: punctuator =
if_test.c:1117:21: constant 5
if_test.c:1117:22: punctuator ;
if_test.c:1118:7: keyword else
if_test.c:1119:2: identifier array2_check
if_test.c:1119:14: punctuator [
if_test.c:1119:15: identifier ii
if_test.c:1119:17: punctuator ]
if_test.c:1119:19: punctuator =
if_test.c:1119:21: constant 10
if_test.c:1119:23: punctuator ;
if_test.c:1120:5: punctuator }
if_test.c:1122:3: keyword for
if_test.c:1122:7: punctuator (
if_test.c:1122:8: identifier ii
if_test.c:1122:11: punctuator =
if_test.c:1122:13: constant 0
if_test.c:1122:14: punctuator ;
if_test.c:1122:16: identifier ii
if_test.c:1122:19: punctuator <
if_test.c:1122:21: constant 10
if_test.c:1122:23: punctuator ;
if_test.c:1122:25: identifier ii
if_test.c:1122:27: punctuator ++
if_test.c:1122:29: punctuator )
if_test.c:1123:5: keyword if
if_test.c:1123:8: punctuator (
if_test.c:1123:9: identifier array2_check
if_test.c:1123:21: punctuator [
if_test.c:1123:22: identifier ii
if_test.c:1123:24: punctuator ]
if_test.c:1123:26: punctuator !=
if_test.c:1123:29: identifier array2
if_test.c:1123:35: punctuator [
if_test.c:1123:36: identifier ii
if_test.c:1123:38: punctuator ]
if_test.c:1123:39: punctuator )
if_test.c:1124:7: keyword return
if_test.c:1124:14: constant 4
if_test.c:1124:15: punctuator ;
if_test.c:1126:3: keyword for
if_test.c:1126:7: punctuator (
if_test.c:1126:8: identifier ii
if_test.c:1126:11: punctuator =
if_test.c:1126:13: constant 0
if_test.c:1126:14: punctuator ;
if_test.c:1126:16: identifier ii
if_test.c:1126:19: punctuator <
if_test.c:1126:21: constant 10
if_test.c:1126:23: punctuator ;
if_test.c:1126:25: identifier ii
if_test.c:1126:27: punctuator ++
if_test.c:1126:29: punctuator )
if_test.c:1126:31: punctuator {
if_test.c:1127:5: identifier array2
if_test.c:1127:11: punctuator [
if_test.c:1127:12: identifier ii
if_test.c:1127:14: punctuator ]
if_test.c:1127:16: punctuator =
if_test.c:1127:18: constant 10
if_test.c:1127:20: punctuator ;
if_test.c:1128:5: identifier array2_check
if_test.c:1128:17: punctuator [
if_test.c:1128:18: identifier ii
if_test.c:1128:20: punctuator ]
if_test.c:1128:22: punctuator =
if_test.c:1128:24: constant 10
if_test.c:1128:26: punctuator ;
if_test.c:1129:3: punctuator }
if_test.c:1132:3: keyword if
if_test.c:1132:6: punctuator (
if_test.c:1132:7: identifier array
if_test.c:1132:12: punctuator [
if_test.c:1132:13: identifier atoi
if_test.c:1132:17: punctuator (
if_test.c:1132:18: identifier argv
if_test.c:1132:22: punctuator [
if_test.c:1132:23: constant 1
if_test.c:1132:24: punctuator ]
if_test.c:1132:25: punctuator )
if_test.c:1132:26: punctuator -
if_test.c:1132:27: constant 10
if_test.c:1132:29: punctuator :
if_test.c:1132:30: identifier atoi
if_test.c:1132:34: punctuator (
if_test.c:1132:35: identifier argv
if_test.c:1132:39: punctuator [
if_test.c:1132:40: constant 1
if_test.c:1132:41: punctuator ]
if_test.c:1132:42: punctuator )
if_test.c:1132:43: punctuator /
if_test.c:1132:44: constant 2
if_test.c:1132:45: punctuator :
if_test.c:1132:47: identifier atoi
if_test.c:1132:51: punctuator (
if_test.c:1132:52: identifier argv
if_test.c:1132:56: punctuator [
if_test.c:1132:57: constant 1
if_test.c:1132:58: punctuator ]
if_test.c:1132:59: punctuator )
if_test.c:1132:60: punctuator /
if_test.c:1132:61: constant 5
if_test.c:1132:62: punctuator ]
if_test.c:1132:63: punctuator )
if_test.c:1133:5: identifier array2
if_test.c:1133:11: punctuator [
if_test.c:1133:12: identifier atoi
if_test.c:1133:16: punctuator (
if_test.c:1133:17: identifier argv
if_test.c:1133:21: punctuator [
if_test.c:1133:22: constant 1
if_test.c:1133:23: punctuator ]
if_test.c:1133:24: punctuator )
if_test.c:1133:25: punctuator -
if_test.c:1133:26: constant 10
if_test.c:1133:28: punctuator :
if_test.c:1133:30: identifier atoi
if_test.c:1133:35: punctuator (
if_test.c:1133:36: identifier argv
if_test.c:1133:40: punctuator [
if_test.c:1133:41: constant 1
if_test.c:1133:42: punctuator ]
if_test.c:1133:43: punctuator )
if_test.c:1133:44: punctuator /
if_test.c:1133:45: constant 2
if_test.c:1133:46: punctuator :
if_test.c:1133:48: identifier atoi
if_test.c:1133:52: punctuator (
if_test.c:1133:53: identifier argv
if_test.c:1133:57: punctuator [
if_test.c:1133:58: constant 1
if_test.c:1133:59: punctuator ]
if_test.c:1133:60: punctuator )
if_test.c:1133:61: punctuator /
if_test.c:1133:62: constant 5
if_test.c:1133:63: punctuator ]
if_test.c:1133:65: punctuator =
if_test.c:1133:67: constant 5
if_test.c:1133:68: punctuator ;
if_test.c:1134:3: keyword else
if_test.c:1135:5: identifier array2
if_test.c:1135:11: punctuator [
if_test.c:1135:12: identifier atoi
if_test.c:1135:16: punctuator (
if_test.c:1135:17: identifier argv
if_test.c:1135:21: punctuator [
if_test.c:1135:22: constant 1
if_test.c:1135:23: punctuator ]
if_test.c:1135:24: punctuator )
if_test.c:1135:25: punctuator -
if_test.c:1135:26: constant 10
if_test.c:1135:28: punctuator :
if_test.c:1135:30: identifier atoi
if_test.c:1135:35: punctuator (
if_test.c:1135:36: identifier argv
if_test.c:1135:40: punctuator [
if_test.c:1135:41: constant 1
if_test.c:1135:42: punctuator ]
if_test.c:1135:43: punctuator )
if_test.c:1135:44: punctuator /
if_test.c:1135:45: constant 2
if_test.c:1135:46: punctuator :
if_test.c:1135:48: identifier atoi
if_test.c:1135:52: punctuator (
if_test.c:1135:53: identifier argv
if_test.c:1135:57: punctuator [
if_test.c:1135:58: constant 1
if_test.c:1135:59: punctuator ]
if_test.c:1135:60: punctuator )
if_test.c:1135:61: punctuator /
if_test.c:1135:62: constant 5
if_test.c:1135:63: punctuator ]
if_test.c:1135:65: punctuator =
if_test.c:1135:67: constant 10
if_test.c:1135:69: punctuator ;
if_test.c:1137:3: keyword for
if_test.c:1137:7: punctuator (
if_test.c:1137:8: identifier ii
if_test.c:1137:11: punctuator =
if_test.c:1137:13: identifier atoi
if_test.c:1137:17: punctuator (
if_test.c:1137:18: identifier argv
if_test.c:1137:22: punctuator [
if_test.c:1137:23: constant 1
if_test.c:1137:24: punctuator ]
if_test.c:1137:25: punctuator )
if_test.c:1137:26: punctuator -
if_test.c:1137:27: constant 10
if_test.c:1137:29: punctuator ;
if_test.c:1137:31: identifier ii
if_test.c:1137:34: punctuator <
if_test.c:1137:36: identifier atoi
if_test.c:1137:40: punctuator (
if_test.c:1137:41: identifier argv
if_test.c:1137:45: punctuator [
if_test.c:1137:46: constant 1
if_test.c:1137:47: punctuator ]
if_test.c:1137:48: punctuator )
if_test.c:1137:50: punctuator +
if_test.c:1137:52: punctuator (
if_test.c:1137:53: identifier atoi
if_test.c:1137:58: punctuator (
if_test.c:1137:59: identifier argv
if_test.c:1137:63: punctuator [
if_test.c:1137:64: constant 1
if_test.c:1137:65: punctuator ]
if_test.c:1137:66: punctuator )
if_test.c:1137:67: punctuator -
if_test.c:1137:68: constant 10
if_test.c:1137:70: punctuator )
if_test.c:1137:71: punctuator ;
if_test.c:1138:8: identifier ii
if_test.c:1138:11: punctuator +=
if_test.c:1138:13: identifier atoi
if_test.c:1138:17: punctuator (
if_test.c:1138:18: identifier argv
if_test.c:1138:22: punctuator [
if_test.c:1138:23: constant 1
if_test.c:1138:24: punctuator ]
if_test.c:1138:25: punctuator )
if_test.c:1138:26: punctuator /
if_test.c:1138:27: constant 5
if_test.c:1138:28: punctuator )
if_test.c:1139:5: keyword if
if_test.c:1139:8: punctuator (
if_test.c:1139:9: identifier array
if_test.c:1139:14: punctuator [
if_test.c:1139:15: identifier ii
if_test.c:1139:17: punctuator ]
if_test.c:1139:18: punctuator )
if_test.c:1140:7: identifier array2_check
if_test.c:1140:19: punctuator [
if_test.c:1140:20: identifier ii
if_test.c:1140:22: punctuator ]
if_test.c:1140:24: punctuator =
if_test.c:1140:26: constant 5
if_test.c:1140:27: punctuator ;
if_test.c:1141:5: keyword else
if_test.c:1142:7: identifier array2_check
if_test.c:1142:19: punctuator [
if_test.c:1142:20: identifier ii
if_test.c:1142:22: punctuator ]
if_test.c:1142:24: punctuator =
if_test.c:1142:26: constant 10
if_test.c:1142:28: punctuator ;
if_test.c:1144:3: keyword for
if_test.c:1144:7: punctuator (
if_test.c:1144:8: identifier ii
if_test.c:1144:11: punctuator =
if_test.c:1144:13: constant 0
if_test.c:1144:14: punctuator ;
if_test.c:1144:16: identifier ii
if_test.c:1144:19: punctuator <
if_test.c:1144:21: constant 10
if_test.c:1144:23: punctuator ;
if_test.c:1144:25: identifier ii
if_test.c:1144:27: punctuator ++
if_test.c:1144:29: punctuator )
if_test.c:1145:5: keyword if
if_test.c:1145:8: punctuator (
if_test.c:1145:9: identifier array2_check
if_test.c:1145:21: punctuator [
if_test.c:1145:22: identifier ii
if_test.c:1145:24: punctuator ]
if_test.c:1145:26: punctuator !=
if_test.c:1145:29: identifier array2
if_test.c:1145:35: punctuator [
if_test.c:1145:36: identifier ii
if_test.c:1145:38: punctuator ]
if_test.c:1145:39: punctuator )
if_test.c:1145:41: punctuator {
if_test.c:1150:7: keyword return
if_test.c:1150:14: constant 5
if_test.c:1150:15: punctuator ;
if_test.c:1151:5: punctuator }
if_test.c:1153:3: keyword for
if_test.c:1153:7: punctuator (
if_test.c:1153:8: identifier ii
if_test.c:1153:11: punctuator =
if_test.c:1153:13: constant 0
if_test.c:1153:14: punctuator ;
if_test.c:1153:16: identifier ii
if_test.c:1153:19: punctuator <
if_test.c:1153:21: constant 10
if_test.c:1153:23: punctuator ;
if_test.c:1153:25: identifier ii
if_test.c:1153:27: punctuator ++
if_test.c:1153:29: punctuator )
if_test.c:1154:5: keyword for
if_test.c:1154:9: punctuator (
if_test.c:1154:10: identifier jj
if_test.c:1154:13: punctuator =
if_test.c:1154:15: constant 0
if_test.c:1154:16: punctuator ;
if_test.c:1154:18: identifier jj
if_test.c:1154:21: punctuator <
if_test.c:1154:23: constant 10
if_test.c:1154:25: punctuator ;
if_test.c:1154:27: identifier jj
if_test.c:1154:29: punctuator ++
if_test.c:1154:31: punctuator )
if_test.c:1155:7: identifier TwodArray
if_test.c:1155:16: punctuator [
if_test.c:1155:17: identifier ii
if_test.c:1155:19: punctuator ]
if_test.c:1155:20: punctuator [
if_test.c:1155:21: identifier jj
if_test.c:1155:23: punctuator ]
if_test.c:1155:25: punctuator =
if_test.c:1155:27: identifier atoi
if_test.c:1155:31: punctuator (
if_test.c:1155:32: identifier argv
if_test.c:1155:36: punctuator [
if_test.c:1155:37: constant 1
if_test.c:1155:38: punctuator ]
if_test.c:1155:39: punctuator )
if_test.c:1155:40: punctuator ;
if_test.c:1158:3: keyword for
if_test.c:1158:7: punctuator (
if_test.c:1158:8: identifier ii
if_test.c:1158:11: punctuator =
if_test.c:1158:13: constant 0
if_test.c:1158:14: punctuator ;
if_test.c:1158:16: identifier ii
if_test.c:1158:19: punctuator <
if_test.c:1158:21: constant 10
if_test.c:1158:23: punctuator ;
if_test.c:1158:25: identifier ii
if_test.c:1158:27: punctuator ++
if_test.c:1158:29: punctuator )
if_test.c:1159:5: keyword for
if_test.c:1159:9: punctuator (
if_test.c:1159:10: identifier ii
if_test.c:1159:13: punctuator =
if_test.c:1159:15: constant 0
if_test.c:1159:16: punctuator ;
if_test.c:1159:18: identifier ii
if_test.c:1159:21: punctuator <
if_test.c:1159:23: constant 10
if_test.c:1159:25: punctuator ;
if_test.c:1159:27: identifier ii
if_test.c:1159:29: punctuator ++
if_test.c:1159:31: punctuator )
if_test.c:1159:33: punctuator {
if_test.c:1160:7: identifier array2d
if_test.c:1160:14: punctuator [
if_test.c:1160:15: identifier ii
if_test.c:1160:17: punctuator ]
if_test.c:1160:18: punctuator [
if_test.c:1160:19: identifier jj
if_test.c:1160:21: punctuator ]
if_test.c:1160:23: punctuator =
if_test.c:1160:25: constant 10
if_test.c:1160:27: punctuator ;
if_test.c:1161:7: identifier array2d_check
if_test.c:1161:20: punctuator [
if_test.c:1161:21: identifier ii
if_test.c:1161:23: punctuator ]
if_test.c:1161:24: punctuator [
if_test.c:1161:25: identifier jj
if_test.c:1161:27: punctuator ]
if_test.c:1161:29: punctuator =
if_test.c:1161:31: constant 10
if_test.c:1161:33: punctuator ;
if_test.c:1162:5: punctuator }
if_test.c:1165:3: keyword if
if_test.c:1165:6: punctuator (
if_test.c:1165:7: identifier TwodArray
if_test.c:1165:16: punctuator [
if_test.c:1165:17: punctuator :
if_test.c:1165:18: punctuator ]
if_test.c:1165:19: punctuator [
if_test.c:1165:20: punctuator :
if_test.c:1165:21: punctuator ]
if_test.c:1165:23: punctuator !=
if_test.c:1165:26: constant 10
if_test.c:1165:28: punctuator )
if_test.c:1166:5: identifier array2d
if_test.c:1166:12: punctuator [
if_test.c:1166:13: punctuator :
if_test.c:1166:14: punctuator ]
if_test.c:1166:15: punctuator [
if_test.c:1166:16: punctuator :
if_test.c:1166:17: punctuator ]
if_test.c:1166:19: punctuator =
if_test.c:1166:21: constant 10
if_test.c:1166:23: punctuator ;
if_test.c:1167:3: keyword else
if_test.c:1168:5: identifier array2d
if_test.c:1168:12: punctuator [
if_test.c:1168:13: punctuator :
if_test.c:1168:14: punctuator ]
if_test.c:1168:15: punctuator [
if_test.c:1168:16: punctuator :
if_test.c:1168:17: punctuator ]
if_test.c:1168:19: punctuator =
if_test.c:1168:21: constant 5
if_test.c:1168:22: punctuator ;
if_test.c:1170:3: keyword for
if_test.c:1170:7: punctuator (
if_test.c:1170:8: identifier ii
if_test.c:1170:11: punctuator =
if_test.c:1170:13: constant 0
if_test.c:1170:14: punctuator ;
if_test.c:1170:16: identifier ii
if_test.c:1170:19: punctuator <
if_test.c:1170:21: constant 10
if_test.c:1170:23: punctuator ;
if_test.c:1170:25: identifier ii
if_test.c:1170:27: punctuator ++
if_test.c:1170:29: punctuator )
if_test.c:1170:31: punctuator {
if_test.c:1171:5: keyword for
if_test.c:1171:9: punctuator (
if_test.c:1171:10: identifier jj
if_test.c:1171:13: punctuator =
if_test.c:1171:15: constant 0
if_test.c:1171:16: punctuator ;
if_test.c:1171:18: identifier jj
if_test.c:1171:21: punctuator <
if_test.c:1171:23: constant 10
if_test.c:1171:25: punctuator ;
if_test.c:1171:27: identifier jj
if_test.c:1171:29: punctuator ++
if_test.c:1171:31: punctuator )
if_test.c:1171:33: punctuator {
if_test.c:1172:7: keyword if
if_test.c:1172:10: punctuator (
if_test.c:1172:11: identifier TwodArray
if_test.c:1172:20: punctuator [
if_test.c:1172:21: identifier ii
if_test.c:1172:23: punctuator ]
if_test.c:1172:24: punctuator [
if_test.c:1172:25: identifier jj
if_test.c:1172:27: punctuator ]
if_test.c:1172:29: punctuator !=
if_test.c:1172:32: constant 10
if_test.c:1172:34: punctuator )
if_test.c:1173:2: identifier array2d_check
if_test.c:1173:15: punctuator [
if_test.c:1173:16: identifier ii
if_test.c:1173:18: punctuator ]
if_test.c:1173:19: punctuator [
if_test.c:1173:20: identifier jj
if_test.c:1173:22: punctuator ]
if_test.c:1173:24: punctuator =
if_test.c:1173:26: constant 10
if_test.c:1173:28: punctuator ;
if_test.c:1174:7: keyword else
if_test.c:1175:2: identifier array2d_check
if_test.c:1175:15: punctuator [
if_test.c:1175:16: identifier ii
if_test.c:1175:18: punctuator ]
if_test.c:1175:19: punctuator [
if_test.c:1175:20: identifier jj
if_test.c:1175:22: punctuator ]
if_test.c:1175:24: punctuator =
if_test.c:1175:26: constant 5
if_test.c:1175:27: punctuator ;
if_test.c:1176:5: punctuator }
if_test.c:1177:3: punctuator }
if_test.c:1179:3: keyword for
if_test.c:1179:7: punctuator (
if_test.c:1179:8: identifier ii
if_test.c:1179:11: punctuator =
if_test.c:1179:13: constant 0
if_test.c:1179:14: punctuator ;
if_test.c:1179:16: identifier ii
if_test.c:1179:19: punctuator <
if_test.c:1179:21: constant 10
if_test.c:1179:23: punctuator ;
if_test.c:1179:25: identifier ii
if_test.c:1179:27: punctuator ++
if_test.c:1179:29: punctuator )
if_test.c:1180:5: keyword for
if_test.c:1180:9: punctuator (
if_test.c:1180:10: identifier jj
if_test.c:1180:13: punctuator =
if_test.c:1180:15: constant 0
if_test.c:1180:16: punctuator ;
if_test.c:1180:18: identifier jj
if_test.c:1180:21: punctuator <
if_test.c:1180:23: constant 10
if_test.c:1180:25: punctuator ;
if_test.c:1180:27: identifier jj
if_test.c:1180:29: punctuator ++
if_test.c:1180:31: punctuator )
if_test.c:1181:7: keyword if
if_test.c:1181:10: punctuator (
if_test.c:1181:11: identifier array2d
if_test.c:1181:18: punctuator [
if_test.c:1181:19: identifier ii
if_test.c:1181:21: punctuator ]
if_test.c:1181:22: punctuator [
if_test.c:1181:23: identifier jj
if_test.c:1181:25: punctuator ]
if_test.c:1181:27: punctuator !=
if_test.c:1181:30: identifier array2d_check
if_test.c:1181:43: punctuator [
if_test.c:1181:44: identifier ii
if_test.c:1181:46: punctuator ]
if_test.c:1181:47: punctuator [
if_test.c:1181:48: identifier jj
if_test.c:1181:50: punctuator ]
if_test.c:1181:51: punctuator )
if_test.c:1182:2: keyword return
if_test.c:1182:9: constant 6
if_test.c:1182:10: punctuator ;
if_test.c:1184:3: keyword for
if_test.c:1184:7: punctuator (
if_test.c:1184:8: identifier ii
if_test.c:1184:11: punctuator =
if_test.c:1184:13: constant 0
if_test.c:1184:14: punctuator ;
if_test.c:1184:16: identifier ii
if_test.c:1184:19: punctuator <
if_test.c:1184:21: constant 10
if_test.c:1184:23: punctuator ;
if_test.c:1184:25: identifier ii
if_test.c:1184:27: punctuator ++
if_test.c:1184:29: punctuator )
if_test.c:1185:5: keyword for
if_test.c:1185:9: punctuator (
if_test.c:1185:10: identifier jj
if_test.c:1185:13: punctuator =
if_test.c:1185:15: constant 0
if_test.c:1185:16: punctuator ;
if_test.c:1185:18: identifier jj
if_test.c:1185:21: punctuator <
if_test.c:1185:23: constant 10
if_test.c:1185:25: punctuator ;
if_test.c:1185:27: identifier jj
if_test.c:1185:29: punctuator ++
if_test.c:1185:31: punctuator )
if_test.c:1186:7: keyword for
if_test.c:1186:11: punctuator (
if_test.c:1186:12: identifier kk
if_test.c:1186:15: punctuator =
if_test.c:1186:17: constant 0
if_test.c:1186:18: punctuator ;
if_test.c:1186:20: identifier kk
if_test.c:1186:23: punctuator <
if_test.c:1186:25: constant 10
if_test.c:1186:27: punctuator ;
if_test.c:1186:29: identifier kk
if_test.c:1186:31: punctuator ++
if_test.c:1186:33: punctuator )
if_test.c:1187:2: keyword for
if_test.c:1187:6: punctuator (
if_test.c:1187:7: identifier ll
if_test.c:1187:10: punctuator =
if_test.c:1187:12: constant 0
if_test.c:1187:13: punctuator ;
if_test.c:1187:15: identifier ll
if_test.c:1187:18: punctuator <
if_test.c:1187:20: constant 10
if_test.c:1187:22: punctuator ;
if_test.c:1187:24: identifier ll
if_test.c:1187:26: punctuator ++
if_test.c:1187:28: punctuator )
if_test.c:1188:4: punctuator {
if_test.c:1189:6: identifier array4
if_test.c:1189:12: punctuator [
if_test.c:1189:13: identifier ii
if_test.c:1189:15: punctuator ]
if_test.c:1189:16: punctuator [
if_test.c:1189:17: identifier jj
if_test.c:1189:19: punctuator ]
if_test.c:1189:20: punctuator [
if_test.c:1189:21: identifier kk
if_test.c:1189:23: punctuator ]
if_test.c:1189:24: punctuator [
if_test.c:1189:25: identifier ll
if_test.c:1189:27: punctuator ]
if_test.c:1189:29: punctuator =
if_test.c:1189:31: constant 10
if_test.c:1189:33: punctuator ;
if_test.c:1190:6: identifier array4_check
if_test.c:1190:18: punctuator [
if_test.c:1190:19: identifier ii
if_test.c:1190:21: punctuator ]
if_test.c:1190:22: punctuator [
if_test.c:1190:23: identifier jj
if_test.c:1190:25: punctuator ]
if_test.c:1190:26: punctuator [
if_test.c:1190:27: identifier kk
if_test.c:1190:29: punctuator ]
if_test.c:1190:30: punctuator [
if_test.c:1190:31: identifier ll
if_test.c:1190:33: punctuator ]
if_test.c:1190:35: punctuator =
if_test.c:1190:37: constant 10
if_test.c:1190:39: punctuator ;
if_test.c:1191:4: punctuator }
if_test.c:1193:3: keyword for
if_test.c:1193:7: punctuator (
if_test.c:1193:8: identifier ii
if_test.c:1193:11: punctuator =
if_test.c:1193:13: constant 0
if_test.c:1193:14: punctuator ;
if_test.c:1193:16: identifier ii
if_test.c:1193:19: punctuator <
if_test.c:1193:21: constant 10
if_test.c:1193:23: punctuator ;
if_test.c:1193:25: identifier ii
if_test.c:1193:27: punctuator ++
if_test.c:1193:29: punctuator )
if_test.c:1194:5: keyword for
if_test.c:1194:9: punctuator (
if_test.c:1194:10: identifier jj
if_test.c:1194:13: punctuator =
if_test.c:1194:15: constant 0
if_test.c:1194:16: punctuator ;
if_test.c:1194:18: identifier jj
if_test.c:1194:21: punctuator <
if_test.c:1194:23: constant 10
if_test.c:1194:25: punctuator ;
if_test.c:1194:27: identifier jj
if_test.c:1194:29: punctuator ++
if_test.c:1194:31: punctuator )
if_test.c:1195:7: keyword for
if_test.c:1195:11: punctuator (
if_test.c:1195:12: identifier kk
if_test.c:1195:15: punctuator =
if_test.c:1195:17: constant 0
if_test.c:1195:18: punctuator ;
if_test.c:1195:20: identifier kk
if_test.c:1195:23: punctuator <
if_test.c:1195:25: constant 10
if_test.c:1195:27: punctuator ;
if_test.c:1195:29: identifier kk
if_test.c:1195:31: punctuator ++
if_test.c:1195:33: punctuator )
if_test.c:1196:2: keyword for
if_test.c:1196:6: punctuator (
if_test.c:1196:7: identifier ll
if_test.c:1196:10: punctuator =
if_test.c:1196:12: constant 0
if_test.c:1196:13: punctuator ;
if_test.c:1196:15: identifier ll
if_test.c:1196:18: punctuator <
if_test.c:1196:20: constant 10
if_test.c:1196:22: punctuator ;
if_test.c:1196:24: identifier ll
if_test.c:1196:26: punctuator ++
if_test.c:1196:28: punctuator )
if_test.c:1197:4: identifier FourDArray
if_test.c:1197:14: punctuator [
if_test.c:1197:15: identifier ii
if_test.c:1197:17: punctuator ]
if_test.c:1197:18: punctuator [
if_test.c:1197:19: identifier jj
if_test.c:1197:21: punctuator ]
if_test.c:1197:22: punctuator [
if_test.c:1197:23: identifier kk
if_test.c:1197:25: punctuator ]
if_test.c:1197:26: punctuator [
if_test.c:1197:27: identifier ll
if_test.c:1197:29: punctuator ]
if_test.c:1197:31: punctuator =
if_test.c:1197:33: identifier atoi
if_test.c:1197:37: punctuator (
if_test.c:1197:38: identifier argv
if_test.c:1197:42: punctuator [
if_test.c:1197:43: constant 1
if_test.c:1197:44: punctuator ]
if_test.c:1197:45: punctuator )
if_test.c:1197:46: punctuator ;
if_test.c:1200:3: keyword if
if_test.c:1200:6: punctuator (
if_test.c:1200:7: identifier FourDArray
if_test.c:1200:17: punctuator [
if_test.c:1200:18: punctuator :
if_test.c:1200:19: punctuator ]
if_test.c:1200:20: punctuator [
if_test.c:1200:21: punctuator :
if_test.c:1200:22: punctuator ]
if_test.c:1200:23: punctuator [
if_test.c:1200:24: punctuator :
if_test.c:1200:25: punctuator ]
if_test.c:1200:26: punctuator [
if_test.c:1200:27: punctuator :
if_test.c:1200:28: punctuator ]
if_test.c:1200:30: punctuator !=
if_test.c:1200:33: constant 10
if_test.c:1200:35: punctuator )
if_test.c:1201:5: identifier array4
if_test.c:1201:11: punctuator [
if_test.c:1201:12: punctuator :
if_test.c:1201:13: punctuator ]
if_test.c:1201:14: punctuator [
if_test.c:1201:15: punctuator :
if_test.c:1201:16: punctuator ]
if_test.c:1201:17: punctuator [
if_test.c:1201:18: punctuator :
if_test.c:1201:19: punctuator ]
if_test.c:1201:20: punctuator [
if_test.c:1201:21: punctuator :
if_test.c:1201:22: punctuator ]
if_test.c:1201:24: punctuator =
if_test.c:1201:26: constant 10
if_test.c:1201:28: punctuator ;
if_test.c:1202:3: keyword else
if_test.c:1203:5: identifier array4
if_test.c:1203:11: punctuator [
if_test.c:1203:12: punctuator :
if_test.c:1203:13: punctuator ]
if_test.c:1203:14: punctuator [
if_test.c:1203:15: punctuator :
if_test.c:1203:16: punctuator ]
if_test.c:1203:17: punctuator [
if_test.c:1203:18: punctuator :
if_test.c:1203:19: punctuator ]
if_test.c:1203:20: punctuator [
if_test.c:1203:21: punctuator :
if_test.c:1203:22: punctuator ]
if_test.c:1203:24: punctuator =
if_test.c:1203:26: constant 5
if_test.c:1203:27: punctuator ;
if_test.c:1205:3: keyword for
if_test.c:1205:7: punctuator (
if_test.c:1205:8: identifier ii
if_test.c:1205:11: punctuator =
if_test.c:1205:13: constant 0
if_test.c:1205:14: punctuator ;
if_test.c:1205:16: identifier ii
if_test.c:1205:19: punctuator <
if_test.c:1205:21: constant 10
if_test.c:1205:23: punctuator ;
if_test.c:1205:25: identifier ii
if_test.c:1205:27: punctuator ++
if_test.c:1205:29: punctuator )
if_test.c:1205:31: punctuator {
if_test.c:1206:5: keyword for
if_test.c:1206:9: punctuator (
if_test.c:1206:10: identifier jj
if_test.c:1206:13: punctuator =
if_test.c:1206:15: constant 0
if_test.c:1206:16: punctuator ;
if_test.c:1206:18: identifier jj
if_test.c:1206:21: punctuator <
if_test.c:1206:23: constant 10
if_test.c:1206:25: punctuator ;
if_test.c:1206:27: identifier jj
if_test.c:1206:29: punctuator ++
if_test.c:1206:31: punctuator )
if_test.c:1206:33: punctuator {
if_test.c:1207:7: keyword for
if_test.c:1207:11: punctuator (
if_test.c:1207:12: identifier kk
if_test.c:1207:15: punctuator =
if_test.c:1207:17: constant 0
if_test.c:1207:18: punctuator ;
if_test.c:1207:20: identifier kk
if_test.c:1207:23: punctuator <
if_test.c:1207:25: constant 10
if_test.c:1207:27: punctuator ;
if_test.c:1207:29: identifier kk
if_test.c:1207:31: punctuator ++
if_test.c:1207:33: punctuator )
if_test.c:1207:35: punctuator {
if_test.c:1208:2: keyword for
if_test.c:1208:6: punctuator (
if_test.c:1208:7: identifier ll
if_test.c:1208:10: punctuator =
if_test.c:1208:12: constant 0
if_test.c:1208:13: punctuator ;
if_test.c:1208:15: identifier ll
if_test.c:1208:18: punctuator <
if_test.c:1208:20: constant 10
if_test.c:1208:22: punctuator ;
if_test.c:1208:24: identifier ll
if_test.c:1208:26: punctuator ++
if_test.c:1208:28: punctuator )
if_test.c:1208:30: punctuator {
if_test.c:1209:4: keyword if
if_test.c:1209:7: punctuator (
if_test.c:1209:8: identifier FourDArray
if_test.c:1209:18: punctuator [
if_test.c:1209:19: identifier ii
if_test.c:1209:21: punctuator ]
if_test.c:1209:22: punctuator [
if_test.c:1209:23: identifier jj
if_test.c:1209:25: punctuator ]
if_test.c:1209:26: punctuator [
if_test.c:1209:27: identifier kk
if_test.c:1209:29: punctuator ]
if_test.c:1209:30: punctuator [
if_test.c:1209:31: identifier ll
if_test.c:1209:33: punctuator ]
if_test.c:1209:35: punctuator !=
if_test.c:1209:38: constant 10
if_test.c:1209:40: punctuator )
if_test.c:1210:6: identifier array4_check
if_test.c:1210:18: punctuator [
if_test.c:1210:19: identifier ii
if_test.c:1210:21: punctuator ]
if_test.c:1210:22: punctuator [
if_test.c:1210:23: identifier jj
if_test.c:1210:25: punctuator ]
if_test.c:1210:26: punctuator [
if_test.c:1210:27: identifier kk
if_test.c:1210:29: punctuator ]
if_test.c:1210:30: punctuator [
if_test.c:1210:31: identifier ll
if_test.c:1210:33: punctuator ]
if_test.c:1210:35: punctuator =
if_test.c:1210:37: constant 10
if_test.c:1210:39: punctuator ;
if_test.c:1211:4: keyword else
if_test.c:1212:6: identifier array4_check
if_test.c:1212:18: punctuator [
if_test.c:1212:19: identifier ii
if_test.c:1212:21: punctuator ]
if_test.c:1212:22: punctuator [
if_test.c:1212:23: identifier jj
if_test.c:1212:25: punctuator ]
if_test.c:1212:26: punctuator [
if_test.c:1212:27: identifier kk
if_test.c:1212:29: punctuator ]
if_test.c:1212:30: punctuator [
if_test.c:1212:31: identifier ll
if_test.c:1212:33: punctuator ]
if_test.c:1212:35: punctuator =
if_test.c:1212:37: constant 5
if_test.c:1212:38: punctuator ;
if_test.c:1213:2: punctuator }
if_test.c:1214:7: punctuator }
if_test.c:1215:5: punctuator }
if_test.c:1216:3: punctuator }
if_test.c:1218:3: keyword for
if_test.c:1218:7: punctuator (
if_test.c:1218:8: identifier ii
if_test.c:1218:11: punctuator =
if_test.c:1218:13: constant 0
if_test.c:1218:14: punctuator ;
if_test.c:1218:16: identifier ii
if_test.c:1218:19: punctuator <
if_test.c:1218:21: constant 10
if_test.c:1218:23: punctuator ;
if_test.c:1218:25: identifier ii
if_test.c:1218:27: punctuator ++
if_test.c:1218:29: punctuator )
if_test.c:1219:5: keyword for
if_test.c:1219:9: punctuator (
if_test.c:1219:10: identifier jj
if_test.c:1219:13: punctuator =
if_test.c:1219:15: constant 0
if_test.c:1219:16: punctuator ;
if_test.c:1219:18: identifier jj
if_test.c:1219:21: punctuator <
if_test.c:1219:23: constant 10
if_test.c:1219:25: punctuator ;
if_test.c:1219:27: identifier jj
if_test.c:1219:29: punctuator ++
if_test.c:1219:31: punctuator )
if_test.c:1220:7: keyword for
if_test.c:1220:11: punctuator (
if_test.c:1220:12: identifier kk
if_test.c:1220:15: punctuator =
if_test.c:1220:17: constant 0
if_test.c:1220:18: punctuator ;
if_test.c:1220:20: identifier kk
if_test.c:1220:23: punctuator <
if_test.c:1220:25: constant 10
if_test.c:1220:27: punctuator ;
if_test.c:1220:29: identifier kk
if_test.c:1220:31: punctuator ++
if_test.c:1220:33: punctuator )
if_test.c:1221:2: keyword for
if_test.c:1221:6: punctuator (
if_test.c:1221:7: identifier ll
if_test.c:1221:10: punctuator =
if_test.c:1221:12: constant 0
if_test.c:1221:13: punctuator ;
if_test.c:1221:15: identifier ll
if_test.c:1221:18: punctuator <
if_test.c:1221:20: constant 10
if_test.c:1221:22: punctuator ;
if_test.c:1221:24: identifier ll
if_test.c:1221:26: punctuator ++
if_test.c:1221:28: punctuator )
if_test.c:1222:4: keyword if
if_test.c:1222:7: punctuator (
if_test.c:1222:8: identifier array4_check
if_test.c:1222:20: punctuator [
if_test.c:1222:21: identifier ii
if_test.c:1222:23: punctuator ]
if_test.c:1222:24: punctuator [
if_test.c:1222:25: identifier jj
if_test.c:1222:27: punctuator ]
if_test.c:1222:28: punctuator [
if_test.c:1222:29: identifier kk
if_test.c:1222:31: punctuator ]
if_test.c:1222:32: punctuator [
if_test.c:1222:33: identifier ll
if_test.c:1222:35: punctuator ]
if_test.c:1222:37: punctuator !=
if_test.c:1222:40: identifier array4
if_test.c:1222:46: punctuator [
if_test.c:1222:47: identifier ii
if_test.c:1222:49: punctuator ]
if_test.c:1222:50: punctuator [
if_test.c:1222:51: identifier jj
if_test.c:1222:53: punctuator ]
if_test.c:1222:54: punctuator [
if_test.c:1222:55: identifier kk
if_test.c:1222:57: punctuator ]
if_test.c:1222:58: punctuator [
if_test.c:1222:59: identifier ll
if_test.c:1222:61: punctuator ]
if_test.c:1222:62: punctuator )
if_test.c:1223:6: keyword return
if_test.c:1223:13: constant 7
if_test.c:1223:14: punctuator ;
if_test.c:1225:3: keyword for
if_test.c:1225:7: punctuator (
if_test.c:1225:8: identifier ii
if_test.c:1225:11: punctuator =
if_test.c:1225:13: constant 0
if_test.c:1225:14: punctuator ;
if_test.c:1225:16: identifier ii
if_test.c:1225:19: punctuator <
if_test.c:1225:21: constant 10
if_test.c:1225:23: punctuator ;
if_test.c:1225:25: identifier ii
if_test.c:1225:27: punctuator ++
if_test.c:1225:29: punctuator )
if_test.c:1226:5: keyword for
if_test.c:1226:9: punctuator (
if_test.c:1226:10: identifier jj
if_test.c:1226:13: punctuator =
if_test.c:1226:15: constant 0
if_test.c:1226:16: punctuator ;
if_test.c:1226:18: identifier jj
if_test.c:1226:21: punctuator <
if_test.c:1226:23: constant 10
if_test.c:1226:25: punctuator ;
if_test.c:1226:27: identifier jj
if_test.c:1226:29: punctuator ++
if_test.c:1226:31: punctuator )
if_test.c:1227:7: keyword for
if_test.c:1227:11: punctuator (
if_test.c:1227:12: identifier kk
if_test.c:1227:15: punctuator =
if_test.c:1227:17: constant 0
if_test.c:1227:18: punctuator ;
if_test.c:1227:20: identifier kk
if_test.c:1227:23: punctuator <
if_test.c:1227:25: constant 10
if_test.c:1227:27: punctuator ;
if_test.c:1227:29: identifier kk
if_test.c:1227:31: punctuator ++
if_test.c:1227:33: punctuator )
if_test.c:1228:2: keyword for
if_test.c:1228:6: punctuator (
if_test.c:1228:7: identifier ll
if_test.c:1228:10: punctuator =
if_test.c:1228:12: constant 0
if_test.c:1228:13: punctuator ;
if_test.c:1228:15: identifier ll
if_test.c:1228:18: punctuator <
if_test.c:1228:20: constant 10
if_test.c:1228:22: punctuator ;
if_test.c:1228:24: identifier ll
if_test.c:1228:26: punctuator ++
if_test.c:1228:28: punctuator )
if_test.c:1229:4: punctuator {
if_test.c:1230:6: identifier array4
if_test.c:1230:12: punctuator [
if_test.c:1230:13: identifier ii
if_test.c:1230:15: punctuator ]
if_test.c:1230:16: punctuator [
if_test.c:1230:17: identifier jj
if_test.c:1230:19: punctuator ]
if_test.c:1230:20: punctuator [
if_test.c:1230:21: identifier kk
if_test.c:1230:23: punctuator ]
if_test.c:1230:24: punctuator [
if_test.c:1230:25: identifier ll
if_test.c:1230:27: punctuator ]
if_test.c:1230:29: punctuator =
if_test.c:1230:31: constant 10
if_test.c:1230:33: punctuator ;
if_test.c:1231:6: identifier array4_check
if_test.c:1231:18: punctuator [
if_test.c:1231:19: identifier ii
if_test.c:1231:21: punctuator ]
if_test.c:1231:22: punctuator [
if_test.c:1231:23: identifier jj
if_test.c:1231:25: punctuator ]
if_test.c:1231:26: punctuator [
if_test.c:1231:27: identifier kk
if_test.c:1231:29: punctuator ]
if_test.c:1231:30: punctuator [
if_test.c:1231:31: identifier ll
if_test.c:1231:33: punctuator ]
if_test.c:1231:35: punctuator =
if_test.c:1231:37: constant 10
if_test.c:1231:39: punctuator ;
if_test.c:1232:4: punctuator }
if_test.c:1234:3: keyword for
if_test.c:1234:7: punctuator (
if_test.c:1234:8: identifier ii
if_test.c:1234:11: punctuator =
if_test.c:1234:13: constant 0
if_test.c:1234:14: punctuator ;
if_test.c:1234:16: identifier ii
if_test.c:1234:19: punctuator <
if_test.c:1234:21: constant 10
if_test.c:1234:23: punctuator ;
if_test.c:1234:25: identifier ii
if_test.c:1234:27: punctuator ++
if_test.c:1234:29: punctuator )
if_test.c:1235:5: keyword for
if_test.c:1235:9: punctuator (
if_test.c:1235:10: identifier jj
if_test.c:1235:13: punctuator =
if_test.c:1235:15: constant 0
if_test.c:1235:16: punctuator ;
if_test.c:1235:18: identifier jj
if_test.c:1235:21: punctuator <
if_test.c:1235:23: constant 10
if_test.c:1235:25: punctuator ;
if_test.c:1235:27: identifier jj
if_test.c:1235:29: punctuator ++
if_test.c:1235:31: punctuator )
if_test.c:1236:7: keyword for
if_test.c:1236:11: punctuator (
if_test.c:1236:12: identifier kk
if_test.c:1236:15: punctuator =
if_test.c:1236:17: constant 0
if_test.c:1236:18: punctuator ;
if_test.c:1236:20: identifier kk
if_test.c:1236:23: punctuator <
if_test.c:1236:25: constant 10
if_test.c:1236:27: punctuator ;
if_test.c:1236:29: identifier kk
if_test.c:1236:31: punctuator ++
if_test.c:1236:33: punctuator )
if_test.c:1237:2: keyword for
if_test.c:1237:6: punctuator (
if_test.c:1237:7: identifier ll
if_test.c:1237:10: punctuator =
if_test.c:1237:12: constant 0
if_test.c:1237:13: punctuator ;
if_test.c:1237:15: identifier ll
if_test.c:1237:18: punctuator <
if_test.c:1237:20: constant 10
if_test.c:1237:22: punctuator ;
if_test.c:1237:24: identifier ll
if_test.c:1237:26: punctuator ++
if_test.c:1237:28: punctuator )
if_test.c:1238:4: identifier FourDArray
if_test.c:1238:14: punctuator [
if_test.c:1238:15: identifier ii
if_test.c:1238:17: punctuator ]
if_test.c:1238:18: punctuator [
if_test.c:1238:19: identifier jj
if_test.c:1238:21: punctuator ]
if_test.c:1238:22: punctuator [
if_test.c:1238:23: identifier kk
if_test.c:1238:25: punctuator ]
if_test.c:1238:26: punctuator [
if_test.c:1238:27: identifier ll
if_test.c:1238:29: punctuator ]
if_test.c:1238:31: punctuator =
if_test.c:1238:33: identifier atoi
if_test.c:1238:37: punctuator (
if_test.c:1238:38: identifier argv
if_test.c:1238:42: punctuator [
if_test.c:1238:43: constant 1
if_test.c:1238:44: punctuator ]
if_test.c:1238:45: punctuator )
if_test.c:1238:46: punctuator ;
if_test.c:1241:3: keyword if
if_test.c:1241:6: punctuator (
if_test.c:1241:7: identifier FourDArray
if_test.c:1241:17: punctuator [
if_test.c:1241:18: constant 0
if_test.c:1241:19: punctuator :
if_test.c:1241:20: constant 10
if_test.c:1241:22: punctuator :
if_test.c:1241:23: constant 1
if_test.c:1241:24: punctuator ]
if_test.c:1241:25: punctuator [
if_test.c:1241:26: constant 0
if_test.c:1241:27: punctuator :
if_test.c:1241:28: constant 5
if_test.c:1241:29: punctuator :
if_test.c:1241:30: constant 2
if_test.c:1241:31: punctuator ]
if_test.c:1241:32: punctuator [
if_test.c:1241:33: constant 9
if_test.c:1241:34: punctuator :
if_test.c:1241:35: constant 10
if_test.c:1241:37: punctuator :
if_test.c:1241:38: punctuator -
if_test.c:1241:39: constant 1
if_test.c:1241:40: punctuator ]
if_test.c:1241:41: punctuator [
if_test.c:1241:42: constant 0
if_test.c:1241:43: punctuator :
if_test.c:1241:44: constant 5
if_test.c:1241:45: punctuator :
if_test.c:1241:46: constant 2
if_test.c:1241:47: punctuator ]
if_test.c:1241:49: punctuator !=
if_test.c:1241:52: constant 10
if_test.c:1241:54: punctuator )
if_test.c:1242:5: identifier array4
if_test.c:1242:11: punctuator [
if_test.c:1242:12: constant 0
if_test.c:1242:13: punctuator :
if_test.c:1242:14: constant 10
if_test.c:1242:16: punctuator :
if_test.c:1242:17: constant 1
if_test.c:1242:18: punctuator ]
if_test.c:1242:19: punctuator [
if_test.c:1242:20: constant 0
if_test.c:1242:21: punctuator :
if_test.c:1242:22: constant 5
if_test.c:1242:23: punctuator :
if_test.c:1242:24: constant 2
if_test.c:1242:25: punctuator ]
if_test.c:1242:26: punctuator [
if_test.c:1242:27: constant 9
if_test.c:1242:28: punctuator :
if_test.c:1242:29: constant 10
if_test.c:1242:31: punctuator :
if_test.c:1242:32: punctuator -
if_test.c:1242:33: constant 1
if_test.c:1242:34: punctuator ]
if_test.c:1242:35: punctuator [
if_test.c:1242:36: constant 0
if_test.c:1242:37: punctuator :
if_test.c:1242:38: constant 5
if_test.c:1242:39: punctuator :
if_test.c:1242:40: constant 2
if_test.c:1242:41: punctuator ]
if_test.c:1242:43: punctuator =
if_test.c:1242:45: constant 10
if_test.c:1242:47: punctuator ;
if_test.c:1243:3: keyword else
if_test.c:1244:5: identifier array4
if_test.c:1244:11: punctuator [
if_test.c:1244:12: constant 0
if_test.c:1244:13: punctuator :
if_test.c:1244:14: constant 10
if_test.c:1244:16: punctuator :
if_test.c:1244:17: constant 1
if_test.c:1244:18: punctuator ]
if_test.c:1244:19: punctuator [
if_test.c:1244:20: constant 0
if_test.c:1244:21: punctuator :
if_test.c:1244:22: constant 5
if_test.c:1244:23: punctuator :
if_test.c:1244:24: constant 2
if_test.c:1244:25: punctuator ]
if_test.c:1244:26: punctuator [
if_test.c:1244:27: constant 9
if_test.c:1244:28: punctuator :
if_test.c:1244:29: constant 10
if_test.c:1244:31: punctuator :
if_test.c:1244:32: punctuator -
if_test.c:1244:33: constant 1
if_test.c:1244:34: punctuator ]
if_test.c:1244:35: punctuator [
if_test.c:1244:36: constant 0
if_test.c:1244:37: punctuator :
if_test.c:1244:38: constant 5
if_test.c:1244:39: punctuator :
if_test.c:1244:40: constant 2
if_test.c:1244:41: punctuator ]
if_test.c:1244:43: punctuator =
if_test.c:1244:45: constant 5
if_test.c:1244:46: punctuator ;
if_test.c:1246:3: keyword for
if_test.c:1246:7: punctuator (
if_test.c:1246:8: identifier ii
if_test.c:1246:11: punctuator =
if_test.c:1246:13: constant 0
if_test.c:1246:14: punctuator ;
if_test.c:1246:16: identifier ii
if_test.c:1246:19: punctuator <
if_test.c:1246:21: constant 10
if_test.c:1246:23: punctuator ;
if_test.c:1246:25: identifier ii
if_test.c:1246:27: punctuator ++
if_test.c:1246:29: punctuator )
if_test.c:1246:31: punctuator {
if_test.c:1247:5: keyword for
if_test.c:1247:9: punctuator (
if_test.c:1247:10: identifier jj
if_test.c:1247:13: punctuator =
if_test.c:1247:15: constant 0
if_test.c:1247:16: punctuator ;
if_test.c:1247:18: identifier jj
if_test.c:1247:21: punctuator <
if_test.c:1247:23: constant 10
if_test.c:1247:25: punctuator ;
if_test.c:1247:27: identifier jj
if_test.c:1247:30: punctuator +=
if_test.c:1247:33: constant 2
if_test.c:1247:34: punctuator )
if_test.c:1247:36: punctuator {
if_test.c:1248:7: keyword for
if_test.c:1248:11: punctuator (
if_test.c:1248:12: identifier kk
if_test.c:1248:15: punctuator =
if_test.c:1248:17: constant 9
if_test.c:1248:18: punctuator ;
if_test.c:1248:20: identifier kk
if_test.c:1248:23: punctuator >=
if_test.c:1248:26: constant 0
if_test.c:1248:27: punctuator ;
if_test.c:1248:29: identifier kk
if_test.c:1248:31: punctuator --
if_test.c:1248:33: punctuator )
if_test.c:1248:35: punctuator {
if_test.c:1249:2: keyword for
if_test.c:1249:6: punctuator (
if_test.c:1249:7: identifier ll
if_test.c:1249:10: punctuator =
if_test.c:1249:12: constant 0
if_test.c:1249:13: punctuator ;
if_test.c:1249:15: identifier ll
if_test.c:1249:18: punctuator <
if_test.c:1249:20: constant 10
if_test.c:1249:22: punctuator ;
if_test.c:1249:24: identifier ll
if_test.c:1249:27: punctuator +=
if_test.c:1249:30: constant 2
if_test.c:1249:31: punctuator )
if_test.c:1249:33: punctuator {
if_test.c:1250:4: keyword if
if_test.c:1250:7: punctuator (
if_test.c:1250:8: identifier FourDArray
if_test.c:1250:18: punctuator [
if_test.c:1250:19: identifier ii
if_test.c:1250:21: punctuator ]
if_test.c:1250:22: punctuator [
if_test.c:1250:23: identifier jj
if_test.c:1250:25: punctuator ]
if_test.c:1250:26: punctuator [
if_test.c:1250:27: identifier kk
if_test.c:1250:29: punctuator ]
if_test.c:1250:30: punctuator [
if_test.c:1250:31: identifier ll
if_test.c:1250:33: punctuator ]
if_test.c:1250:35: punctuator !=
if_test.c:1250:38: constant 10
if_test.c:1250:40: punctuator )
if_test.c:1251:6: identifier array4_check
if_test.c:1251:18: punctuator [
if_test.c:1251:19: identifier ii
if_test.c:1251:21: punctuator ]
if_test.c:1251:22: punctuator [
if_test.c:1251:23: identifier jj
if_test.c:1251:25: punctuator ]
if_test.c:1251:26: punctuator [
if_test.c:1251:27: identifier kk
if_test.c:1251:29: punctuator ]
if_test.c:1251:30: punctuator [
if_test.c:1251:31: identifier ll
if_test.c:1251:33: punctuator ]
if_test.c:1251:35: punctuator =
if_test.c:1251:37: constant 10
if_test.c:1251:39: punctuator ;
if_test.c:1252:4: keyword else
if_test.c:1253:6: identifier array4_check
if_test.c:1253:18: punctuator [
if_test.c:1253:19: identifier ii
if_test.c:1253:21: punctuator ]
if_test.c:1253:22: punctuator [
if_test.c:1253:23: identifier jj
if_test.c:1253:25: punctuator ]
if_test.c:1253:26: punctuator [
if_test.c:1253:27: identifier kk
if_test.c:1253:29: punctuator ]
if_test.c:1253:30: punctuator [
if_test.c:1253:31: identifier ll
if_test.c:1253:33: punctuator ]
if_test.c:1253:35: punctuator =
if_test.c:1253:37: constant 5
if_test.c:1253:38: punctuator ;
if_test.c:1254:2: punctuator }
if_test.c:1255:7: punctuator }
if_test.c:1256:5: punctuator }
if_test.c:1257:3: punctuator }
if_test.c:1259:3: keyword for
if_test.c:1259:7: punctuator (
if_test.c:1259:8: identifier ii
if_test.c:1259:11: punctuator =
if_test.c:1259:13: constant 0
if_test.c:1259:14: punctuator ;
if_test.c:1259:16: identifier ii
if_test.c:1259:19: punctuator <
if_test.c:1259:21: constant 10
if_test.c:1259:23: punctuator ;
if_test.c:1259:25: identifier ii
if_test.c:1259:27: punctuator ++
if_test.c:1259:29: punctuator )
if_test.c:1260:5: keyword for
if_test.c:1260:9: punctuator (
if_test.c:1260:10: identifier jj
if_test.c:1260:13: punctuator =
if_test.c:1260:15: constant 0
if_test.c:1260:16: punctuator ;
if_test.c:1260:18: identifier jj
if_test.c:1260:21: punctuator <
if_test.c:1260:23: constant 10
if_test.c:1260:25: punctuator ;
if_test.c:1260:27: identifier jj
if_test.c:1260:29: punctuator ++
if_test.c:1260:31: punctuator )
if_test.c:1261:7: keyword for
if_test.c:1261:11: punctuator (
if_test.c:1261:12: identifier kk
if_test.c:1261:15: punctuator =
if_test.c:1261:17: constant 0
if_test.c:1261:18: punctuator ;
if_test.c:1261:20: identifier kk
if_test.c:1261:23: punctuator <
if_test.c:1261:25: constant 10
if_test.c:1261:27: punctuator ;
if_test.c:1261:29: identifier kk
if_test.c:1261:31: punctuator ++
if_test.c:1261:33: punctuator )
if_test.c:1262:2: keyword for
if_test.c:1262:6: punctuator (
if_test.c:1262:7: identifier ll
if_test.c:1262:10: punctuator =
if_test.c:1262:12: constant 0
if_test.c:1262:13: punctuator ;
if_test.c:1262:15: identifier ll
if_test.c:1262:18: punctuator <
if_test.c:1262:20: constant 10
if_test.c:1262:22: punctuator ;
if_test.c:1262:24: identifier ll
if_test.c:1262:26: punctuator ++
if_test.c:1262:28: punctuator )
if_test.c:1263:4: keyword if
if_test.c:1263:7: punctuator (
if_test.c:1263:8: identifier array4_check
if_test.c:1263:20: punctuator [
if_test.c:1263:21: identifier ii
if_test.c:1263:23: punctuator ]
if_test.c:1263:24: punctuator [
if_test.c:1263:25: identifier jj
if_test.c:1263:27: punctuator ]
if_test.c:1263:28: punctuator [
if_test.c:1263:29: identifier kk
if_test.c:1263:31: punctuator ]
if_test.c:1263:32: punctuator [
if_test.c:1263:33: identifier ll
if_test.c:1263:35: punctuator ]
if_test.c:1263:37: punctuator !=
if_test.c:1263:40: identifier array4
if_test.c:1263:46: punctuator [
if_test.c:1263:47: identifier ii
if_test.c:1263:49: punctuator ]
if_test.c:1263:50: punctuator [
if_test.c:1263:51: identifier jj
if_test.c:1263:53: punctuator ]
if_test.c:1263:54: punctuator [
if_test.c:1263:55: identifier kk
if_test.c:1263:57: punctuator ]
if_test.c:1263:58: punctuator [
if_test.c:1263:59: identifier ll
if_test.c:1263:61: punctuator ]
if_test.c:1263:62: punctuator )
if_test.c:1263:64: punctuator {
if_test.c:1270:6: keyword return
if_test.c:1270:13: constant 8
if_test.c:1270:14: punctuator ;
if_test.c:1271:4: punctuator }
if_test.c:1273:3: keyword for
if_test.c:1273:7: punctuator (
if_test.c:1273:8: identifier ii
if_test.c:1273:11: punctuator =
if_test.c:1273:13: constant 0
if_test.c:1273:14: punctuator ;
if_test.c:1273:16: identifier ii
if_test.c:1273:19: punctuator <
if_test.c:1273:21: constant 10
if_test.c:1273:23: punctuator ;
if_test.c:1273:25: identifier ii
if_test.c:1273:27: punctuator ++
if_test.c:1273:29: punctuator )
if_test.c:1274:5: keyword for
if_test.c:1274:9: punctuator (
if_test.c:1274:10: identifier jj
if_test.c:1274:13: punctuator =
if_test.c:1274:15: constant 0
if_test.c:1274:16: punctuator ;
if_test.c:1274:18: identifier jj
if_test.c:1274:21: punctuator <
if_test.c:1274:23: constant 10
if_test.c:1274:25: punctuator ;
if_test.c:1274:27: identifier jj
if_test.c:1274:29: punctuator ++
if_test.c:1274:31: punctuator )
if_test.c:1275:7: keyword for
if_test.c:1275:11: punctuator (
if_test.c:1275:12: identifier kk
if_test.c:1275:15: punctuator =
if_test.c:1275:17: constant 0
if_test.c:1275:18: punctuator ;
if_test.c:1275:20: identifier kk
if_test.c:1275:23: punctuator <
if_test.c:1275:25: constant 10
if_test.c:1275:27: punctuator ;
if_test.c:1275:29: identifier kk
if_test.c:1275:31: punctuator ++
if_test.c:1275:33: punctuator )
if_test.c:1276:2: keyword for
if_test.c:1276:6: punctuator (
if_test.c:1276:7: identifier ll
if_test.c:1276:10: punctuator =
if_test.c:1276:12: constant 0
if_test.c:1276:13: punctuator ;
if_test.c:1276:15: identifier ll
if_test.c:1276:18: punctuator <
if_test.c:1276:20: constant 10
if_test.c:1276:22: punctuator ;
if_test.c:1276:24: identifier ll
if_test.c:1276:26: punctuator ++
if_test.c:1276:28: punctuator )
if_test.c:1277:4: identifier FourDArray
if_test.c:1277:14: punctuator [
if_test.c:1277:15: identifier ii
if_test.c:1277:17: punctuator ]
if_test.c:1277:18: punctuator [
if_test.c:1277:19: identifier jj
if_test.c:1277:21: punctuator ]
if_test.c:1277:22: punctuator [
if_test.c:1277:23: identifier kk
if_test.c:1277:25: punctuator ]
if_test.c:1277:26: punctuator [
if_test.c:1277:27: identifier ll
if_test.c:1277:29: punctuator ]
if_test.c:1277:31: punctuator =
if_test.c:1277:33: identifier atoi
if_test.c:1277:37: punctuator (
if_test.c:1277:38: identifier argv
if_test.c:1277:42: punctuator [
if_test.c:1277:43: constant 1
if_test.c:1277:44: punctuator ]
if_test.c:1277:45: punctuator )
if_test.c:1277:46: punctuator ;
if_test.c:1279:3: keyword for
if_test.c:1279:7: punctuator (
if_test.c:1279:8: identifier ii
if_test.c:1279:11: punctuator =
if_test.c:1279:13: constant 0
if_test.c:1279:14: punctuator ;
if_test.c:1279:16: identifier ii
if_test.c:1279:19: punctuator <
if_test.c:1279:21: constant 10
if_test.c:1279:23: punctuator ;
if_test.c:1279:25: identifier ii
if_test.c:1279:27: punctuator ++
if_test.c:1279:29: punctuator )
if_test.c:1280:5: keyword for
if_test.c:1280:9: punctuator (
if_test.c:1280:10: identifier jj
if_test.c:1280:13: punctuator =
if_test.c:1280:15: constant 0
if_test.c:1280:16: punctuator ;
if_test.c:1280:18: identifier jj
if_test.c:1280:21: punctuator <
if_test.c:1280:23: constant 10
if_test.c:1280:25: punctuator ;
if_test.c:1280:27: identifier jj
if_test.c:1280:29: punctuator ++
if_test.c:1280:31: punctuator )
if_test.c:1281:7: keyword for
if_test.c:1281:11: punctuator (
if_test.c:1281:12: identifier kk
if_test.c:1281:15: punctuator =
if_test.c:1281:17: constant 0
if_test.c:1281:18: punctuator ;
if_test.c:1281:20: identifier kk
if_test.c:1281:23: punctuator <
if_test.c:1281:25: constant 10
if_test.c:1281:27: punctuator ;
if_test.c:1281:29: identifier kk
if_test.c:1281:31: punctuator ++
if_test.c:1281:33: punctuator )
if_test.c:1282:2: keyword for
if_test.c:1282:6: punctuator (
if_test.c:1282:7: identifier ll
if_test.c:1282:10: punctuator =
if_test.c:1282:12: constant 0
if_test.c:1282:13: punctuator ;
if_test.c:1282:15: identifier ll
if_test.c:1282:18: punctuator <
if_test.c:1282:20: constant 10
if_test.c:1282:22: punctuator ;
if_test.c:1282:24: identifier ll
if_test.c:1282:26: punctuator ++
if_test.c:1282:28: punctuator )
if_test.c:1283:4: punctuator {
if_test.c:1284:6: identifier array4
if_test.c:1284:12: punctuator [
if_test.c:1284:13: identifier ii
if_test.c:1284:15: punctuator ]
if_test.c:1284:16: punctuator [
if_test.c:1284:17: identifier jj
if_test.c:1284:19: punctuator ]
if_test.c:1284:20: punctuator [
if_test.c:1284:21: identifier kk
if_test.c:1284:23: punctuator ]
if_test.c:1284:24: punctuator [
if_test.c:1284:25: identifier ll
if_test.c:1284:27: punctuator ]
if_test.c:1284:29: punctuator =
if_test.c:1284:31: constant 10
if_test.c:1284:33: punctuator ;
if_test.c:1285:6: identifier array4_check
if_test.c:1285:18: punctuator [
if_test.c:1285:19: identifier ii
if_test.c:1285:21: punctuator ]
if_test.c:1285:22: punctuator [
if_test.c:1285:23: identifier jj
if_test.c:1285:25: punctuator ]
if_test.c:1285:26: punctuator [
if_test.c:1285:27: identifier kk
if_test.c:1285:29: punctuator ]
if_test.c:1285:30: punctuator [
if_test.c:1285:31: identifier ll
if_test.c:1285:33: punctuator ]
if_test.c:1285:35: punctuator =
if_test.c:1285:37: constant 10
if_test.c:1285:39: punctuator ;
if_test.c:1286:4: punctuator }
if_test.c:1290:3: keyword if
if_test.c:1290:6: punctuator (
if_test.c:1290:7: identifier FourDArray
if_test.c:1290:17: punctuator [
if_test.c:1290:18: constant 0
if_test.c:1290:19: punctuator :
if_test.c:1290:20: constant 10
if_test.c:1290:22: punctuator :
if_test.c:1290:23: constant 1
if_test.c:1290:24: punctuator ]
if_test.c:1290:25: punctuator [
if_test.c:1290:26: constant 0
if_test.c:1290:27: punctuator :
if_test.c:1290:28: constant 5
if_test.c:1290:29: punctuator :
if_test.c:1290:30: constant 2
if_test.c:1290:31: punctuator ]
if_test.c:1290:32: punctuator [
if_test.c:1290:33: constant 9
if_test.c:1290:34: punctuator :
if_test.c:1290:35: constant 10
if_test.c:1290:37: punctuator :
if_test.c:1290:38: punctuator -
if_test.c:1290:39: constant 1
if_test.c:1290:40: punctuator ]
if_test.c:1290:41: punctuator [
if_test.c:1290:42: identifier x
if_test.c:1290:43: punctuator :
if_test.c:1290:44: identifier y
if_test.c:1290:45: punctuator :
if_test.c:1290:46: identifier z
if_test.c:1290:47: punctuator ]
if_test.c:1290:49: punctuator +
if_test.c:1291:7: identifier FourDArray
if_test.c:1291:17: punctuator [
if_test.c:1291:18: constant 0
if_test.c:1291:19: punctuator :
if_test.c:1291:20: constant 10
if_test.c:1291:22: punctuator :
if_test.c:1291:23: constant 1
if_test.c:1291:24: punctuator ]
if_test.c:1291:25: punctuator [
if_test.c:1291:26: constant 0
if_test.c:1291:27: punctuator :
if_test.c:1291:28: constant 5
if_test.c:1291:29: punctuator :
if_test.c:1291:30: constant 2
if_test.c:1291:31: punctuator ]
if_test.c:1291:32: punctuator [
if_test.c:1291:33: constant 9
if_test.c:1291:34: punctuator :
if_test.c:1291:35: constant 10
if_test.c:1291:37: punctuator :
if_test.c:1291:38: punctuator -
if_test.c:1291:39: constant 1
if_test.c:1291:40: punctuator ]
if_test.c:1291:41: punctuator [
if_test.c:1291:42: identifier x
if_test.c:1291:43: punctuator :
if_test.c:1291:44: identifier y
if_test.c:1291:45: punctuator :
if_test.c:1291:46: identifier z
if_test.c:1291:47: punctuator ]
if_test.c:1291:49: punctuator !=
if_test.c:1291:52: constant 20
if_test.c:1291:54: punctuator )
if_test.c:1292:5: identifier array4
if_test.c:1292:11: punctuator [
if_test.c:1292:12: constant 0
if_test.c:1292:13: punctuator :
if_test.c:1292:14: constant 10
if_test.c:1292:16: punctuator :
if_test.c:1292:17: constant 1
if_test.c:1292:18: punctuator ]
if_test.c:1292:19: punctuator [
if_test.c:1292:20: constant 0
if_test.c:1292:21: punctuator :
if_test.c:1292:22: constant 5
if_test.c:1292:23: punctuator :
if_test.c:1292:24: constant 2
if_test.c:1292:25: punctuator ]
if_test.c:1292:26: punctuator [
if_test.c:1292:27: constant 9
if_test.c:1292:28: punctuator :
if_test.c:1292:29: constant 10
if_test.c:1292:31: punctuator :
if_test.c:1292:32: punctuator -
if_test.c:1292:33: constant 1
if_test.c:1292:34: punctuator ]
if_test.c:1292:35: punctuator [
if_test.c:1292:36: identifier x
if_test.c:1292:37: punctuator :
if_test.c:1292:38: identifier y
if_test.c:1292:39: punctuator :
if_test.c:1292:40: identifier z
if_test.c:1292:41: punctuator ]
if_test.c:1292:43: punctuator =
if_test.c:1292:45: constant 10
if_test.c:1292:47: punctuator ;
if_test.c:1293:3: keyword else
if_test.c:1294:5: identifier array4
if_test.c:1294:11: punctuator [
if_test.c:1294:12: constant 0
if_test.c:1294:13: punctuator :
if_test.c:1294:14: constant 10
if_test.c:1294:16: punctuator ]
if_test.c:1294:17: punctuator [
if_test.c:1294:18: constant 0
if_test.c:1294:19: punctuator :
if_test.c:1294:20: constant 5
if_test.c:1294:21: punctuator :
if_test.c:1294:22: constant 2
if_test.c:1294:23: punctuator ]
if_test.c:1294:24: punctuator [
if_test.c:1294:25: constant 9
if_test.c:1294:26: punctuator :
if_test.c:1294:27: constant 10
if_test.c:1294:29: punctuator :
if_test.c:1294:30: punctuator -
if_test.c:1294:31: constant 1
if_test.c:1294:32: punctuator ]
if_test.c:1294:33: punctuator [
if_test.c:1294:34: identifier x
if_test.c:1294:35: punctuator :
if_test.c:1294:36: identifier y
if_test.c:1294:37: punctuator :
if_test.c:1294:38: identifier z
if_test.c:1294:39: punctuator ]
if_test.c:1294:41: punctuator =
if_test.c:1294:43: constant 5
if_test.c:1294:44: punctuator ;
if_test.c:1296:3: keyword for
if_test.c:1296:7: punctuator (
if_test.c:1296:8: identifier ii
if_test.c:1296:11: punctuator =
if_test.c:1296:13: constant 0
if_test.c:1296:14: punctuator ;
if_test.c:1296:16: identifier ii
if_test.c:1296:19: punctuator <
if_test.c:1296:21: constant 10
if_test.c:1296:23: punctuator ;
if_test.c:1296:25: identifier ii
if_test.c:1296:27: punctuator ++
if_test.c:1296:29: punctuator )
if_test.c:1296:31: punctuator {
if_test.c:1297:5: keyword for
if_test.c:1297:9: punctuator (
if_test.c:1297:10: identifier jj
if_test.c:1297:13: punctuator =
if_test.c:1297:15: constant 0
if_test.c:1297:16: punctuator ;
if_test.c:1297:18: identifier jj
if_test.c:1297:21: punctuator <
if_test.c:1297:23: constant 10
if_test.c:1297:25: punctuator ;
if_test.c:1297:27: identifier jj
if_test.c:1297:30: punctuator +=
if_test.c:1297:33: constant 2
if_test.c:1297:34: punctuator )
if_test.c:1297:36: punctuator {
if_test.c:1298:7: keyword for
if_test.c:1298:11: punctuator (
if_test.c:1298:12: identifier kk
if_test.c:1298:15: punctuator =
if_test.c:1298:17: constant 9
if_test.c:1298:18: punctuator ;
if_test.c:1298:20: identifier kk
if_test.c:1298:23: punctuator >=
if_test.c:1298:26: constant 0
if_test.c:1298:27: punctuator ;
if_test.c:1298:29: identifier kk
if_test.c:1298:31: punctuator --
if_test.c:1298:33: punctuator )
if_test.c:1298:35: punctuator {
if_test.c:1299:2: keyword for
if_test.c:1299:6: punctuator (
if_test.c:1299:7: identifier ll
if_test.c:1299:10: punctuator =
if_test.c:1299:12: constant 0
if_test.c:1299:13: punctuator ;
if_test.c:1299:15: identifier ll
if_test.c:1299:18: punctuator <
if_test.c:1299:20: constant 10
if_test.c:1299:22: punctuator ;
if_test.c:1299:24: identifier ll
if_test.c:1299:27: punctuator +=
if_test.c:1299:30: constant 2
if_test.c:1299:31: punctuator )
if_test.c:1299:33: punctuator {
if_test.c:1300:4: keyword if
if_test.c:1300:7: punctuator (
if_test.c:1300:8: identifier FourDArray
if_test.c:1300:18: punctuator [
if_test.c:1300:19: identifier ii
if_test.c:1300:21: punctuator ]
if_test.c:1300:22: punctuator [
if_test.c:1300:23: identifier jj
if_test.c:1300:25: punctuator ]
if_test.c:1300:26: punctuator [
if_test.c:1300:27: identifier kk
if_test.c:1300:29: punctuator ]
if_test.c:1300:30: punctuator [
if_test.c:1300:31: identifier ll
if_test.c:1300:33: punctuator ]
if_test.c:1300:35: punctuator !=
if_test.c:1300:38: constant 10
if_test.c:1300:40: punctuator )
if_test.c:1301:6: identifier array4_check
if_test.c:1301:18: punctuator [
if_test.c:1301:19: identifier ii
if_test.c:1301:21: punctuator ]
if_test.c:1301:22: punctuator [
if_test.c:1301:23: identifier jj
if_test.c:1301:25: punctuator ]
if_test.c:1301:26: punctuator [
if_test.c:1301:27: identifier kk
if_test.c:1301:29: punctuator ]
if_test.c:1301:30: punctuator [
if_test.c:1301:31: identifier ll
if_test.c:1301:33: punctuator ]
if_test.c:1301:35: punctuator =
if_test.c:1301:37: constant 10
if_test.c:1301:39: punctuator ;
if_test.c:1302:4: keyword else
if_test.c:1303:6: identifier array4_check
if_test.c:1303:18: punctuator [
if_test.c:1303:19: identifier ii
if_test.c:1303:21: punctuator ]
if_test.c:1303:22: punctuator [
if_test.c:1303:23: identifier jj
if_test.c:1303:25: punctuator ]
if_test.c:1303:26: punctuator [
if_test.c:1303:27: identifier kk
if_test.c:1303:29: punctuator ]
if_test.c:1303:30: punctuator [
if_test.c:1303:31: identifier ll
if_test.c:1303:33: punctuator ]
if_test.c:1303:35: punctuator =
if_test.c:1303:37: constant 5
if_test.c:1303:38: punctuator ;
if_test.c:1304:2: punctuator }
if_test.c:1305:7: punctuator }
if_test.c:1306:5: punctuator }
if_test.c:1307:3: punctuator }
if_test.c:1309:3: keyword for
if_test.c:1309:7: punctuator (
if_test.c:1309:8: identifier ii
if_test.c:1309:11: punctuator =
if_test.c:1309:13: constant 0
if_test.c:1309:14: punctuator ;
if_test.c:1309:16: identifier ii
if_test.c:1309:19: punctuator <
if_test.c:1309:21: constant 10
if_test.c:1309:23: punctuator ;
if_test.c:1309:25: identifier ii
if_test.c:1309:27: punctuator ++
if_test.c:1309:29: punctuator )
if_test.c:1310:5: keyword for
if_test.c:1310:9: punctuator (
if_test.c:1310:10: identifier jj
if_test.c:1310:13: punctuator =
if_test.c:1310:15: constant 0
if_test.c:1310:16: punctuator ;
if_test.c:1310:18: identifier jj
if_test.c:1310:21: punctuator <
if_test.c:1310:23: constant 10
if_test.c:1310:25: punctuator ;
if_test.c:1310:27: identifier jj
if_test.c:1310:29: punctuator ++
if_test.c:1310:31: punctuator )
if_test.c:1311:7: keyword for
if_test.c:1311:11: punctuator (
if_test.c:1311:12: identifier kk
if_test.c:1311:15: punctuator =
if_test.c:1311:17: constant 0
if_test.c:1311:18: punctuator ;
if_test.c:1311:20: identifier kk
if_test.c:1311:23: punctuator <
if_test.c:1311:25: constant 10
if_test.c:1311:27: punctuator ;
if_test.c:1311:29: identifier kk
if_test.c:1311:31: punctuator ++
if_test.c:1311:33: punctuator )
if_test.c:1312:2: keyword for
if_test.c:1312:6: punctuator (
if_test.c:1312:7: identifier ll
if_test.c:1312:10: punctuator =
if_test.c:1312:12: constant 0
if_test.c:1312:13: punctuator ;
if_test.c:1312:15: identifier ll
if_test.c:1312:18: punctuator <
if_test.c:1312:20: constant 10
if_test.c:1312:22: punctuator ;
if_test.c:1312:24: identifier ll
if_test.c:1312:26: punctuator ++
if_test.c:1312:28: punctuator )
if_test.c:1313:4: keyword if
if_test.c:1313:7: punctuator (
if_test.c:1313:8: identifier array4_check
if_test.c:1313:20: punctuator [
if_test.c:1313:21: identifier ii
if_test.c:1313:23: punctuator ]
if_test.c:1313:24: punctuator [
if_test.c:1313:25: identifier jj
if_test.c:1313:27: punctuator ]
if_test.c:1313:28: punctuator [
if_test.c:1313:29: identifier kk
if_test.c:1313:31: punctuator ]
if_test.c:1313:32: punctuator [
if_test.c:1313:33: identifier ll
if_test.c:1313:35: punctuator ]
if_test.c:1313:37: punctuator !=
if_test.c:1313:40: identifier array4
if_test.c:1313:46: punctuator [
if_test.c:1313:47: identifier ii
if_test.c:1313:49: punctuator ]
if_test.c:1313:50: punctuator [
if_test.c:1313:51: identifier jj
if_test.c:1313:53: punctuator ]
if_test.c:1313:54: punctuator [
if_test.c:1313:55: identifier kk
if_test.c:1313:57: punctuator ]
if_test.c:1313:58: punctuator [
if_test.c:1313:59: identifier ll
if_test.c:1313:61: punctuator ]
if_test.c:1313:62: punctuator )
if_test.c:1313:64: punctuator {
if_test.c:1320:6: keyword return
if_test.c:1320:13: constant 9
if_test.c:1320:14: punctuator ;
if_test.c:1321:4: punctuator }
if_test.c:1324:3: keyword return
if_test.c:1324:10: constant 0
if_test.c:1324:11: punctuator ;
if_test.c:1325:1: punctuator }
