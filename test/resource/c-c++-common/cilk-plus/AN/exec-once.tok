0
exec-once.c:1:1: keyword int
exec-once.c:1:5: identifier func
exec-once.c:1:10: punctuator (
exec-once.c:1:11: keyword int
exec-once.c:1:15: punctuator *
exec-once.c:1:16: identifier x
exec-once.c:1:17: punctuator )
exec-once.c:2:1: punctuator {
exec-once.c:3:3: keyword int
exec-once.c:3:7: identifier q
exec-once.c:3:9: punctuator =
exec-once.c:3:11: punctuator *
exec-once.c:3:12: identifier x
exec-once.c:3:13: punctuator ;
exec-once.c:4:4: identifier q
exec-once.c:4:5: punctuator ++
exec-once.c:4:7: punctuator ;
exec-once.c:5:4: punctuator *
exec-once.c:5:5: identifier x
exec-once.c:5:7: punctuator =
exec-once.c:5:9: identifier q
exec-once.c:5:10: punctuator ;
exec-once.c:9:4: keyword return
exec-once.c:9:11: punctuator *
exec-once.c:9:12: identifier x
exec-once.c:9:13: punctuator ;
exec-once.c:10:1: punctuator }
exec-once.c:11:1: keyword int
exec-once.c:11:5: identifier main
exec-once.c:11:10: punctuator (
exec-once.c:11:11: keyword void
exec-once.c:11:15: punctuator )
exec-once.c:12:1: punctuator {
exec-once.c:13:3: keyword char
exec-once.c:13:8: identifier array
exec-once.c:13:13: punctuator [
exec-once.c:13:14: constant 1000
exec-once.c:13:18: punctuator ]
exec-once.c:13:19: punctuator ,
exec-once.c:13:21: identifier array2
exec-once.c:13:27: punctuator [
exec-once.c:13:28: constant 1000
exec-once.c:13:32: punctuator ]
exec-once.c:13:33: punctuator ;
exec-once.c:14:3: keyword int
exec-once.c:14:7: identifier ii
exec-once.c:14:9: punctuator ,
exec-once.c:14:11: identifier d
exec-once.c:14:13: punctuator =
exec-once.c:14:15: constant 2
exec-once.c:14:16: punctuator ;
exec-once.c:16:3: keyword for
exec-once.c:16:7: punctuator (
exec-once.c:16:8: identifier ii
exec-once.c:16:11: punctuator =
exec-once.c:16:13: constant 0
exec-once.c:16:14: punctuator ;
exec-once.c:16:16: identifier ii
exec-once.c:16:19: punctuator <
exec-once.c:16:21: constant 1000
exec-once.c:16:25: punctuator ;
exec-once.c:16:27: identifier ii
exec-once.c:16:29: punctuator ++
exec-once.c:16:31: punctuator )
exec-once.c:16:33: punctuator {
exec-once.c:17:4: identifier array
exec-once.c:17:9: punctuator [
exec-once.c:17:10: identifier ii
exec-once.c:17:12: punctuator ]
exec-once.c:17:14: punctuator =
exec-once.c:17:16: constant 5
exec-once.c:17:17: punctuator ;
exec-once.c:18:4: identifier array2
exec-once.c:18:10: punctuator [
exec-once.c:18:11: identifier ii
exec-once.c:18:13: punctuator ]
exec-once.c:18:14: punctuator =
exec-once.c:18:16: constant 2
exec-once.c:18:17: punctuator ;
exec-once.c:19:3: punctuator }
exec-once.c:21:3: identifier d
exec-once.c:21:5: punctuator =
exec-once.c:21:7: identifier func
exec-once.c:21:12: punctuator (
exec-once.c:21:13: punctuator &
exec-once.c:21:14: identifier d
exec-once.c:21:15: punctuator )
exec-once.c:21:16: punctuator ;
exec-once.c:22:3: identifier array2
exec-once.c:22:9: punctuator [
exec-once.c:22:10: punctuator :
exec-once.c:22:11: punctuator ]
exec-once.c:22:13: punctuator =
exec-once.c:22:15: identifier d
exec-once.c:22:17: punctuator *
exec-once.c:22:19: identifier array
exec-once.c:22:24: punctuator [
exec-once.c:22:25: punctuator :
exec-once.c:22:26: punctuator ]
exec-once.c:22:28: punctuator +
exec-once.c:22:30: punctuator (
exec-once.c:22:31: keyword char
exec-once.c:22:35: punctuator )
exec-once.c:22:37: identifier func
exec-once.c:22:42: punctuator (
exec-once.c:22:43: punctuator &
exec-once.c:22:44: identifier d
exec-once.c:22:45: punctuator )
exec-once.c:22:46: punctuator ;
exec-once.c:27:3: keyword for
exec-once.c:27:7: punctuator (
exec-once.c:27:8: identifier ii
exec-once.c:27:11: punctuator =
exec-once.c:27:13: constant 0
exec-once.c:27:14: punctuator ;
exec-once.c:27:16: identifier ii
exec-once.c:27:19: punctuator <
exec-once.c:27:21: constant 1000
exec-once.c:27:25: punctuator ;
exec-once.c:27:27: identifier ii
exec-once.c:27:29: punctuator ++
exec-once.c:27:31: punctuator )
exec-once.c:28:5: keyword if
exec-once.c:28:8: punctuator (
exec-once.c:28:9: identifier array2
exec-once.c:28:15: punctuator [
exec-once.c:28:16: identifier ii
exec-once.c:28:18: punctuator ]
exec-once.c:28:20: punctuator !=
exec-once.c:28:23: punctuator (
exec-once.c:28:24: constant 3
exec-once.c:28:26: punctuator *
exec-once.c:28:28: constant 5
exec-once.c:28:30: punctuator +
exec-once.c:28:32: constant 4
exec-once.c:28:33: punctuator )
exec-once.c:28:34: punctuator )
exec-once.c:29:7: keyword return
exec-once.c:29:14: constant 1
exec-once.c:29:15: punctuator ;
exec-once.c:31:3: keyword return
exec-once.c:31:10: constant 0
exec-once.c:31:11: punctuator ;
exec-once.c:32:1: punctuator }
