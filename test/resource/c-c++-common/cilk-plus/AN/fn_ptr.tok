0
fn_ptr.c:4:1: keyword typedef
fn_ptr.c:4:9: keyword int
fn_ptr.c:4:13: punctuator (
fn_ptr.c:4:14: punctuator *
fn_ptr.c:4:15: identifier foo
fn_ptr.c:4:18: punctuator )
fn_ptr.c:4:19: punctuator (
fn_ptr.c:4:20: keyword int
fn_ptr.c:4:23: punctuator )
fn_ptr.c:4:24: punctuator ;
fn_ptr.c:6:1: keyword int
fn_ptr.c:6:5: identifier main
fn_ptr.c:6:9: punctuator (
fn_ptr.c:6:10: keyword void
fn_ptr.c:6:14: punctuator )
fn_ptr.c:7:1: punctuator {
fn_ptr.c:8:3: keyword int
fn_ptr.c:8:7: identifier array
fn_ptr.c:8:12: punctuator [
fn_ptr.c:8:13: constant 10
fn_ptr.c:8:15: punctuator ]
fn_ptr.c:8:16: punctuator ,
fn_ptr.c:8:18: identifier array2
fn_ptr.c:8:24: punctuator [
fn_ptr.c:8:25: constant 10
fn_ptr.c:8:27: punctuator ]
fn_ptr.c:8:28: punctuator [
fn_ptr.c:8:29: constant 10
fn_ptr.c:8:31: punctuator ]
fn_ptr.c:8:32: punctuator ;
fn_ptr.c:9:3: identifier foo
fn_ptr.c:9:7: identifier func_array
fn_ptr.c:9:17: punctuator [
fn_ptr.c:9:18: constant 10
fn_ptr.c:9:20: punctuator ]
fn_ptr.c:9:21: punctuator ;
fn_ptr.c:10:3: identifier foo
fn_ptr.c:10:7: identifier func_array2
fn_ptr.c:10:18: punctuator [
fn_ptr.c:10:19: constant 10
fn_ptr.c:10:21: punctuator ]
fn_ptr.c:10:22: punctuator [
fn_ptr.c:10:23: constant 10
fn_ptr.c:10:25: punctuator ]
fn_ptr.c:10:26: punctuator ;
fn_ptr.c:11:3: identifier foo
fn_ptr.c:11:7: punctuator *
fn_ptr.c:11:8: punctuator *
fn_ptr.c:11:9: punctuator *
fn_ptr.c:11:10: identifier func_array_ptr
fn_ptr.c:11:24: punctuator ;
fn_ptr.c:12:3: keyword int
fn_ptr.c:12:7: identifier argc
fn_ptr.c:12:12: punctuator =
fn_ptr.c:12:14: constant 5
fn_ptr.c:12:15: punctuator ;
fn_ptr.c:14:3: identifier array
fn_ptr.c:14:8: punctuator [
fn_ptr.c:14:9: punctuator :
fn_ptr.c:14:10: punctuator ]
fn_ptr.c:14:12: punctuator =
fn_ptr.c:14:14: identifier func_array
fn_ptr.c:14:24: punctuator [
fn_ptr.c:14:25: punctuator :
fn_ptr.c:14:26: punctuator ]
fn_ptr.c:14:27: punctuator (
fn_ptr.c:14:28: constant 10
fn_ptr.c:14:30: punctuator )
fn_ptr.c:14:31: punctuator ;
fn_ptr.c:15:3: identifier func_array
fn_ptr.c:15:13: punctuator [
fn_ptr.c:15:14: constant 0
fn_ptr.c:15:15: punctuator :
fn_ptr.c:15:16: constant 5
fn_ptr.c:15:17: punctuator ]
fn_ptr.c:15:18: punctuator (
fn_ptr.c:15:19: constant 10
fn_ptr.c:15:21: punctuator )
fn_ptr.c:15:22: punctuator ;
fn_ptr.c:16:3: identifier func_array2
fn_ptr.c:16:14: punctuator [
fn_ptr.c:16:15: constant 0
fn_ptr.c:16:16: punctuator :
fn_ptr.c:16:17: constant 5
fn_ptr.c:16:18: punctuator ]
fn_ptr.c:16:19: punctuator [
fn_ptr.c:16:20: punctuator :
fn_ptr.c:16:21: punctuator ]
fn_ptr.c:16:22: punctuator (
fn_ptr.c:16:23: constant 10
fn_ptr.c:16:25: punctuator )
fn_ptr.c:16:26: punctuator ;
fn_ptr.c:17:3: identifier array2
fn_ptr.c:17:9: punctuator [
fn_ptr.c:17:10: constant 0
fn_ptr.c:17:11: punctuator :
fn_ptr.c:17:12: constant 5
fn_ptr.c:17:13: punctuator ]
fn_ptr.c:17:14: punctuator [
fn_ptr.c:17:15: punctuator :
fn_ptr.c:17:16: punctuator ]
fn_ptr.c:17:18: punctuator =
fn_ptr.c:17:20: identifier func_array2
fn_ptr.c:17:31: punctuator [
fn_ptr.c:17:32: constant 0
fn_ptr.c:17:33: punctuator :
fn_ptr.c:17:34: constant 5
fn_ptr.c:17:35: punctuator ]
fn_ptr.c:17:36: punctuator [
fn_ptr.c:17:37: punctuator :
fn_ptr.c:17:38: punctuator ]
fn_ptr.c:17:39: punctuator (
fn_ptr.c:17:40: constant 10
fn_ptr.c:17:42: punctuator )
fn_ptr.c:17:43: punctuator ;
fn_ptr.c:18:3: identifier func_array_ptr
fn_ptr.c:18:17: punctuator [
fn_ptr.c:18:18: constant 0
fn_ptr.c:18:19: punctuator :
fn_ptr.c:18:20: constant 5
fn_ptr.c:18:21: punctuator ]
fn_ptr.c:18:22: punctuator [
fn_ptr.c:18:23: constant 0
fn_ptr.c:18:24: punctuator :
fn_ptr.c:18:25: constant 4
fn_ptr.c:18:26: punctuator ]
fn_ptr.c:18:27: punctuator [
fn_ptr.c:18:28: constant 0
fn_ptr.c:18:29: punctuator :
fn_ptr.c:18:30: identifier argc
fn_ptr.c:18:34: punctuator :
fn_ptr.c:18:35: constant 2
fn_ptr.c:18:36: punctuator ]
fn_ptr.c:18:37: punctuator (
fn_ptr.c:18:38: identifier argc
fn_ptr.c:18:42: punctuator )
fn_ptr.c:18:43: punctuator ;
fn_ptr.c:20:3: keyword return
fn_ptr.c:20:10: constant 0
fn_ptr.c:20:11: punctuator ;
fn_ptr.c:21:1: punctuator }
