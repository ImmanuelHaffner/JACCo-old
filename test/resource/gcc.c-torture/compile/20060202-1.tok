0
20060202-1.c:1:1: keyword typedef
20060202-1.c:1:9: keyword long
20060202-1.c:1:14: keyword unsigned
20060202-1.c:1:23: keyword int
20060202-1.c:1:27: identifier size_t
20060202-1.c:1:33: punctuator ;
20060202-1.c:2:1: keyword typedef
20060202-1.c:2:9: keyword const
20060202-1.c:2:15: keyword struct
20060202-1.c:2:22: identifier objc_selector
20060202-1.c:3:1: punctuator {
20060202-1.c:4:3: keyword void
20060202-1.c:4:8: punctuator *
20060202-1.c:4:9: identifier sel_id
20060202-1.c:4:15: punctuator ;
20060202-1.c:5:1: punctuator }
20060202-1.c:6:2: punctuator *
20060202-1.c:6:3: identifier SEL
20060202-1.c:6:6: punctuator ;
20060202-1.c:7:1: keyword typedef
20060202-1.c:7:9: keyword struct
20060202-1.c:7:16: identifier objc_object
20060202-1.c:8:1: punctuator {
20060202-1.c:9:1: punctuator }
20060202-1.c:10:2: punctuator *
20060202-1.c:10:3: identifier id
20060202-1.c:10:5: punctuator ;
20060202-1.c:11:1: keyword typedef
20060202-1.c:11:9: keyword struct
20060202-1.c:11:16: identifier objc_class
20060202-1.c:11:27: punctuator *
20060202-1.c:11:28: identifier Class
20060202-1.c:11:33: punctuator ;
20060202-1.c:12:1: keyword struct
20060202-1.c:12:8: identifier objc_class
20060202-1.c:13:1: punctuator {
20060202-1.c:14:3: keyword struct
20060202-1.c:14:10: identifier sarray
20060202-1.c:14:17: punctuator *
20060202-1.c:14:18: identifier dtable
20060202-1.c:14:24: punctuator ;
20060202-1.c:15:1: punctuator }
20060202-1.c:15:2: punctuator ;
20060202-1.c:16:1: keyword typedef
20060202-1.c:16:9: identifier size_t
20060202-1.c:16:16: identifier sidx
20060202-1.c:16:20: punctuator ;
20060202-1.c:17:1: keyword struct
20060202-1.c:17:8: identifier soffset
20060202-1.c:18:1: punctuator {
20060202-1.c:19:3: keyword unsigned
20060202-1.c:19:12: keyword int
20060202-1.c:19:16: identifier boffset
20060202-1.c:19:23: punctuator :
20060202-1.c:19:24: punctuator (
20060202-1.c:19:25: keyword sizeof
20060202-1.c:19:32: punctuator (
20060202-1.c:19:33: identifier size_t
20060202-1.c:19:39: punctuator )
20060202-1.c:19:41: punctuator *
20060202-1.c:19:43: constant 8
20060202-1.c:19:44: punctuator )
20060202-1.c:19:46: punctuator /
20060202-1.c:19:48: constant 2
20060202-1.c:19:49: punctuator ;
20060202-1.c:20:3: keyword unsigned
20060202-1.c:20:12: keyword int
20060202-1.c:20:16: identifier eoffset
20060202-1.c:20:23: punctuator :
20060202-1.c:20:24: punctuator (
20060202-1.c:20:25: keyword sizeof
20060202-1.c:20:32: punctuator (
20060202-1.c:20:33: identifier size_t
20060202-1.c:20:39: punctuator )
20060202-1.c:20:41: punctuator *
20060202-1.c:20:43: constant 8
20060202-1.c:20:44: punctuator )
20060202-1.c:20:46: punctuator /
20060202-1.c:20:48: constant 2
20060202-1.c:20:49: punctuator ;
20060202-1.c:21:1: punctuator }
20060202-1.c:21:2: punctuator ;
20060202-1.c:22:1: keyword union
20060202-1.c:22:7: identifier sofftype
20060202-1.c:23:1: punctuator {
20060202-1.c:24:3: keyword struct
20060202-1.c:24:10: identifier soffset
20060202-1.c:24:18: identifier off
20060202-1.c:24:21: punctuator ;
20060202-1.c:25:3: identifier sidx
20060202-1.c:25:8: identifier idx
20060202-1.c:25:11: punctuator ;
20060202-1.c:26:1: punctuator }
20060202-1.c:26:2: punctuator ;
20060202-1.c:27:1: keyword struct
20060202-1.c:27:8: identifier sarray
20060202-1.c:28:1: punctuator {
20060202-1.c:29:3: identifier size_t
20060202-1.c:29:10: identifier capacity
20060202-1.c:29:18: punctuator ;
20060202-1.c:30:1: punctuator }
20060202-1.c:30:2: punctuator ;
20060202-1.c:31:1: keyword static
20060202-1.c:31:8: identifier __inline__
20060202-1.c:31:19: keyword unsigned
20060202-1.c:31:28: keyword int
20060202-1.c:32:1: identifier soffset_decode
20060202-1.c:32:16: punctuator (
20060202-1.c:32:17: identifier sidx
20060202-1.c:32:22: identifier indx
20060202-1.c:32:26: punctuator )
20060202-1.c:33:1: punctuator {
20060202-1.c:34:3: keyword union
20060202-1.c:34:9: identifier sofftype
20060202-1.c:34:18: identifier x
20060202-1.c:34:19: punctuator ;
20060202-1.c:35:3: identifier x
20060202-1.c:35:4: punctuator .
20060202-1.c:35:5: identifier idx
20060202-1.c:35:9: punctuator =
20060202-1.c:35:11: identifier indx
20060202-1.c:35:15: punctuator ;
20060202-1.c:36:3: keyword return
20060202-1.c:36:10: identifier x
20060202-1.c:36:11: punctuator .
20060202-1.c:36:12: identifier off
20060202-1.c:36:15: punctuator .
20060202-1.c:36:16: identifier eoffset
20060202-1.c:36:24: punctuator +
20060202-1.c:36:26: punctuator (
20060202-1.c:36:27: identifier x
20060202-1.c:36:28: punctuator .
20060202-1.c:36:29: identifier off
20060202-1.c:36:32: punctuator .
20060202-1.c:36:33: identifier boffset
20060202-1.c:36:41: punctuator *
20060202-1.c:36:43: punctuator (
20060202-1.c:36:44: constant 1
20060202-1.c:36:46: punctuator <<
20060202-1.c:36:49: constant 5
20060202-1.c:36:50: punctuator )
20060202-1.c:36:51: punctuator )
20060202-1.c:36:52: punctuator ;
20060202-1.c:37:1: punctuator }
20060202-1.c:38:1: keyword static
20060202-1.c:38:8: identifier __inline__
20060202-1.c:38:19: keyword void
20060202-1.c:38:24: punctuator *
20060202-1.c:39:1: identifier sarray_get_safe
20060202-1.c:39:17: punctuator (
20060202-1.c:39:18: keyword struct
20060202-1.c:39:25: identifier sarray
20060202-1.c:39:32: punctuator *
20060202-1.c:39:33: identifier array
20060202-1.c:39:38: punctuator ,
20060202-1.c:39:40: identifier sidx
20060202-1.c:39:45: identifier indx
20060202-1.c:39:49: punctuator )
20060202-1.c:40:1: punctuator {
20060202-1.c:41:3: keyword if
20060202-1.c:41:6: punctuator (
20060202-1.c:41:7: identifier soffset_decode
20060202-1.c:41:22: punctuator (
20060202-1.c:41:23: identifier indx
20060202-1.c:41:27: punctuator )
20060202-1.c:41:29: punctuator <
20060202-1.c:41:31: identifier array
20060202-1.c:41:36: punctuator ->
20060202-1.c:41:38: identifier capacity
20060202-1.c:41:46: punctuator )
20060202-1.c:42:5: keyword return
20060202-1.c:42:12: punctuator (
20060202-1.c:42:13: keyword void
20060202-1.c:42:18: punctuator *
20060202-1.c:42:19: punctuator )
20060202-1.c:42:20: identifier sarray_get
20060202-1.c:42:31: punctuator (
20060202-1.c:42:32: identifier array
20060202-1.c:42:37: punctuator ,
20060202-1.c:42:39: identifier indx
20060202-1.c:42:43: punctuator )
20060202-1.c:42:44: punctuator ;
20060202-1.c:43:1: punctuator }
20060202-1.c:44:1: keyword void
20060202-1.c:44:6: punctuator *
20060202-1.c:45:1: identifier get_imp
20060202-1.c:45:9: punctuator (
20060202-1.c:45:10: identifier Class
20060202-1.c:45:16: identifier class
20060202-1.c:45:21: punctuator ,
20060202-1.c:45:23: identifier SEL
20060202-1.c:45:27: identifier sel
20060202-1.c:45:30: punctuator )
20060202-1.c:46:1: punctuator {
20060202-1.c:47:3: keyword void
20060202-1.c:47:8: punctuator *
20060202-1.c:47:9: identifier res
20060202-1.c:47:13: punctuator =
20060202-1.c:47:15: identifier sarray_get_safe
20060202-1.c:47:31: punctuator (
20060202-1.c:47:32: identifier class
20060202-1.c:47:37: punctuator ->
20060202-1.c:47:39: identifier dtable
20060202-1.c:47:45: punctuator ,
20060202-1.c:47:47: punctuator (
20060202-1.c:47:48: identifier size_t
20060202-1.c:47:54: punctuator )
20060202-1.c:47:56: identifier sel
20060202-1.c:47:59: punctuator ->
20060202-1.c:47:61: identifier sel_id
20060202-1.c:47:67: punctuator )
20060202-1.c:47:68: punctuator ;
20060202-1.c:48:3: keyword if
20060202-1.c:48:6: punctuator (
20060202-1.c:48:7: identifier res
20060202-1.c:48:11: punctuator ==
20060202-1.c:48:14: constant 0
20060202-1.c:48:15: punctuator )
20060202-1.c:49:5: punctuator {
20060202-1.c:50:2: punctuator {
20060202-1.c:51:4: identifier res
20060202-1.c:51:8: punctuator =
20060202-1.c:51:10: identifier get_imp
20060202-1.c:51:18: punctuator (
20060202-1.c:51:19: identifier class
20060202-1.c:51:24: punctuator ,
20060202-1.c:51:26: identifier sel
20060202-1.c:51:29: punctuator )
20060202-1.c:51:30: punctuator ;
20060202-1.c:52:2: punctuator }
20060202-1.c:53:5: punctuator }
20060202-1.c:54:1: punctuator }
