0
950910-1.c:1:1 identifier f
950910-1.c:1:3 punctuator (
950910-1.c:1:4 keyword char
950910-1.c:1:9 punctuator *
950910-1.c:1:10 identifier p
950910-1.c:1:11 punctuator )
950910-1.c:2:1 punctuator {
950910-1.c:3:3 keyword char
950910-1.c:3:8 identifier c
950910-1.c:3:9 punctuator ;
950910-1.c:5:3 identifier c
950910-1.c:5:5 punctuator =
950910-1.c:5:7 punctuator *
950910-1.c:5:8 punctuator ++
950910-1.c:5:10 identifier p
950910-1.c:5:11 punctuator ;
950910-1.c:6:3 keyword if
950910-1.c:6:6 punctuator (
950910-1.c:6:7 identifier c
950910-1.c:6:9 punctuator !=
950910-1.c:6:12 constant ' '
950910-1.c:6:15 punctuator )
950910-1.c:7:5 keyword return
950910-1.c:7:12 constant 0
950910-1.c:7:13 punctuator ;
950910-1.c:8:3 keyword for
950910-1.c:8:7 punctuator (
950910-1.c:8:8 punctuator ;
950910-1.c:8:9 punctuator ;
950910-1.c:8:10 punctuator )
950910-1.c:9:5 punctuator {
950910-1.c:10:7 identifier c
950910-1.c:10:9 punctuator =
950910-1.c:10:11 punctuator *
950910-1.c:10:12 identifier p
950910-1.c:10:13 punctuator ;
950910-1.c:11:7 keyword if
950910-1.c:11:10 punctuator (
950910-1.c:11:11 identifier g
950910-1.c:11:13 punctuator (
950910-1.c:11:14 identifier c
950910-1.c:11:15 punctuator )
950910-1.c:11:16 punctuator )
950910-1.c:12:2 identifier p
950910-1.c:12:3 punctuator ++
950910-1.c:12:5 punctuator ;
950910-1.c:13:7 keyword else
950910-1.c:14:2 punctuator {
950910-1.c:15:4 keyword if
950910-1.c:15:7 punctuator (
950910-1.c:15:8 identifier c
950910-1.c:15:10 punctuator ==
950910-1.c:15:13 constant ' '
950910-1.c:15:16 punctuator )
950910-1.c:16:6 keyword break
950910-1.c:16:11 punctuator ;
950910-1.c:17:4 keyword else
950910-1.c:18:6 keyword return
950910-1.c:18:13 constant 0
950910-1.c:18:14 punctuator ;
950910-1.c:19:2 punctuator }
950910-1.c:20:5 punctuator }
950910-1.c:21:3 keyword return
950910-1.c:21:10 constant 1
950910-1.c:21:11 punctuator ;
950910-1.c:22:1 punctuator }
