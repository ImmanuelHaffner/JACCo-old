0
pr32482.c:1:1: keyword typedef
pr32482.c:1:9: keyword struct
pr32482.c:1:16: punctuator {
pr32482.c:1:18: keyword unsigned
pr32482.c:1:27: keyword long
pr32482.c:1:32: identifier bits
pr32482.c:1:36: punctuator [
pr32482.c:1:37: punctuator (
pr32482.c:1:38: punctuator (
pr32482.c:1:39: punctuator (
pr32482.c:1:40: punctuator (
pr32482.c:1:41: constant 1
pr32482.c:1:43: punctuator <<
pr32482.c:1:46: constant 0
pr32482.c:1:47: punctuator )
pr32482.c:1:48: punctuator )
pr32482.c:1:49: punctuator +
pr32482.c:1:50: constant 32
pr32482.c:1:53: punctuator -
pr32482.c:1:54: constant 1
pr32482.c:1:55: punctuator )
pr32482.c:1:56: punctuator /
pr32482.c:1:57: constant 32
pr32482.c:1:59: punctuator )
pr32482.c:1:60: punctuator ]
pr32482.c:1:61: punctuator ;
pr32482.c:1:63: punctuator }
pr32482.c:1:65: identifier nodemask_t
pr32482.c:1:75: punctuator ;
pr32482.c:2:1: keyword static
pr32482.c:2:8: keyword inline
pr32482.c:2:15: identifier __attribute__
pr32482.c:2:28: punctuator (
pr32482.c:2:29: punctuator (
pr32482.c:2:30: identifier always_inline
pr32482.c:2:43: punctuator )
pr32482.c:2:44: punctuator )
pr32482.c:3:1: keyword int
pr32482.c:3:5: identifier bitmap_empty
pr32482.c:3:17: punctuator (
pr32482.c:3:18: keyword const
pr32482.c:3:24: keyword unsigned
pr32482.c:3:33: keyword long
pr32482.c:3:38: punctuator *
pr32482.c:3:39: identifier src
pr32482.c:3:42: punctuator ,
pr32482.c:3:44: keyword int
pr32482.c:3:48: identifier nbits
pr32482.c:3:53: punctuator )
pr32482.c:4:1: punctuator {
pr32482.c:5:3: keyword return
pr32482.c:5:10: punctuator !
pr32482.c:5:12: punctuator (
pr32482.c:5:13: punctuator *
pr32482.c:5:14: identifier src
pr32482.c:5:18: punctuator &
pr32482.c:5:20: punctuator (
pr32482.c:5:22: punctuator (
pr32482.c:5:23: punctuator (
pr32482.c:5:24: identifier nbits
pr32482.c:5:29: punctuator )
pr32482.c:5:31: punctuator %
pr32482.c:5:33: constant 32
pr32482.c:5:35: punctuator )
pr32482.c:5:37: punctuator ?
pr32482.c:5:39: punctuator (
pr32482.c:5:40: constant 1UL
pr32482.c:5:43: punctuator <<
pr32482.c:5:45: punctuator (
pr32482.c:5:46: punctuator (
pr32482.c:5:47: identifier nbits
pr32482.c:5:52: punctuator )
pr32482.c:5:54: punctuator %
pr32482.c:5:56: constant 32
pr32482.c:5:58: punctuator )
pr32482.c:5:59: punctuator )
pr32482.c:5:60: punctuator -
pr32482.c:5:61: constant 1
pr32482.c:5:63: punctuator :
pr32482.c:5:65: punctuator ~
pr32482.c:5:66: constant 0UL
pr32482.c:5:70: punctuator )
pr32482.c:5:71: punctuator )
pr32482.c:5:72: punctuator ;
pr32482.c:6:1: punctuator }
pr32482.c:7:1: keyword static
pr32482.c:7:8: keyword inline
pr32482.c:7:15: identifier __attribute__
pr32482.c:7:28: punctuator (
pr32482.c:7:29: punctuator (
pr32482.c:7:30: identifier always_inline
pr32482.c:7:43: punctuator )
pr32482.c:7:44: punctuator )
pr32482.c:8:1: keyword int
pr32482.c:8:5: identifier __nodes_empty
pr32482.c:8:18: punctuator (
pr32482.c:8:19: keyword const
pr32482.c:8:25: identifier nodemask_t
pr32482.c:8:36: punctuator *
pr32482.c:8:37: identifier srcp
pr32482.c:8:41: punctuator ,
pr32482.c:8:43: keyword int
pr32482.c:8:47: identifier nbits
pr32482.c:8:52: punctuator )
pr32482.c:9:1: punctuator {
pr32482.c:10:2: keyword return
pr32482.c:10:9: identifier bitmap_empty
pr32482.c:10:21: punctuator (
pr32482.c:10:22: identifier srcp
pr32482.c:10:26: punctuator ->
pr32482.c:10:28: identifier bits
pr32482.c:10:32: punctuator ,
pr32482.c:10:34: identifier nbits
pr32482.c:10:39: punctuator )
pr32482.c:10:40: punctuator ;
pr32482.c:11:1: punctuator }
pr32482.c:12:1: keyword extern
pr32482.c:12:8: identifier nodemask_t
pr32482.c:12:19: identifier node_online_map
pr32482.c:12:34: punctuator ;
pr32482.c:13:1: keyword void
pr32482.c:13:6: identifier drain_array
pr32482.c:13:17: punctuator (
pr32482.c:13:18: keyword void
pr32482.c:13:22: punctuator )
pr32482.c:13:23: punctuator ;
pr32482.c:14:1: keyword void
pr32482.c:14:6: identifier drain_cpu_caches
pr32482.c:14:22: punctuator (
pr32482.c:14:23: keyword void
pr32482.c:14:27: punctuator )
pr32482.c:15:1: punctuator {
pr32482.c:16:2: keyword int
pr32482.c:16:6: identifier node
pr32482.c:16:10: punctuator ;
pr32482.c:17:2: keyword if
pr32482.c:17:5: punctuator (
pr32482.c:17:6: punctuator !
pr32482.c:17:7: identifier __nodes_empty
pr32482.c:17:20: punctuator (
pr32482.c:17:21: punctuator &
pr32482.c:17:22: punctuator (
pr32482.c:17:23: identifier node_online_map
pr32482.c:17:38: punctuator )
pr32482.c:17:39: punctuator ,
pr32482.c:17:41: punctuator (
pr32482.c:17:42: constant 1
pr32482.c:17:44: punctuator <<
pr32482.c:17:47: constant 0
pr32482.c:17:48: punctuator )
pr32482.c:17:49: punctuator )
pr32482.c:17:50: punctuator )
pr32482.c:18:6: keyword for
pr32482.c:18:10: punctuator (
pr32482.c:18:11: punctuator (
pr32482.c:18:12: punctuator (
pr32482.c:18:13: identifier node
pr32482.c:18:17: punctuator )
pr32482.c:18:18: punctuator )
pr32482.c:18:20: punctuator =
pr32482.c:18:22: constant 0
pr32482.c:18:23: punctuator ;
pr32482.c:18:25: punctuator (
pr32482.c:18:26: punctuator (
pr32482.c:18:27: identifier node
pr32482.c:18:31: punctuator )
pr32482.c:18:32: punctuator )
pr32482.c:18:34: punctuator <
pr32482.c:18:36: constant 1
pr32482.c:18:37: punctuator ;
pr32482.c:18:39: punctuator (
pr32482.c:18:40: punctuator (
pr32482.c:18:41: identifier node
pr32482.c:18:45: punctuator )
pr32482.c:18:46: punctuator )
pr32482.c:18:47: punctuator ++
pr32482.c:18:49: punctuator )
pr32482.c:19:6: punctuator {
pr32482.c:20:6: punctuator }
pr32482.c:21:2: keyword if
pr32482.c:21:5: punctuator (
pr32482.c:21:6: punctuator !
pr32482.c:21:7: identifier __nodes_empty
pr32482.c:21:20: punctuator (
pr32482.c:21:21: punctuator &
pr32482.c:21:22: punctuator (
pr32482.c:21:23: identifier node_online_map
pr32482.c:21:38: punctuator )
pr32482.c:21:39: punctuator ,
pr32482.c:21:41: punctuator (
pr32482.c:21:42: constant 1
pr32482.c:21:44: punctuator <<
pr32482.c:21:47: constant 0
pr32482.c:21:48: punctuator )
pr32482.c:21:49: punctuator )
pr32482.c:21:50: punctuator )
pr32482.c:22:6: identifier drain_array
pr32482.c:22:17: punctuator (
pr32482.c:22:18: punctuator )
pr32482.c:22:19: punctuator ;
pr32482.c:23:1: punctuator }
