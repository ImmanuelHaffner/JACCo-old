0
pr34688.c:1:1: keyword typedef
pr34688.c:1:9: keyword long
pr34688.c:1:14: keyword unsigned
pr34688.c:1:23: keyword int
pr34688.c:1:27: identifier size_t
pr34688.c:1:33: punctuator ;
pr34688.c:2:10: keyword typedef
pr34688.c:2:18: keyword struct
pr34688.c:2:25: punctuator {
pr34688.c:3:9: punctuator }
pr34688.c:4:10: identifier HashTable
pr34688.c:4:19: punctuator ;
pr34688.c:5:10: keyword typedef
pr34688.c:5:18: keyword struct
pr34688.c:5:25: identifier _zval_struct
pr34688.c:5:38: identifier zval
pr34688.c:5:42: punctuator ;
pr34688.c:6:10: keyword typedef
pr34688.c:6:18: keyword struct
pr34688.c:6:25: identifier _zend_guard
pr34688.c:6:37: punctuator {
pr34688.c:7:10: identifier HashTable
pr34688.c:7:20: punctuator *
pr34688.c:7:21: identifier ht
pr34688.c:7:23: punctuator ;
pr34688.c:8:9: punctuator }
pr34688.c:9:10: identifier zvalue_value
pr34688.c:9:22: punctuator ;
pr34688.c:10:10: keyword struct
pr34688.c:10:17: identifier _zval_struct
pr34688.c:10:30: punctuator {
pr34688.c:11:10: identifier zvalue_value
pr34688.c:11:23: identifier value
pr34688.c:11:28: punctuator ;
pr34688.c:12:9: punctuator }
pr34688.c:13:10: identifier php_output_globals
pr34688.c:13:28: punctuator ;
pr34688.c:14:10: keyword typedef
pr34688.c:14:18: keyword struct
pr34688.c:14:25: identifier _php_stream
pr34688.c:14:37: identifier php_stream
pr34688.c:14:47: punctuator ;
pr34688.c:15:10: keyword typedef
pr34688.c:15:18: keyword struct
pr34688.c:15:25: identifier _php_stream_filter
pr34688.c:15:44: identifier php_stream_filter
pr34688.c:15:61: punctuator ;
pr34688.c:16:10: keyword typedef
pr34688.c:16:18: keyword struct
pr34688.c:16:25: identifier _php_stream_bucket_brigade
pr34688.c:16:52: identifier php_stream_bucket_brigade
pr34688.c:16:77: punctuator ;
pr34688.c:17:10: keyword typedef
pr34688.c:17:18: keyword enum
pr34688.c:17:23: punctuator {
pr34688.c:18:10: identifier PSFS_ERR_FATAL
pr34688.c:18:24: punctuator ,
pr34688.c:18:26: identifier PSFS_FEED_ME
pr34688.c:18:38: punctuator ,
pr34688.c:18:40: identifier PSFS_PASS_ON
pr34688.c:18:52: punctuator ,
pr34688.c:18:54: punctuator }
pr34688.c:19:10: identifier php_stream_filter_status_t
pr34688.c:19:36: punctuator ;
pr34688.c:20:10: keyword typedef
pr34688.c:20:18: keyword struct
pr34688.c:20:25: identifier _php_stream_filter_ops
pr34688.c:20:48: punctuator {
pr34688.c:21:10: identifier php_stream_filter_status_t
pr34688.c:21:37: punctuator (
pr34688.c:21:38: punctuator *
pr34688.c:21:39: identifier filter
pr34688.c:21:45: punctuator )
pr34688.c:21:46: punctuator (
pr34688.c:21:48: identifier php_stream
pr34688.c:21:59: punctuator *
pr34688.c:21:60: identifier stream
pr34688.c:21:66: punctuator ,
pr34688.c:21:68: identifier php_stream_filter
pr34688.c:21:86: punctuator *
pr34688.c:21:87: identifier thisfilter
pr34688.c:21:97: punctuator ,
pr34688.c:21:99: identifier php_stream_bucket_brigade
pr34688.c:21:125: punctuator *
pr34688.c:21:126: identifier buckets_in
pr34688.c:21:136: punctuator ,
pr34688.c:21:138: identifier php_stream_bucket_brigade
pr34688.c:21:164: punctuator *
pr34688.c:21:165: identifier buckets_out
pr34688.c:21:176: punctuator ,
pr34688.c:21:178: identifier size_t
pr34688.c:21:185: punctuator *
pr34688.c:21:186: identifier bytes_consumed
pr34688.c:21:200: punctuator ,
pr34688.c:21:202: keyword int
pr34688.c:21:206: identifier flags
pr34688.c:21:212: punctuator )
pr34688.c:21:213: punctuator ;
pr34688.c:22:10: keyword void
pr34688.c:22:15: punctuator (
pr34688.c:22:16: punctuator *
pr34688.c:22:17: identifier dtor
pr34688.c:22:21: punctuator )
pr34688.c:22:22: punctuator (
pr34688.c:22:23: identifier php_stream_filter
pr34688.c:22:41: punctuator *
pr34688.c:22:42: identifier thisfilter
pr34688.c:22:53: punctuator )
pr34688.c:22:54: punctuator ;
pr34688.c:23:10: keyword const
pr34688.c:23:16: keyword char
pr34688.c:23:21: punctuator *
pr34688.c:23:22: identifier label
pr34688.c:23:27: punctuator ;
pr34688.c:24:9: punctuator }
pr34688.c:25:10: identifier php_stream_filter_ops
pr34688.c:25:31: punctuator ;
pr34688.c:26:10: keyword struct
pr34688.c:26:17: identifier _php_stream_filter
pr34688.c:26:36: punctuator {
pr34688.c:27:9: punctuator }
pr34688.c:27:10: punctuator ;
pr34688.c:28:10: keyword typedef
pr34688.c:28:18: keyword struct
pr34688.c:28:25: identifier _php_stream_filter_factory
pr34688.c:28:52: punctuator {
pr34688.c:29:10: identifier php_stream_filter
pr34688.c:29:28: punctuator *
pr34688.c:29:29: punctuator (
pr34688.c:29:30: punctuator *
pr34688.c:29:31: identifier create_filter
pr34688.c:29:44: punctuator )
pr34688.c:29:45: punctuator (
pr34688.c:29:46: keyword const
pr34688.c:29:52: keyword char
pr34688.c:29:57: punctuator *
pr34688.c:29:58: identifier filtername
pr34688.c:29:68: punctuator ,
pr34688.c:29:70: identifier zval
pr34688.c:29:75: punctuator *
pr34688.c:29:76: identifier filterparams
pr34688.c:29:88: punctuator ,
pr34688.c:29:90: keyword int
pr34688.c:29:94: identifier persistent
pr34688.c:29:105: punctuator )
pr34688.c:29:106: punctuator ;
pr34688.c:30:9: punctuator }
pr34688.c:31:10: identifier php_stream_filter_factory
pr34688.c:31:35: punctuator ;
pr34688.c:32:10: keyword typedef
pr34688.c:32:18: keyword enum
pr34688.c:32:23: identifier _php_conv_err_t
pr34688.c:32:39: punctuator {
pr34688.c:33:10: identifier PHP_CONV_ERR_SUCCESS
pr34688.c:33:31: punctuator =
pr34688.c:33:33: constant 0
pr34688.c:33:34: punctuator ,
pr34688.c:33:36: identifier PHP_CONV_ERR_UNKNOWN
pr34688.c:33:56: punctuator ,
pr34688.c:33:58: identifier PHP_CONV_ERR_TOO_BIG
pr34688.c:33:78: punctuator ,
pr34688.c:33:80: identifier PHP_CONV_ERR_INVALID_SEQ
pr34688.c:33:104: punctuator ,
pr34688.c:33:106: identifier PHP_CONV_ERR_UNEXPECTED_EOS
pr34688.c:33:133: punctuator ,
pr34688.c:33:135: identifier PHP_CONV_ERR_EXISTS
pr34688.c:33:154: punctuator ,
pr34688.c:33:156: identifier PHP_CONV_ERR_MORE
pr34688.c:33:173: punctuator ,
pr34688.c:33:175: identifier PHP_CONV_ERR_ALLOC
pr34688.c:33:193: punctuator ,
pr34688.c:33:195: identifier PHP_CONV_ERR_NOT_FOUND
pr34688.c:33:218: punctuator }
pr34688.c:34:10: identifier php_conv_err_t
pr34688.c:34:24: punctuator ;
pr34688.c:35:10: keyword typedef
pr34688.c:35:18: keyword struct
pr34688.c:35:25: identifier _php_conv
pr34688.c:35:35: identifier php_conv
pr34688.c:35:43: punctuator ;
pr34688.c:36:10: keyword typedef
pr34688.c:36:18: identifier php_conv_err_t
pr34688.c:36:33: punctuator (
pr34688.c:36:34: punctuator *
pr34688.c:36:35: identifier php_conv_convert_func
pr34688.c:36:56: punctuator )
pr34688.c:36:57: punctuator (
pr34688.c:36:58: identifier php_conv
pr34688.c:36:67: punctuator *
pr34688.c:36:68: punctuator ,
pr34688.c:36:70: keyword const
pr34688.c:36:76: keyword char
pr34688.c:36:81: punctuator *
pr34688.c:36:82: punctuator *
pr34688.c:36:83: punctuator ,
pr34688.c:36:85: identifier size_t
pr34688.c:36:92: punctuator *
pr34688.c:36:93: punctuator ,
pr34688.c:36:95: keyword char
pr34688.c:36:100: punctuator *
pr34688.c:36:101: punctuator *
pr34688.c:36:102: punctuator ,
pr34688.c:36:104: identifier size_t
pr34688.c:36:111: punctuator *
pr34688.c:36:112: punctuator )
pr34688.c:36:113: punctuator ;
pr34688.c:37:10: keyword struct
pr34688.c:37:17: identifier _php_conv
pr34688.c:37:27: punctuator {
pr34688.c:38:10: identifier php_conv_convert_func
pr34688.c:38:32: identifier convert_op
pr34688.c:38:42: punctuator ;
pr34688.c:39:9: punctuator }
pr34688.c:40:10: identifier php_conv_base64_decode
pr34688.c:40:32: punctuator ;
pr34688.c:41:10: keyword typedef
pr34688.c:41:18: keyword struct
pr34688.c:41:25: identifier _php_conv_qprint_decode
pr34688.c:41:49: punctuator {
pr34688.c:42:10: identifier php_conv
pr34688.c:42:19: identifier _super
pr34688.c:42:25: punctuator ;
pr34688.c:43:10: keyword const
pr34688.c:43:16: keyword char
pr34688.c:43:21: punctuator *
pr34688.c:43:22: identifier lbchars
pr34688.c:43:29: punctuator ;
pr34688.c:44:9: punctuator }
pr34688.c:45:10: identifier php_conv_qprint_decode
pr34688.c:45:32: punctuator ;
pr34688.c:46:10: keyword static
pr34688.c:46:17: identifier php_conv_err_t
pr34688.c:46:32: identifier php_conv_qprint_decode_convert
pr34688.c:46:62: punctuator (
pr34688.c:46:63: identifier php_conv_qprint_decode
pr34688.c:46:86: punctuator *
pr34688.c:46:87: identifier inst
pr34688.c:46:91: punctuator ,
pr34688.c:46:93: keyword const
pr34688.c:46:99: keyword char
pr34688.c:46:104: punctuator *
pr34688.c:46:105: punctuator *
pr34688.c:46:106: identifier in_pp
pr34688.c:46:111: punctuator ,
pr34688.c:46:113: identifier size_t
pr34688.c:46:120: punctuator *
pr34688.c:46:121: identifier in_left_p
pr34688.c:46:130: punctuator ,
pr34688.c:46:132: keyword char
pr34688.c:46:137: punctuator *
pr34688.c:46:138: punctuator *
pr34688.c:46:139: identifier out_pp
pr34688.c:46:145: punctuator ,
pr34688.c:46:147: identifier size_t
pr34688.c:46:154: punctuator *
pr34688.c:46:155: identifier out_left_p
pr34688.c:46:165: punctuator )
pr34688.c:46:167: punctuator {
pr34688.c:47:10: identifier size_t
pr34688.c:47:17: identifier icnt
pr34688.c:47:21: punctuator ,
pr34688.c:47:23: identifier ocnt
pr34688.c:47:27: punctuator ;
pr34688.c:48:10: keyword unsigned
pr34688.c:48:19: keyword char
pr34688.c:48:24: punctuator *
pr34688.c:48:25: identifier ps
pr34688.c:48:27: punctuator ,
pr34688.c:48:29: punctuator *
pr34688.c:48:30: identifier pd
pr34688.c:48:32: punctuator ;
pr34688.c:49:10: keyword unsigned
pr34688.c:49:19: keyword int
pr34688.c:49:23: identifier scan_stat
pr34688.c:49:32: punctuator ;
pr34688.c:50:10: keyword unsigned
pr34688.c:50:19: keyword int
pr34688.c:50:23: identifier lb_ptr
pr34688.c:50:29: punctuator ,
pr34688.c:50:31: identifier lb_cnt
pr34688.c:50:37: punctuator ;
pr34688.c:51:10: keyword for
pr34688.c:51:14: punctuator (
pr34688.c:51:15: punctuator ;
pr34688.c:52:8: punctuator ;
pr34688.c:53:8: punctuator )
pr34688.c:53:10: punctuator {
pr34688.c:54:10: keyword switch
pr34688.c:54:17: punctuator (
pr34688.c:54:18: identifier scan_stat
pr34688.c:54:27: punctuator )
pr34688.c:54:29: punctuator {
pr34688.c:55:10: keyword case
pr34688.c:55:15: constant 0
pr34688.c:55:16: punctuator :
pr34688.c:55:18: punctuator {
pr34688.c:56:10: keyword if
pr34688.c:56:13: punctuator (
pr34688.c:56:14: punctuator *
pr34688.c:56:15: identifier ps
pr34688.c:56:18: punctuator ==
pr34688.c:56:21: constant '='
pr34688.c:56:24: punctuator )
pr34688.c:56:26: punctuator {
pr34688.c:57:10: identifier scan_stat
pr34688.c:57:20: punctuator =
pr34688.c:57:22: constant 1
pr34688.c:57:23: punctuator ;
pr34688.c:58:9: punctuator }
pr34688.c:59:6: keyword else
pr34688.c:59:11: punctuator {
pr34688.c:60:10: keyword if
pr34688.c:60:13: punctuator (
pr34688.c:60:14: identifier ocnt
pr34688.c:60:19: punctuator <
pr34688.c:60:21: constant 1
pr34688.c:60:22: punctuator )
pr34688.c:60:24: punctuator {
pr34688.c:61:10: keyword goto
pr34688.c:61:15: identifier out
pr34688.c:61:18: punctuator ;
pr34688.c:62:9: punctuator }
pr34688.c:63:10: punctuator *
pr34688.c:63:11: punctuator (
pr34688.c:63:12: identifier pd
pr34688.c:63:14: punctuator ++
pr34688.c:63:16: punctuator )
pr34688.c:63:18: punctuator =
pr34688.c:63:20: punctuator *
pr34688.c:63:21: identifier ps
pr34688.c:63:23: punctuator ;
pr34688.c:64:10: identifier ocnt
pr34688.c:64:14: punctuator --
pr34688.c:64:16: punctuator ;
pr34688.c:65:9: punctuator }
pr34688.c:66:9: punctuator }
pr34688.c:67:7: keyword break
pr34688.c:67:12: punctuator ;
pr34688.c:68:10: keyword case
pr34688.c:68:15: constant 1
pr34688.c:68:16: punctuator :
pr34688.c:68:18: punctuator {
pr34688.c:69:10: keyword if
pr34688.c:69:13: punctuator (
pr34688.c:69:14: punctuator *
pr34688.c:69:15: identifier ps
pr34688.c:69:18: punctuator ==
pr34688.c:69:21: constant ' '
pr34688.c:69:25: punctuator ||
pr34688.c:69:28: punctuator *
pr34688.c:69:29: identifier ps
pr34688.c:69:32: punctuator ==
pr34688.c:69:35: constant '\t'
pr34688.c:69:39: punctuator )
pr34688.c:69:41: punctuator {
pr34688.c:70:9: punctuator }
pr34688.c:71:6: keyword else
pr34688.c:71:11: keyword if
pr34688.c:71:14: punctuator (
pr34688.c:71:15: punctuator !
pr34688.c:71:16: identifier inst
pr34688.c:71:20: punctuator ->
pr34688.c:71:22: identifier lbchars
pr34688.c:71:30: punctuator &&
pr34688.c:71:33: identifier lb_cnt
pr34688.c:71:40: punctuator ==
pr34688.c:71:43: constant 0
pr34688.c:71:45: punctuator &&
pr34688.c:71:48: punctuator *
pr34688.c:71:49: identifier ps
pr34688.c:71:52: punctuator ==
pr34688.c:71:55: constant '\r'
pr34688.c:71:59: punctuator )
pr34688.c:71:61: punctuator {
pr34688.c:72:10: identifier lb_cnt
pr34688.c:72:16: punctuator ++
pr34688.c:72:18: punctuator ;
pr34688.c:73:10: identifier scan_stat
pr34688.c:73:20: punctuator =
pr34688.c:73:22: constant 5
pr34688.c:73:23: punctuator ;
pr34688.c:74:10: keyword break
pr34688.c:74:15: punctuator ;
pr34688.c:75:9: punctuator }
pr34688.c:76:6: keyword else
pr34688.c:76:11: keyword if
pr34688.c:76:14: punctuator (
pr34688.c:76:15: punctuator !
pr34688.c:76:16: identifier inst
pr34688.c:76:20: punctuator ->
pr34688.c:76:22: identifier lbchars
pr34688.c:76:30: punctuator &&
pr34688.c:76:33: identifier lb_cnt
pr34688.c:76:40: punctuator ==
pr34688.c:76:43: constant 0
pr34688.c:76:45: punctuator &&
pr34688.c:76:48: punctuator *
pr34688.c:76:49: identifier ps
pr34688.c:76:52: punctuator ==
pr34688.c:76:55: constant '\n'
pr34688.c:76:59: punctuator )
pr34688.c:76:61: punctuator {
pr34688.c:77:10: identifier scan_stat
pr34688.c:77:20: punctuator =
pr34688.c:77:22: constant 0
pr34688.c:77:23: punctuator ;
pr34688.c:78:10: keyword break
pr34688.c:78:15: punctuator ;
pr34688.c:79:9: punctuator }
pr34688.c:80:9: punctuator }
pr34688.c:81:10: keyword case
pr34688.c:81:15: constant 2
pr34688.c:81:16: punctuator :
pr34688.c:81:18: punctuator {
pr34688.c:82:10: keyword if
pr34688.c:82:13: punctuator (
pr34688.c:82:14: identifier icnt
pr34688.c:82:19: punctuator <=
pr34688.c:82:22: constant 0
pr34688.c:82:23: punctuator )
pr34688.c:82:25: punctuator {
pr34688.c:83:10: keyword goto
pr34688.c:83:15: identifier out
pr34688.c:83:18: punctuator ;
pr34688.c:84:9: punctuator }
pr34688.c:85:9: punctuator }
pr34688.c:86:10: keyword case
pr34688.c:86:15: constant 3
pr34688.c:86:16: punctuator :
pr34688.c:86:18: punctuator {
pr34688.c:87:9: punctuator }
pr34688.c:88:10: keyword case
pr34688.c:88:15: constant 4
pr34688.c:88:16: punctuator :
pr34688.c:88:18: punctuator {
pr34688.c:89:10: identifier ps
pr34688.c:89:12: punctuator ++
pr34688.c:89:14: punctuator ,
pr34688.c:89:16: identifier icnt
pr34688.c:89:20: punctuator --
pr34688.c:89:22: punctuator ;
pr34688.c:90:9: punctuator }
pr34688.c:91:9: punctuator }
pr34688.c:92:9: punctuator }
pr34688.c:93:9: identifier out
pr34688.c:93:12: punctuator :
pr34688.c:93:14: punctuator *
pr34688.c:93:15: identifier in_pp
pr34688.c:93:21: punctuator =
pr34688.c:93:23: punctuator (
pr34688.c:93:24: keyword const
pr34688.c:93:30: keyword char
pr34688.c:93:35: punctuator *
pr34688.c:93:36: punctuator )
pr34688.c:93:37: identifier ps
pr34688.c:93:39: punctuator ;
pr34688.c:94:9: punctuator }
pr34688.c:95:10: keyword static
pr34688.c:95:17: identifier php_conv_err_t
pr34688.c:95:32: identifier php_conv_qprint_decode_ctor
pr34688.c:95:59: punctuator (
pr34688.c:95:60: identifier php_conv_qprint_decode
pr34688.c:95:83: punctuator *
pr34688.c:95:84: identifier inst
pr34688.c:95:88: punctuator ,
pr34688.c:95:90: keyword const
pr34688.c:95:96: keyword char
pr34688.c:95:101: punctuator *
pr34688.c:95:102: identifier lbchars
pr34688.c:95:109: punctuator ,
pr34688.c:95:111: identifier size_t
pr34688.c:95:118: identifier lbchars_len
pr34688.c:95:129: punctuator ,
pr34688.c:95:131: keyword int
pr34688.c:95:135: identifier lbchars_dup
pr34688.c:95:146: punctuator ,
pr34688.c:95:148: keyword int
pr34688.c:95:152: identifier persistent
pr34688.c:95:162: punctuator )
pr34688.c:95:164: punctuator {
pr34688.c:96:10: identifier inst
pr34688.c:96:14: punctuator ->
pr34688.c:96:16: identifier _super
pr34688.c:96:22: punctuator .
pr34688.c:96:23: identifier convert_op
pr34688.c:96:34: punctuator =
pr34688.c:96:36: punctuator (
pr34688.c:96:37: identifier php_conv_convert_func
pr34688.c:96:58: punctuator )
pr34688.c:96:60: identifier php_conv_qprint_decode_convert
pr34688.c:96:90: punctuator ;
pr34688.c:97:9: punctuator }
pr34688.c:98:10: keyword typedef
pr34688.c:98:18: keyword struct
pr34688.c:98:25: identifier _php_convert_filter
pr34688.c:98:45: punctuator {
pr34688.c:99:10: identifier php_conv
pr34688.c:99:19: punctuator *
pr34688.c:99:20: identifier cd
pr34688.c:99:22: punctuator ;
pr34688.c:100:9: punctuator }
pr34688.c:101:10: identifier php_convert_filter
pr34688.c:101:28: punctuator ;
pr34688.c:102:10: keyword static
pr34688.c:102:17: identifier php_conv
pr34688.c:102:26: punctuator *
pr34688.c:102:27: identifier php_conv_open
pr34688.c:102:40: punctuator (
pr34688.c:102:41: keyword int
pr34688.c:102:45: identifier conv_mode
pr34688.c:102:54: punctuator ,
pr34688.c:102:56: keyword const
pr34688.c:102:62: identifier HashTable
pr34688.c:102:72: punctuator *
pr34688.c:102:73: identifier options
pr34688.c:102:80: punctuator ,
pr34688.c:102:82: keyword int
pr34688.c:102:86: identifier persistent
pr34688.c:102:96: punctuator )
pr34688.c:102:98: punctuator {
pr34688.c:103:10: identifier php_conv
pr34688.c:103:19: punctuator *
pr34688.c:103:20: identifier retval
pr34688.c:103:27: punctuator =
pr34688.c:103:29: punctuator (
pr34688.c:103:30: punctuator (
pr34688.c:103:31: keyword void
pr34688.c:103:36: punctuator *
pr34688.c:103:37: punctuator )
pr34688.c:103:38: constant 0
pr34688.c:103:39: punctuator )
pr34688.c:103:40: punctuator ;
pr34688.c:104:10: keyword switch
pr34688.c:104:17: punctuator (
pr34688.c:104:18: identifier conv_mode
pr34688.c:104:27: punctuator )
pr34688.c:104:29: punctuator {
pr34688.c:105:10: keyword case
pr34688.c:105:15: constant 4
pr34688.c:105:16: punctuator :
pr34688.c:105:18: punctuator {
pr34688.c:106:10: keyword char
pr34688.c:106:15: punctuator *
pr34688.c:106:16: identifier lbchars
pr34688.c:106:24: punctuator =
pr34688.c:106:26: punctuator (
pr34688.c:106:27: punctuator (
pr34688.c:106:28: keyword void
pr34688.c:106:33: punctuator *
pr34688.c:106:34: punctuator )
pr34688.c:106:35: constant 0
pr34688.c:106:36: punctuator )
pr34688.c:106:37: punctuator ;
pr34688.c:107:10: identifier size_t
pr34688.c:107:17: identifier lbchars_len
pr34688.c:107:28: punctuator ;
pr34688.c:108:10: keyword if
pr34688.c:108:13: punctuator (
pr34688.c:108:14: identifier lbchars
pr34688.c:108:22: punctuator !=
pr34688.c:108:25: punctuator (
pr34688.c:108:26: punctuator (
pr34688.c:108:27: keyword void
pr34688.c:108:32: punctuator *
pr34688.c:108:33: punctuator )
pr34688.c:108:34: constant 0
pr34688.c:108:35: punctuator )
pr34688.c:108:36: punctuator )
pr34688.c:108:38: punctuator {
pr34688.c:109:10: keyword if
pr34688.c:109:13: punctuator (
pr34688.c:109:14: identifier php_conv_qprint_decode_ctor
pr34688.c:109:41: punctuator (
pr34688.c:109:42: punctuator (
pr34688.c:109:43: identifier php_conv_qprint_decode
pr34688.c:109:66: punctuator *
pr34688.c:109:67: punctuator )
pr34688.c:109:68: identifier retval
pr34688.c:109:74: punctuator ,
pr34688.c:109:76: identifier lbchars
pr34688.c:109:83: punctuator ,
pr34688.c:109:85: identifier lbchars_len
pr34688.c:109:96: punctuator ,
pr34688.c:109:98: constant 1
pr34688.c:109:99: punctuator ,
pr34688.c:109:101: identifier persistent
pr34688.c:109:111: punctuator )
pr34688.c:109:112: punctuator )
pr34688.c:109:114: punctuator {
pr34688.c:110:9: punctuator }
pr34688.c:111:9: punctuator }
pr34688.c:112:9: punctuator }
pr34688.c:113:9: punctuator }
pr34688.c:114:9: punctuator }
pr34688.c:115:10: keyword static
pr34688.c:115:17: keyword int
pr34688.c:115:21: identifier php_convert_filter_ctor
pr34688.c:115:44: punctuator (
pr34688.c:115:45: identifier php_convert_filter
pr34688.c:115:64: punctuator *
pr34688.c:115:65: identifier inst
pr34688.c:115:69: punctuator ,
pr34688.c:115:71: keyword int
pr34688.c:115:75: identifier conv_mode
pr34688.c:115:84: punctuator ,
pr34688.c:115:86: identifier HashTable
pr34688.c:115:96: punctuator *
pr34688.c:115:97: identifier conv_opts
pr34688.c:115:106: punctuator ,
pr34688.c:115:108: keyword const
pr34688.c:115:114: keyword char
pr34688.c:115:119: punctuator *
pr34688.c:115:120: identifier filtername
pr34688.c:115:130: punctuator ,
pr34688.c:115:132: keyword int
pr34688.c:115:136: identifier persistent
pr34688.c:115:146: punctuator )
pr34688.c:115:148: punctuator {
pr34688.c:116:10: keyword if
pr34688.c:116:13: punctuator (
pr34688.c:116:14: punctuator (
pr34688.c:116:15: identifier inst
pr34688.c:116:19: punctuator ->
pr34688.c:116:21: identifier cd
pr34688.c:116:24: punctuator =
pr34688.c:116:26: identifier php_conv_open
pr34688.c:116:39: punctuator (
pr34688.c:116:40: identifier conv_mode
pr34688.c:116:49: punctuator ,
pr34688.c:116:51: identifier conv_opts
pr34688.c:116:60: punctuator ,
pr34688.c:116:62: identifier persistent
pr34688.c:116:72: punctuator )
pr34688.c:116:73: punctuator )
pr34688.c:116:75: punctuator ==
pr34688.c:116:78: punctuator (
pr34688.c:116:79: punctuator (
pr34688.c:116:80: keyword void
pr34688.c:116:85: punctuator *
pr34688.c:116:86: punctuator )
pr34688.c:116:87: constant 0
pr34688.c:116:88: punctuator )
pr34688.c:116:89: punctuator )
pr34688.c:116:91: punctuator {
pr34688.c:117:9: punctuator }
pr34688.c:118:9: punctuator }
pr34688.c:119:10: keyword static
pr34688.c:119:17: identifier php_stream_filter_status_t
pr34688.c:119:44: identifier strfilter_convert_filter
pr34688.c:119:68: punctuator (
pr34688.c:119:70: identifier php_stream
pr34688.c:119:81: punctuator *
pr34688.c:119:82: identifier stream
pr34688.c:119:88: punctuator ,
pr34688.c:119:90: identifier php_stream_filter
pr34688.c:119:108: punctuator *
pr34688.c:119:109: identifier thisfilter
pr34688.c:119:119: punctuator ,
pr34688.c:119:121: identifier php_stream_bucket_brigade
pr34688.c:119:147: punctuator *
pr34688.c:119:148: identifier buckets_in
pr34688.c:119:158: punctuator ,
pr34688.c:119:160: identifier php_stream_bucket_brigade
pr34688.c:119:186: punctuator *
pr34688.c:119:187: identifier buckets_out
pr34688.c:119:198: punctuator ,
pr34688.c:119:200: identifier size_t
pr34688.c:119:207: punctuator *
pr34688.c:119:208: identifier bytes_consumed
pr34688.c:119:222: punctuator ,
pr34688.c:119:224: keyword int
pr34688.c:119:228: identifier flags
pr34688.c:119:234: punctuator )
pr34688.c:119:236: punctuator {
pr34688.c:120:9: punctuator }
pr34688.c:121:10: keyword static
pr34688.c:121:17: keyword void
pr34688.c:121:22: identifier strfilter_convert_dtor
pr34688.c:121:44: punctuator (
pr34688.c:121:45: identifier php_stream_filter
pr34688.c:121:63: punctuator *
pr34688.c:121:64: identifier thisfilter
pr34688.c:121:75: punctuator )
pr34688.c:121:77: punctuator {
pr34688.c:122:9: punctuator }
pr34688.c:123:10: keyword static
pr34688.c:123:17: identifier php_stream_filter_ops
pr34688.c:123:39: identifier strfilter_convert_ops
pr34688.c:123:61: punctuator =
pr34688.c:123:63: punctuator {
pr34688.c:124:10: identifier strfilter_convert_filter
pr34688.c:124:34: punctuator ,
pr34688.c:124:36: identifier strfilter_convert_dtor
pr34688.c:124:58: punctuator ,
pr34688.c:124:60: string-literal "convert.*"
pr34688.c:124:72: punctuator }
pr34688.c:124:73: punctuator ;
pr34688.c:125:10: keyword static
pr34688.c:125:17: identifier php_stream_filter
pr34688.c:125:35: punctuator *
pr34688.c:125:36: identifier strfilter_convert_create
pr34688.c:125:60: punctuator (
pr34688.c:125:61: keyword const
pr34688.c:125:67: keyword char
pr34688.c:125:72: punctuator *
pr34688.c:125:73: identifier filtername
pr34688.c:125:83: punctuator ,
pr34688.c:125:85: identifier zval
pr34688.c:125:90: punctuator *
pr34688.c:125:91: identifier filterparams
pr34688.c:125:103: punctuator ,
pr34688.c:125:105: keyword int
pr34688.c:125:109: identifier persistent
pr34688.c:125:120: punctuator )
pr34688.c:125:122: punctuator {
pr34688.c:126:10: identifier php_convert_filter
pr34688.c:126:29: punctuator *
pr34688.c:126:30: identifier inst
pr34688.c:126:34: punctuator ;
pr34688.c:127:10: keyword int
pr34688.c:127:14: identifier conv_mode
pr34688.c:127:24: punctuator =
pr34688.c:127:26: constant 0
pr34688.c:127:27: punctuator ;
pr34688.c:128:10: keyword if
pr34688.c:128:13: punctuator (
pr34688.c:128:14: identifier php_convert_filter_ctor
pr34688.c:128:37: punctuator (
pr34688.c:128:38: identifier inst
pr34688.c:128:42: punctuator ,
pr34688.c:128:44: identifier conv_mode
pr34688.c:128:53: punctuator ,
pr34688.c:128:55: punctuator (
pr34688.c:128:56: identifier filterparams
pr34688.c:128:69: punctuator !=
pr34688.c:128:72: punctuator (
pr34688.c:128:73: punctuator (
pr34688.c:128:74: keyword void
pr34688.c:128:79: punctuator *
pr34688.c:128:80: punctuator )
pr34688.c:128:81: constant 0
pr34688.c:128:82: punctuator )
pr34688.c:128:84: punctuator ?
pr34688.c:128:86: punctuator (
pr34688.c:128:87: punctuator *
pr34688.c:128:88: identifier filterparams
pr34688.c:128:100: punctuator )
pr34688.c:128:101: punctuator .
pr34688.c:128:102: identifier value
pr34688.c:128:107: punctuator .
pr34688.c:128:108: identifier ht
pr34688.c:128:111: punctuator :
pr34688.c:128:113: punctuator (
pr34688.c:128:114: punctuator (
pr34688.c:128:115: keyword void
pr34688.c:128:120: punctuator *
pr34688.c:128:121: punctuator )
pr34688.c:128:122: constant 0
pr34688.c:128:123: punctuator )
pr34688.c:128:124: punctuator )
pr34688.c:128:125: punctuator ,
pr34688.c:128:127: identifier filtername
pr34688.c:128:137: punctuator ,
pr34688.c:128:139: identifier persistent
pr34688.c:128:149: punctuator )
pr34688.c:128:151: punctuator !=
pr34688.c:128:154: constant 0
pr34688.c:128:155: punctuator )
pr34688.c:128:157: punctuator {
pr34688.c:129:9: punctuator }
pr34688.c:130:9: punctuator }
pr34688.c:131:10: keyword static
pr34688.c:131:17: identifier php_stream_filter_factory
pr34688.c:131:43: identifier strfilter_convert_factory
pr34688.c:131:69: punctuator =
pr34688.c:131:71: punctuator {
pr34688.c:132:10: identifier strfilter_convert_create
pr34688.c:132:35: punctuator }
pr34688.c:132:36: punctuator ;
pr34688.c:133:10: keyword static
pr34688.c:133:17: keyword const
pr34688.c:133:23: keyword struct
pr34688.c:133:30: punctuator {
pr34688.c:134:10: identifier php_stream_filter_ops
pr34688.c:134:32: punctuator *
pr34688.c:134:33: identifier ops
pr34688.c:134:36: punctuator ;
pr34688.c:135:10: identifier php_stream_filter_factory
pr34688.c:135:36: punctuator *
pr34688.c:135:37: identifier factory
pr34688.c:135:44: punctuator ;
pr34688.c:136:9: punctuator }
pr34688.c:137:10: identifier standard_filters
pr34688.c:137:26: punctuator [
pr34688.c:137:27: punctuator ]
pr34688.c:137:29: punctuator =
pr34688.c:137:31: punctuator {
pr34688.c:138:10: punctuator {
pr34688.c:139:8: punctuator &
pr34688.c:139:9: identifier strfilter_convert_ops
pr34688.c:139:30: punctuator ,
pr34688.c:139:32: punctuator &
pr34688.c:139:33: identifier strfilter_convert_factory
pr34688.c:139:59: punctuator }
pr34688.c:140:9: punctuator }
pr34688.c:140:10: punctuator ;
pr34688.c:141:10: keyword int
pr34688.c:141:14: identifier zm_startup_standard_filters
pr34688.c:141:41: punctuator (
pr34688.c:141:42: keyword int
pr34688.c:141:46: identifier type
pr34688.c:141:50: punctuator ,
pr34688.c:141:52: keyword int
pr34688.c:141:56: identifier module_number
pr34688.c:141:70: punctuator )
pr34688.c:141:72: punctuator {
pr34688.c:142:10: keyword int
pr34688.c:142:14: identifier i
pr34688.c:142:15: punctuator ;
pr34688.c:143:10: keyword for
pr34688.c:143:14: punctuator (
pr34688.c:143:15: identifier i
pr34688.c:143:17: punctuator =
pr34688.c:143:19: constant 0
pr34688.c:143:20: punctuator ;
pr34688.c:144:9: identifier standard_filters
pr34688.c:144:25: punctuator [
pr34688.c:144:26: identifier i
pr34688.c:144:27: punctuator ]
pr34688.c:144:28: punctuator .
pr34688.c:144:29: identifier ops
pr34688.c:144:32: punctuator ;
pr34688.c:145:9: identifier i
pr34688.c:145:10: punctuator ++
pr34688.c:145:12: punctuator )
pr34688.c:145:14: punctuator {
pr34688.c:146:9: punctuator }
pr34688.c:147:9: punctuator }
