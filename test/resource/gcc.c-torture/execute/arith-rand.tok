0
arith-rand.c:1:1: keyword long
arith-rand.c:2:1: identifier simple_rand
arith-rand.c:2:13: punctuator (
arith-rand.c:2:14: punctuator )
arith-rand.c:3:1: punctuator {
arith-rand.c:4:3: keyword static
arith-rand.c:4:10: keyword unsigned
arith-rand.c:4:19: keyword long
arith-rand.c:4:24: identifier seed
arith-rand.c:4:29: punctuator =
arith-rand.c:4:31: constant 47114711
arith-rand.c:4:39: punctuator ;
arith-rand.c:5:3: keyword unsigned
arith-rand.c:5:12: keyword long
arith-rand.c:5:17: identifier this
arith-rand.c:5:22: punctuator =
arith-rand.c:5:24: identifier seed
arith-rand.c:5:29: punctuator *
arith-rand.c:5:31: constant 1103515245
arith-rand.c:5:42: punctuator +
arith-rand.c:5:44: constant 12345
arith-rand.c:5:49: punctuator ;
arith-rand.c:6:3: identifier seed
arith-rand.c:6:8: punctuator =
arith-rand.c:6:10: identifier this
arith-rand.c:6:14: punctuator ;
arith-rand.c:7:3: keyword return
arith-rand.c:7:10: identifier this
arith-rand.c:7:15: punctuator >>
arith-rand.c:7:18: constant 8
arith-rand.c:7:19: punctuator ;
arith-rand.c:8:1: punctuator }
arith-rand.c:10:1: keyword unsigned
arith-rand.c:10:10: keyword long
arith-rand.c:10:15: keyword int
arith-rand.c:11:1: identifier random_bitstring
arith-rand.c:11:18: punctuator (
arith-rand.c:11:19: punctuator )
arith-rand.c:12:1: punctuator {
arith-rand.c:13:3: keyword unsigned
arith-rand.c:13:12: keyword long
arith-rand.c:13:17: keyword int
arith-rand.c:13:21: identifier x
arith-rand.c:13:22: punctuator ;
arith-rand.c:14:3: keyword int
arith-rand.c:14:7: identifier n_bits
arith-rand.c:14:13: punctuator ;
arith-rand.c:15:3: keyword long
arith-rand.c:15:8: identifier ran
arith-rand.c:15:11: punctuator ;
arith-rand.c:16:3: keyword int
arith-rand.c:16:7: identifier tot_bits
arith-rand.c:16:16: punctuator =
arith-rand.c:16:18: constant 0
arith-rand.c:16:19: punctuator ;
arith-rand.c:18:3: identifier x
arith-rand.c:18:5: punctuator =
arith-rand.c:18:7: constant 0
arith-rand.c:18:8: punctuator ;
arith-rand.c:19:3: keyword for
arith-rand.c:19:7: punctuator (
arith-rand.c:19:8: punctuator ;
arith-rand.c:19:9: punctuator ;
arith-rand.c:19:10: punctuator )
arith-rand.c:20:5: punctuator {
arith-rand.c:21:7: identifier ran
arith-rand.c:21:11: punctuator =
arith-rand.c:21:13: identifier simple_rand
arith-rand.c:21:25: punctuator (
arith-rand.c:21:26: punctuator )
arith-rand.c:21:27: punctuator ;
arith-rand.c:22:7: identifier n_bits
arith-rand.c:22:14: punctuator =
arith-rand.c:22:16: punctuator (
arith-rand.c:22:17: identifier ran
arith-rand.c:22:21: punctuator >>
arith-rand.c:22:24: constant 1
arith-rand.c:22:25: punctuator )
arith-rand.c:22:27: punctuator %
arith-rand.c:22:29: constant 16
arith-rand.c:22:31: punctuator ;
arith-rand.c:23:7: identifier tot_bits
arith-rand.c:23:16: punctuator +=
arith-rand.c:23:19: identifier n_bits
arith-rand.c:23:25: punctuator ;
arith-rand.c:25:7: keyword if
arith-rand.c:25:10: punctuator (
arith-rand.c:25:11: identifier n_bits
arith-rand.c:25:18: punctuator ==
arith-rand.c:25:21: constant 0
arith-rand.c:25:22: punctuator )
arith-rand.c:26:2: keyword return
arith-rand.c:26:9: identifier x
arith-rand.c:26:10: punctuator ;
arith-rand.c:27:7: keyword else
arith-rand.c:28:2: punctuator {
arith-rand.c:29:4: identifier x
arith-rand.c:29:6: punctuator <<=
arith-rand.c:29:10: identifier n_bits
arith-rand.c:29:16: punctuator ;
arith-rand.c:30:4: keyword if
arith-rand.c:30:7: punctuator (
arith-rand.c:30:8: identifier ran
arith-rand.c:30:12: punctuator &
arith-rand.c:30:14: constant 1
arith-rand.c:30:15: punctuator )
arith-rand.c:31:6: identifier x
arith-rand.c:31:8: punctuator |=
arith-rand.c:31:11: punctuator (
arith-rand.c:31:12: constant 1
arith-rand.c:31:14: punctuator <<
arith-rand.c:31:17: identifier n_bits
arith-rand.c:31:23: punctuator )
arith-rand.c:31:25: punctuator -
arith-rand.c:31:27: constant 1
arith-rand.c:31:28: punctuator ;
arith-rand.c:33:4: keyword if
arith-rand.c:33:7: punctuator (
arith-rand.c:33:8: identifier tot_bits
arith-rand.c:33:17: punctuator >
arith-rand.c:33:19: constant 8
arith-rand.c:33:21: punctuator *
arith-rand.c:33:23: keyword sizeof
arith-rand.c:33:30: punctuator (
arith-rand.c:33:31: keyword long
arith-rand.c:33:35: punctuator )
arith-rand.c:33:37: punctuator +
arith-rand.c:33:39: constant 6
arith-rand.c:33:40: punctuator )
arith-rand.c:34:6: keyword return
arith-rand.c:34:13: identifier x
arith-rand.c:34:14: punctuator ;
arith-rand.c:35:2: punctuator }
arith-rand.c:36:5: punctuator }
arith-rand.c:37:1: punctuator }
arith-rand.c:41:1: identifier main
arith-rand.c:41:6: punctuator (
arith-rand.c:41:7: punctuator )
arith-rand.c:42:1: punctuator {
arith-rand.c:43:3: keyword long
arith-rand.c:43:8: keyword int
arith-rand.c:43:12: identifier i
arith-rand.c:43:13: punctuator ;
arith-rand.c:45:3: keyword for
arith-rand.c:45:7: punctuator (
arith-rand.c:45:8: identifier i
arith-rand.c:45:10: punctuator =
arith-rand.c:45:12: constant 0
arith-rand.c:45:13: punctuator ;
arith-rand.c:45:15: identifier i
arith-rand.c:45:17: punctuator <
arith-rand.c:45:19: constant 1000
arith-rand.c:45:23: punctuator ;
arith-rand.c:45:25: identifier i
arith-rand.c:45:26: punctuator ++
arith-rand.c:45:28: punctuator )
arith-rand.c:46:5: punctuator {
arith-rand.c:47:7: keyword unsigned
arith-rand.c:47:16: keyword long
arith-rand.c:47:21: identifier x
arith-rand.c:47:22: punctuator ,
arith-rand.c:47:24: identifier y
arith-rand.c:47:25: punctuator ;
arith-rand.c:48:7: identifier x
arith-rand.c:48:9: punctuator =
arith-rand.c:48:11: identifier random_bitstring
arith-rand.c:48:28: punctuator (
arith-rand.c:48:29: punctuator )
arith-rand.c:48:30: punctuator ;
arith-rand.c:49:7: identifier y
arith-rand.c:49:9: punctuator =
arith-rand.c:49:11: identifier random_bitstring
arith-rand.c:49:28: punctuator (
arith-rand.c:49:29: punctuator )
arith-rand.c:49:30: punctuator ;
arith-rand.c:51:7: keyword if
arith-rand.c:51:10: punctuator (
arith-rand.c:51:11: keyword sizeof
arith-rand.c:51:18: punctuator (
arith-rand.c:51:19: keyword int
arith-rand.c:51:22: punctuator )
arith-rand.c:51:24: punctuator ==
arith-rand.c:51:27: keyword sizeof
arith-rand.c:51:34: punctuator (
arith-rand.c:51:35: keyword long
arith-rand.c:51:39: punctuator )
arith-rand.c:51:40: punctuator )
arith-rand.c:52:2: keyword goto
arith-rand.c:52:7: identifier save_time
arith-rand.c:52:16: punctuator ;
arith-rand.c:54:7: punctuator {
arith-rand.c:54:9: keyword unsigned
arith-rand.c:54:18: keyword long
arith-rand.c:54:23: identifier xx
arith-rand.c:54:26: punctuator =
arith-rand.c:54:28: identifier x
arith-rand.c:54:29: punctuator ,
arith-rand.c:54:31: identifier yy
arith-rand.c:54:34: punctuator =
arith-rand.c:54:36: identifier y
arith-rand.c:54:37: punctuator ,
arith-rand.c:54:39: identifier r1
arith-rand.c:54:41: punctuator ,
arith-rand.c:54:43: identifier r2
arith-rand.c:54:45: punctuator ;
arith-rand.c:55:2: keyword if
arith-rand.c:55:5: punctuator (
arith-rand.c:55:6: identifier yy
arith-rand.c:55:9: punctuator ==
arith-rand.c:55:12: constant 0
arith-rand.c:55:13: punctuator )
arith-rand.c:55:15: keyword continue
arith-rand.c:55:23: punctuator ;
arith-rand.c:56:2: identifier r1
arith-rand.c:56:5: punctuator =
arith-rand.c:56:7: identifier xx
arith-rand.c:56:10: punctuator /
arith-rand.c:56:12: identifier yy
arith-rand.c:56:14: punctuator ;
arith-rand.c:57:2: identifier r2
arith-rand.c:57:5: punctuator =
arith-rand.c:57:7: identifier xx
arith-rand.c:57:10: punctuator %
arith-rand.c:57:12: identifier yy
arith-rand.c:57:14: punctuator ;
arith-rand.c:58:2: keyword if
arith-rand.c:58:5: punctuator (
arith-rand.c:58:6: identifier r2
arith-rand.c:58:9: punctuator >=
arith-rand.c:58:12: identifier yy
arith-rand.c:58:15: punctuator ||
arith-rand.c:58:18: identifier r1
arith-rand.c:58:21: punctuator *
arith-rand.c:58:23: identifier yy
arith-rand.c:58:26: punctuator +
arith-rand.c:58:28: identifier r2
arith-rand.c:58:31: punctuator !=
arith-rand.c:58:34: identifier xx
arith-rand.c:58:36: punctuator )
arith-rand.c:59:4: identifier abort
arith-rand.c:59:10: punctuator (
arith-rand.c:59:11: punctuator )
arith-rand.c:59:12: punctuator ;
arith-rand.c:60:7: punctuator }
arith-rand.c:61:7: punctuator {
arith-rand.c:61:9: keyword signed
arith-rand.c:61:16: keyword long
arith-rand.c:61:21: identifier xx
arith-rand.c:61:24: punctuator =
arith-rand.c:61:26: identifier x
arith-rand.c:61:27: punctuator ,
arith-rand.c:61:29: identifier yy
arith-rand.c:61:32: punctuator =
arith-rand.c:61:34: identifier y
arith-rand.c:61:35: punctuator ,
arith-rand.c:61:37: identifier r1
arith-rand.c:61:39: punctuator ,
arith-rand.c:61:41: identifier r2
arith-rand.c:61:43: punctuator ;
arith-rand.c:62:2: keyword if
arith-rand.c:62:5: punctuator (
arith-rand.c:62:6: punctuator (
arith-rand.c:62:7: keyword unsigned
arith-rand.c:62:16: keyword long
arith-rand.c:62:20: punctuator )
arith-rand.c:62:22: identifier xx
arith-rand.c:62:25: punctuator <<
arith-rand.c:62:28: constant 1
arith-rand.c:62:30: punctuator ==
arith-rand.c:62:33: constant 0
arith-rand.c:62:35: punctuator &&
arith-rand.c:62:38: identifier yy
arith-rand.c:62:41: punctuator ==
arith-rand.c:62:44: punctuator -
arith-rand.c:62:45: constant 1
arith-rand.c:62:46: punctuator )
arith-rand.c:63:4: keyword continue
arith-rand.c:63:12: punctuator ;
arith-rand.c:64:2: identifier r1
arith-rand.c:64:5: punctuator =
arith-rand.c:64:7: identifier xx
arith-rand.c:64:10: punctuator /
arith-rand.c:64:12: identifier yy
arith-rand.c:64:14: punctuator ;
arith-rand.c:65:2: identifier r2
arith-rand.c:65:5: punctuator =
arith-rand.c:65:7: identifier xx
arith-rand.c:65:10: punctuator %
arith-rand.c:65:12: identifier yy
arith-rand.c:65:14: punctuator ;
arith-rand.c:66:2: keyword if
arith-rand.c:66:5: punctuator (
arith-rand.c:66:6: punctuator (
arith-rand.c:66:7: punctuator (
arith-rand.c:66:8: identifier r2
arith-rand.c:66:10: punctuator )
arith-rand.c:66:12: punctuator >=
arith-rand.c:66:15: constant 0
arith-rand.c:66:17: punctuator ?
arith-rand.c:66:19: punctuator (
arith-rand.c:66:20: identifier r2
arith-rand.c:66:22: punctuator )
arith-rand.c:66:24: punctuator :
arith-rand.c:66:26: punctuator -
arith-rand.c:66:27: punctuator (
arith-rand.c:66:28: identifier r2
arith-rand.c:66:30: punctuator )
arith-rand.c:66:31: punctuator )
arith-rand.c:66:33: punctuator >=
arith-rand.c:66:36: punctuator (
arith-rand.c:66:37: keyword unsigned
arith-rand.c:66:46: keyword long
arith-rand.c:66:50: punctuator )
arith-rand.c:66:52: punctuator (
arith-rand.c:66:53: punctuator (
arith-rand.c:66:54: identifier yy
arith-rand.c:66:56: punctuator )
arith-rand.c:66:58: punctuator >=
arith-rand.c:66:61: constant 0
arith-rand.c:66:63: punctuator ?
arith-rand.c:66:65: punctuator (
arith-rand.c:66:66: identifier yy
arith-rand.c:66:68: punctuator )
arith-rand.c:66:70: punctuator :
arith-rand.c:66:72: punctuator -
arith-rand.c:66:73: punctuator (
arith-rand.c:66:74: identifier yy
arith-rand.c:66:76: punctuator )
arith-rand.c:66:77: punctuator )
arith-rand.c:66:79: punctuator ||
arith-rand.c:66:82: punctuator (
arith-rand.c:66:83: keyword signed
arith-rand.c:66:90: keyword long
arith-rand.c:66:94: punctuator )
arith-rand.c:66:96: punctuator (
arith-rand.c:66:97: identifier r1
arith-rand.c:66:100: punctuator *
arith-rand.c:66:102: identifier yy
arith-rand.c:66:105: punctuator +
arith-rand.c:66:107: identifier r2
arith-rand.c:66:109: punctuator )
arith-rand.c:66:111: punctuator !=
arith-rand.c:66:114: identifier xx
arith-rand.c:66:116: punctuator )
arith-rand.c:67:4: identifier abort
arith-rand.c:67:10: punctuator (
arith-rand.c:67:11: punctuator )
arith-rand.c:67:12: punctuator ;
arith-rand.c:68:7: punctuator }
arith-rand.c:69:5: identifier save_time
arith-rand.c:69:14: punctuator :
arith-rand.c:70:7: punctuator {
arith-rand.c:70:9: keyword unsigned
arith-rand.c:70:18: keyword int
arith-rand.c:70:22: identifier xx
arith-rand.c:70:25: punctuator =
arith-rand.c:70:27: identifier x
arith-rand.c:70:28: punctuator ,
arith-rand.c:70:30: identifier yy
arith-rand.c:70:33: punctuator =
arith-rand.c:70:35: identifier y
arith-rand.c:70:36: punctuator ,
arith-rand.c:70:38: identifier r1
arith-rand.c:70:40: punctuator ,
arith-rand.c:70:42: identifier r2
arith-rand.c:70:44: punctuator ;
arith-rand.c:71:2: keyword if
arith-rand.c:71:5: punctuator (
arith-rand.c:71:6: identifier yy
arith-rand.c:71:9: punctuator ==
arith-rand.c:71:12: constant 0
arith-rand.c:71:13: punctuator )
arith-rand.c:71:15: keyword continue
arith-rand.c:71:23: punctuator ;
arith-rand.c:72:2: identifier r1
arith-rand.c:72:5: punctuator =
arith-rand.c:72:7: identifier xx
arith-rand.c:72:10: punctuator /
arith-rand.c:72:12: identifier yy
arith-rand.c:72:14: punctuator ;
arith-rand.c:73:2: identifier r2
arith-rand.c:73:5: punctuator =
arith-rand.c:73:7: identifier xx
arith-rand.c:73:10: punctuator %
arith-rand.c:73:12: identifier yy
arith-rand.c:73:14: punctuator ;
arith-rand.c:74:2: keyword if
arith-rand.c:74:5: punctuator (
arith-rand.c:74:6: identifier r2
arith-rand.c:74:9: punctuator >=
arith-rand.c:74:12: identifier yy
arith-rand.c:74:15: punctuator ||
arith-rand.c:74:18: identifier r1
arith-rand.c:74:21: punctuator *
arith-rand.c:74:23: identifier yy
arith-rand.c:74:26: punctuator +
arith-rand.c:74:28: identifier r2
arith-rand.c:74:31: punctuator !=
arith-rand.c:74:34: identifier xx
arith-rand.c:74:36: punctuator )
arith-rand.c:75:4: identifier abort
arith-rand.c:75:10: punctuator (
arith-rand.c:75:11: punctuator )
arith-rand.c:75:12: punctuator ;
arith-rand.c:76:7: punctuator }
arith-rand.c:77:7: punctuator {
arith-rand.c:77:9: keyword signed
arith-rand.c:77:16: keyword int
arith-rand.c:77:20: identifier xx
arith-rand.c:77:23: punctuator =
arith-rand.c:77:25: identifier x
arith-rand.c:77:26: punctuator ,
arith-rand.c:77:28: identifier yy
arith-rand.c:77:31: punctuator =
arith-rand.c:77:33: identifier y
arith-rand.c:77:34: punctuator ,
arith-rand.c:77:36: identifier r1
arith-rand.c:77:38: punctuator ,
arith-rand.c:77:40: identifier r2
arith-rand.c:77:42: punctuator ;
arith-rand.c:78:2: keyword if
arith-rand.c:78:5: punctuator (
arith-rand.c:78:6: punctuator (
arith-rand.c:78:7: keyword unsigned
arith-rand.c:78:16: keyword int
arith-rand.c:78:19: punctuator )
arith-rand.c:78:21: identifier xx
arith-rand.c:78:24: punctuator <<
arith-rand.c:78:27: constant 1
arith-rand.c:78:29: punctuator ==
arith-rand.c:78:32: constant 0
arith-rand.c:78:34: punctuator &&
arith-rand.c:78:37: identifier yy
arith-rand.c:78:40: punctuator ==
arith-rand.c:78:43: punctuator -
arith-rand.c:78:44: constant 1
arith-rand.c:78:45: punctuator )
arith-rand.c:79:4: keyword continue
arith-rand.c:79:12: punctuator ;
arith-rand.c:80:2: identifier r1
arith-rand.c:80:5: punctuator =
arith-rand.c:80:7: identifier xx
arith-rand.c:80:10: punctuator /
arith-rand.c:80:12: identifier yy
arith-rand.c:80:14: punctuator ;
arith-rand.c:81:2: identifier r2
arith-rand.c:81:5: punctuator =
arith-rand.c:81:7: identifier xx
arith-rand.c:81:10: punctuator %
arith-rand.c:81:12: identifier yy
arith-rand.c:81:14: punctuator ;
arith-rand.c:82:2: keyword if
arith-rand.c:82:5: punctuator (
arith-rand.c:82:6: punctuator (
arith-rand.c:82:7: punctuator (
arith-rand.c:82:8: identifier r2
arith-rand.c:82:10: punctuator )
arith-rand.c:82:12: punctuator >=
arith-rand.c:82:15: constant 0
arith-rand.c:82:17: punctuator ?
arith-rand.c:82:19: punctuator (
arith-rand.c:82:20: identifier r2
arith-rand.c:82:22: punctuator )
arith-rand.c:82:24: punctuator :
arith-rand.c:82:26: punctuator -
arith-rand.c:82:27: punctuator (
arith-rand.c:82:28: identifier r2
arith-rand.c:82:30: punctuator )
arith-rand.c:82:31: punctuator )
arith-rand.c:82:33: punctuator >=
arith-rand.c:82:36: punctuator (
arith-rand.c:82:37: keyword unsigned
arith-rand.c:82:46: keyword int
arith-rand.c:82:49: punctuator )
arith-rand.c:82:51: punctuator (
arith-rand.c:82:52: punctuator (
arith-rand.c:82:53: identifier yy
arith-rand.c:82:55: punctuator )
arith-rand.c:82:57: punctuator >=
arith-rand.c:82:60: constant 0
arith-rand.c:82:62: punctuator ?
arith-rand.c:82:64: punctuator (
arith-rand.c:82:65: identifier yy
arith-rand.c:82:67: punctuator )
arith-rand.c:82:69: punctuator :
arith-rand.c:82:71: punctuator -
arith-rand.c:82:72: punctuator (
arith-rand.c:82:73: identifier yy
arith-rand.c:82:75: punctuator )
arith-rand.c:82:76: punctuator )
arith-rand.c:82:78: punctuator ||
arith-rand.c:82:81: punctuator (
arith-rand.c:82:82: keyword signed
arith-rand.c:82:89: keyword int
arith-rand.c:82:92: punctuator )
arith-rand.c:82:94: punctuator (
arith-rand.c:82:95: identifier r1
arith-rand.c:82:98: punctuator *
arith-rand.c:82:100: identifier yy
arith-rand.c:82:103: punctuator +
arith-rand.c:82:105: identifier r2
arith-rand.c:82:107: punctuator )
arith-rand.c:82:109: punctuator !=
arith-rand.c:82:112: identifier xx
arith-rand.c:82:114: punctuator )
arith-rand.c:83:4: identifier abort
arith-rand.c:83:10: punctuator (
arith-rand.c:83:11: punctuator )
arith-rand.c:83:12: punctuator ;
arith-rand.c:84:7: punctuator }
arith-rand.c:85:7: punctuator {
arith-rand.c:85:9: keyword unsigned
arith-rand.c:85:18: keyword short
arith-rand.c:85:24: identifier xx
arith-rand.c:85:27: punctuator =
arith-rand.c:85:29: identifier x
arith-rand.c:85:30: punctuator ,
arith-rand.c:85:32: identifier yy
arith-rand.c:85:35: punctuator =
arith-rand.c:85:37: identifier y
arith-rand.c:85:38: punctuator ,
arith-rand.c:85:40: identifier r1
arith-rand.c:85:42: punctuator ,
arith-rand.c:85:44: identifier r2
arith-rand.c:85:46: punctuator ;
arith-rand.c:86:2: keyword if
arith-rand.c:86:5: punctuator (
arith-rand.c:86:6: identifier yy
arith-rand.c:86:9: punctuator ==
arith-rand.c:86:12: constant 0
arith-rand.c:86:13: punctuator )
arith-rand.c:86:15: keyword continue
arith-rand.c:86:23: punctuator ;
arith-rand.c:87:2: identifier r1
arith-rand.c:87:5: punctuator =
arith-rand.c:87:7: identifier xx
arith-rand.c:87:10: punctuator /
arith-rand.c:87:12: identifier yy
arith-rand.c:87:14: punctuator ;
arith-rand.c:88:2: identifier r2
arith-rand.c:88:5: punctuator =
arith-rand.c:88:7: identifier xx
arith-rand.c:88:10: punctuator %
arith-rand.c:88:12: identifier yy
arith-rand.c:88:14: punctuator ;
arith-rand.c:89:2: keyword if
arith-rand.c:89:5: punctuator (
arith-rand.c:89:6: identifier r2
arith-rand.c:89:9: punctuator >=
arith-rand.c:89:12: identifier yy
arith-rand.c:89:15: punctuator ||
arith-rand.c:89:18: identifier r1
arith-rand.c:89:21: punctuator *
arith-rand.c:89:23: identifier yy
arith-rand.c:89:26: punctuator +
arith-rand.c:89:28: identifier r2
arith-rand.c:89:31: punctuator !=
arith-rand.c:89:34: identifier xx
arith-rand.c:89:36: punctuator )
arith-rand.c:90:4: identifier abort
arith-rand.c:90:10: punctuator (
arith-rand.c:90:11: punctuator )
arith-rand.c:90:12: punctuator ;
arith-rand.c:91:7: punctuator }
arith-rand.c:92:7: punctuator {
arith-rand.c:92:9: keyword signed
arith-rand.c:92:16: keyword short
arith-rand.c:92:22: identifier xx
arith-rand.c:92:25: punctuator =
arith-rand.c:92:27: identifier x
arith-rand.c:92:28: punctuator ,
arith-rand.c:92:30: identifier yy
arith-rand.c:92:33: punctuator =
arith-rand.c:92:35: identifier y
arith-rand.c:92:36: punctuator ,
arith-rand.c:92:38: identifier r1
arith-rand.c:92:40: punctuator ,
arith-rand.c:92:42: identifier r2
arith-rand.c:92:44: punctuator ;
arith-rand.c:93:2: identifier r1
arith-rand.c:93:5: punctuator =
arith-rand.c:93:7: identifier xx
arith-rand.c:93:10: punctuator /
arith-rand.c:93:12: identifier yy
arith-rand.c:93:14: punctuator ;
arith-rand.c:94:2: identifier r2
arith-rand.c:94:5: punctuator =
arith-rand.c:94:7: identifier xx
arith-rand.c:94:10: punctuator %
arith-rand.c:94:12: identifier yy
arith-rand.c:94:14: punctuator ;
arith-rand.c:95:2: keyword if
arith-rand.c:95:5: punctuator (
arith-rand.c:95:6: punctuator (
arith-rand.c:95:7: punctuator (
arith-rand.c:95:8: identifier r2
arith-rand.c:95:10: punctuator )
arith-rand.c:95:12: punctuator >=
arith-rand.c:95:15: constant 0
arith-rand.c:95:17: punctuator ?
arith-rand.c:95:19: punctuator (
arith-rand.c:95:20: identifier r2
arith-rand.c:95:22: punctuator )
arith-rand.c:95:24: punctuator :
arith-rand.c:95:26: punctuator -
arith-rand.c:95:27: punctuator (
arith-rand.c:95:28: identifier r2
arith-rand.c:95:30: punctuator )
arith-rand.c:95:31: punctuator )
arith-rand.c:95:33: punctuator >=
arith-rand.c:95:36: punctuator (
arith-rand.c:95:37: keyword unsigned
arith-rand.c:95:46: keyword short
arith-rand.c:95:51: punctuator )
arith-rand.c:95:53: punctuator (
arith-rand.c:95:54: punctuator (
arith-rand.c:95:55: identifier yy
arith-rand.c:95:57: punctuator )
arith-rand.c:95:59: punctuator >=
arith-rand.c:95:62: constant 0
arith-rand.c:95:64: punctuator ?
arith-rand.c:95:66: punctuator (
arith-rand.c:95:67: identifier yy
arith-rand.c:95:69: punctuator )
arith-rand.c:95:71: punctuator :
arith-rand.c:95:73: punctuator -
arith-rand.c:95:74: punctuator (
arith-rand.c:95:75: identifier yy
arith-rand.c:95:77: punctuator )
arith-rand.c:95:78: punctuator )
arith-rand.c:95:80: punctuator ||
arith-rand.c:95:83: punctuator (
arith-rand.c:95:84: keyword signed
arith-rand.c:95:91: keyword short
arith-rand.c:95:96: punctuator )
arith-rand.c:95:98: punctuator (
arith-rand.c:95:99: identifier r1
arith-rand.c:95:102: punctuator *
arith-rand.c:95:104: identifier yy
arith-rand.c:95:107: punctuator +
arith-rand.c:95:109: identifier r2
arith-rand.c:95:111: punctuator )
arith-rand.c:95:113: punctuator !=
arith-rand.c:95:116: identifier xx
arith-rand.c:95:118: punctuator )
arith-rand.c:96:4: identifier abort
arith-rand.c:96:10: punctuator (
arith-rand.c:96:11: punctuator )
arith-rand.c:96:12: punctuator ;
arith-rand.c:97:7: punctuator }
arith-rand.c:98:7: punctuator {
arith-rand.c:98:9: keyword unsigned
arith-rand.c:98:18: keyword char
arith-rand.c:98:23: identifier xx
arith-rand.c:98:26: punctuator =
arith-rand.c:98:28: identifier x
arith-rand.c:98:29: punctuator ,
arith-rand.c:98:31: identifier yy
arith-rand.c:98:34: punctuator =
arith-rand.c:98:36: identifier y
arith-rand.c:98:37: punctuator ,
arith-rand.c:98:39: identifier r1
arith-rand.c:98:41: punctuator ,
arith-rand.c:98:43: identifier r2
arith-rand.c:98:45: punctuator ;
arith-rand.c:99:2: keyword if
arith-rand.c:99:5: punctuator (
arith-rand.c:99:6: identifier yy
arith-rand.c:99:9: punctuator ==
arith-rand.c:99:12: constant 0
arith-rand.c:99:13: punctuator )
arith-rand.c:99:15: keyword continue
arith-rand.c:99:23: punctuator ;
arith-rand.c:100:2: identifier r1
arith-rand.c:100:5: punctuator =
arith-rand.c:100:7: identifier xx
arith-rand.c:100:10: punctuator /
arith-rand.c:100:12: identifier yy
arith-rand.c:100:14: punctuator ;
arith-rand.c:101:2: identifier r2
arith-rand.c:101:5: punctuator =
arith-rand.c:101:7: identifier xx
arith-rand.c:101:10: punctuator %
arith-rand.c:101:12: identifier yy
arith-rand.c:101:14: punctuator ;
arith-rand.c:102:2: keyword if
arith-rand.c:102:5: punctuator (
arith-rand.c:102:6: identifier r2
arith-rand.c:102:9: punctuator >=
arith-rand.c:102:12: identifier yy
arith-rand.c:102:15: punctuator ||
arith-rand.c:102:18: identifier r1
arith-rand.c:102:21: punctuator *
arith-rand.c:102:23: identifier yy
arith-rand.c:102:26: punctuator +
arith-rand.c:102:28: identifier r2
arith-rand.c:102:31: punctuator !=
arith-rand.c:102:34: identifier xx
arith-rand.c:102:36: punctuator )
arith-rand.c:103:4: identifier abort
arith-rand.c:103:10: punctuator (
arith-rand.c:103:11: punctuator )
arith-rand.c:103:12: punctuator ;
arith-rand.c:104:7: punctuator }
arith-rand.c:105:7: punctuator {
arith-rand.c:105:9: keyword signed
arith-rand.c:105:16: keyword char
arith-rand.c:105:21: identifier xx
arith-rand.c:105:24: punctuator =
arith-rand.c:105:26: identifier x
arith-rand.c:105:27: punctuator ,
arith-rand.c:105:29: identifier yy
arith-rand.c:105:32: punctuator =
arith-rand.c:105:34: identifier y
arith-rand.c:105:35: punctuator ,
arith-rand.c:105:37: identifier r1
arith-rand.c:105:39: punctuator ,
arith-rand.c:105:41: identifier r2
arith-rand.c:105:43: punctuator ;
arith-rand.c:106:2: identifier r1
arith-rand.c:106:5: punctuator =
arith-rand.c:106:7: identifier xx
arith-rand.c:106:10: punctuator /
arith-rand.c:106:12: identifier yy
arith-rand.c:106:14: punctuator ;
arith-rand.c:107:2: identifier r2
arith-rand.c:107:5: punctuator =
arith-rand.c:107:7: identifier xx
arith-rand.c:107:10: punctuator %
arith-rand.c:107:12: identifier yy
arith-rand.c:107:14: punctuator ;
arith-rand.c:108:2: keyword if
arith-rand.c:108:5: punctuator (
arith-rand.c:108:6: punctuator (
arith-rand.c:108:7: punctuator (
arith-rand.c:108:8: identifier r2
arith-rand.c:108:10: punctuator )
arith-rand.c:108:12: punctuator >=
arith-rand.c:108:15: constant 0
arith-rand.c:108:17: punctuator ?
arith-rand.c:108:19: punctuator (
arith-rand.c:108:20: identifier r2
arith-rand.c:108:22: punctuator )
arith-rand.c:108:24: punctuator :
arith-rand.c:108:26: punctuator -
arith-rand.c:108:27: punctuator (
arith-rand.c:108:28: identifier r2
arith-rand.c:108:30: punctuator )
arith-rand.c:108:31: punctuator )
arith-rand.c:108:33: punctuator >=
arith-rand.c:108:36: punctuator (
arith-rand.c:108:37: keyword unsigned
arith-rand.c:108:46: keyword char
arith-rand.c:108:50: punctuator )
arith-rand.c:108:52: punctuator (
arith-rand.c:108:53: punctuator (
arith-rand.c:108:54: identifier yy
arith-rand.c:108:56: punctuator )
arith-rand.c:108:58: punctuator >=
arith-rand.c:108:61: constant 0
arith-rand.c:108:63: punctuator ?
arith-rand.c:108:65: punctuator (
arith-rand.c:108:66: identifier yy
arith-rand.c:108:68: punctuator )
arith-rand.c:108:70: punctuator :
arith-rand.c:108:72: punctuator -
arith-rand.c:108:73: punctuator (
arith-rand.c:108:74: identifier yy
arith-rand.c:108:76: punctuator )
arith-rand.c:108:77: punctuator )
arith-rand.c:108:79: punctuator ||
arith-rand.c:108:82: punctuator (
arith-rand.c:108:83: keyword signed
arith-rand.c:108:90: keyword char
arith-rand.c:108:94: punctuator )
arith-rand.c:108:96: punctuator (
arith-rand.c:108:97: identifier r1
arith-rand.c:108:100: punctuator *
arith-rand.c:108:102: identifier yy
arith-rand.c:108:105: punctuator +
arith-rand.c:108:107: identifier r2
arith-rand.c:108:109: punctuator )
arith-rand.c:108:111: punctuator !=
arith-rand.c:108:114: identifier xx
arith-rand.c:108:116: punctuator )
arith-rand.c:109:4: identifier abort
arith-rand.c:109:10: punctuator (
arith-rand.c:109:11: punctuator )
arith-rand.c:109:12: punctuator ;
arith-rand.c:110:7: punctuator }
arith-rand.c:111:5: punctuator }
arith-rand.c:113:3: identifier exit
arith-rand.c:113:8: punctuator (
arith-rand.c:113:9: constant 0
arith-rand.c:113:10: punctuator )
arith-rand.c:113:11: punctuator ;
arith-rand.c:114:1: punctuator }
