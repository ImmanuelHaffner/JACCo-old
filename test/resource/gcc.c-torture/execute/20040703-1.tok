0
20040703-1.c:5:1: keyword typedef
20040703-1.c:5:9: keyword unsigned
20040703-1.c:5:18: keyword int
20040703-1.c:5:22: identifier cpp_num_part
20040703-1.c:5:34: punctuator ;
20040703-1.c:6:1: keyword typedef
20040703-1.c:6:9: keyword struct
20040703-1.c:6:16: identifier cpp_num
20040703-1.c:6:24: identifier cpp_num
20040703-1.c:6:31: punctuator ;
20040703-1.c:7:1: keyword struct
20040703-1.c:7:8: identifier cpp_num
20040703-1.c:8:1: punctuator {
20040703-1.c:9:4: identifier cpp_num_part
20040703-1.c:9:17: identifier high
20040703-1.c:9:21: punctuator ;
20040703-1.c:10:4: identifier cpp_num_part
20040703-1.c:10:17: identifier low
20040703-1.c:10:20: punctuator ;
20040703-1.c:11:4: keyword int
20040703-1.c:11:8: identifier unsignedp
20040703-1.c:11:17: punctuator ;
20040703-1.c:12:4: keyword int
20040703-1.c:12:8: identifier overflow
20040703-1.c:12:16: punctuator ;
20040703-1.c:13:1: punctuator }
20040703-1.c:13:2: punctuator ;
20040703-1.c:15:1: keyword static
20040703-1.c:15:8: keyword int
20040703-1.c:16:1: identifier num_positive
20040703-1.c:16:14: punctuator (
20040703-1.c:16:15: identifier cpp_num
20040703-1.c:16:23: identifier num
20040703-1.c:16:26: punctuator ,
20040703-1.c:16:28: keyword unsigned
20040703-1.c:16:37: keyword int
20040703-1.c:16:41: identifier precision
20040703-1.c:16:50: punctuator )
20040703-1.c:17:1: punctuator {
20040703-1.c:18:4: keyword if
20040703-1.c:18:7: punctuator (
20040703-1.c:18:8: identifier precision
20040703-1.c:18:18: punctuator >
20040703-1.c:18:20: punctuator (
20040703-1.c:18:21: keyword sizeof
20040703-1.c:18:28: punctuator (
20040703-1.c:18:29: identifier cpp_num_part
20040703-1.c:18:41: punctuator )
20040703-1.c:18:43: punctuator *
20040703-1.c:18:45: constant 8
20040703-1.c:18:46: punctuator )
20040703-1.c:18:47: punctuator )
20040703-1.c:19:6: punctuator {
20040703-1.c:20:8: identifier precision
20040703-1.c:20:18: punctuator -=
20040703-1.c:20:21: punctuator (
20040703-1.c:20:22: keyword sizeof
20040703-1.c:20:29: punctuator (
20040703-1.c:20:30: identifier cpp_num_part
20040703-1.c:20:42: punctuator )
20040703-1.c:20:44: punctuator *
20040703-1.c:20:46: constant 8
20040703-1.c:20:47: punctuator )
20040703-1.c:20:48: punctuator ;
20040703-1.c:21:8: keyword return
20040703-1.c:21:15: punctuator (
20040703-1.c:21:16: identifier num
20040703-1.c:21:19: punctuator .
20040703-1.c:21:20: identifier high
20040703-1.c:21:25: punctuator &
20040703-1.c:21:27: punctuator (
20040703-1.c:21:28: identifier cpp_num_part
20040703-1.c:21:40: punctuator )
20040703-1.c:21:42: constant 1
20040703-1.c:21:44: punctuator <<
20040703-1.c:21:47: punctuator (
20040703-1.c:21:48: identifier precision
20040703-1.c:21:58: punctuator -
20040703-1.c:21:60: constant 1
20040703-1.c:21:61: punctuator )
20040703-1.c:21:62: punctuator )
20040703-1.c:21:64: punctuator ==
20040703-1.c:21:67: constant 0
20040703-1.c:21:68: punctuator ;
20040703-1.c:22:6: punctuator }
20040703-1.c:24:4: keyword return
20040703-1.c:24:11: punctuator (
20040703-1.c:24:12: identifier num
20040703-1.c:24:15: punctuator .
20040703-1.c:24:16: identifier low
20040703-1.c:24:20: punctuator &
20040703-1.c:24:22: punctuator (
20040703-1.c:24:23: identifier cpp_num_part
20040703-1.c:24:35: punctuator )
20040703-1.c:24:37: constant 1
20040703-1.c:24:39: punctuator <<
20040703-1.c:24:42: punctuator (
20040703-1.c:24:43: identifier precision
20040703-1.c:24:53: punctuator -
20040703-1.c:24:55: constant 1
20040703-1.c:24:56: punctuator )
20040703-1.c:24:57: punctuator )
20040703-1.c:24:59: punctuator ==
20040703-1.c:24:62: constant 0
20040703-1.c:24:63: punctuator ;
20040703-1.c:25:1: punctuator }
20040703-1.c:27:1: keyword static
20040703-1.c:27:8: identifier cpp_num
20040703-1.c:28:1: identifier num_trim
20040703-1.c:28:10: punctuator (
20040703-1.c:28:11: identifier cpp_num
20040703-1.c:28:19: identifier num
20040703-1.c:28:22: punctuator ,
20040703-1.c:28:24: keyword unsigned
20040703-1.c:28:33: keyword int
20040703-1.c:28:37: identifier precision
20040703-1.c:28:46: punctuator )
20040703-1.c:29:1: punctuator {
20040703-1.c:30:4: keyword if
20040703-1.c:30:7: punctuator (
20040703-1.c:30:8: identifier precision
20040703-1.c:30:18: punctuator >
20040703-1.c:30:20: punctuator (
20040703-1.c:30:21: keyword sizeof
20040703-1.c:30:28: punctuator (
20040703-1.c:30:29: identifier cpp_num_part
20040703-1.c:30:41: punctuator )
20040703-1.c:30:43: punctuator *
20040703-1.c:30:45: constant 8
20040703-1.c:30:46: punctuator )
20040703-1.c:30:47: punctuator )
20040703-1.c:31:6: punctuator {
20040703-1.c:32:8: identifier precision
20040703-1.c:32:18: punctuator -=
20040703-1.c:32:21: punctuator (
20040703-1.c:32:22: keyword sizeof
20040703-1.c:32:29: punctuator (
20040703-1.c:32:30: identifier cpp_num_part
20040703-1.c:32:42: punctuator )
20040703-1.c:32:44: punctuator *
20040703-1.c:32:46: constant 8
20040703-1.c:32:47: punctuator )
20040703-1.c:32:48: punctuator ;
20040703-1.c:33:8: keyword if
20040703-1.c:33:11: punctuator (
20040703-1.c:33:12: identifier precision
20040703-1.c:33:22: punctuator <
20040703-1.c:33:24: punctuator (
20040703-1.c:33:25: keyword sizeof
20040703-1.c:33:32: punctuator (
20040703-1.c:33:33: identifier cpp_num_part
20040703-1.c:33:45: punctuator )
20040703-1.c:33:47: punctuator *
20040703-1.c:33:49: constant 8
20040703-1.c:33:50: punctuator )
20040703-1.c:33:51: punctuator )
20040703-1.c:34:10: identifier num
20040703-1.c:34:13: punctuator .
20040703-1.c:34:14: identifier high
20040703-1.c:34:19: punctuator &=
20040703-1.c:34:22: punctuator (
20040703-1.c:34:23: punctuator (
20040703-1.c:34:24: identifier cpp_num_part
20040703-1.c:34:36: punctuator )
20040703-1.c:34:38: constant 1
20040703-1.c:34:40: punctuator <<
20040703-1.c:34:43: identifier precision
20040703-1.c:34:52: punctuator )
20040703-1.c:34:54: punctuator -
20040703-1.c:34:56: constant 1
20040703-1.c:34:57: punctuator ;
20040703-1.c:35:6: punctuator }
20040703-1.c:36:4: keyword else
20040703-1.c:37:6: punctuator {
20040703-1.c:38:8: keyword if
20040703-1.c:38:11: punctuator (
20040703-1.c:38:12: identifier precision
20040703-1.c:38:22: punctuator <
20040703-1.c:38:24: punctuator (
20040703-1.c:38:25: keyword sizeof
20040703-1.c:38:32: punctuator (
20040703-1.c:38:33: identifier cpp_num_part
20040703-1.c:38:45: punctuator )
20040703-1.c:38:47: punctuator *
20040703-1.c:38:49: constant 8
20040703-1.c:38:50: punctuator )
20040703-1.c:38:51: punctuator )
20040703-1.c:39:10: identifier num
20040703-1.c:39:13: punctuator .
20040703-1.c:39:14: identifier low
20040703-1.c:39:18: punctuator &=
20040703-1.c:39:21: punctuator (
20040703-1.c:39:22: punctuator (
20040703-1.c:39:23: identifier cpp_num_part
20040703-1.c:39:35: punctuator )
20040703-1.c:39:37: constant 1
20040703-1.c:39:39: punctuator <<
20040703-1.c:39:42: identifier precision
20040703-1.c:39:51: punctuator )
20040703-1.c:39:53: punctuator -
20040703-1.c:39:55: constant 1
20040703-1.c:39:56: punctuator ;
20040703-1.c:40:8: identifier num
20040703-1.c:40:11: punctuator .
20040703-1.c:40:12: identifier high
20040703-1.c:40:17: punctuator =
20040703-1.c:40:19: constant 0
20040703-1.c:40:20: punctuator ;
20040703-1.c:41:6: punctuator }
20040703-1.c:43:4: keyword return
20040703-1.c:43:11: identifier num
20040703-1.c:43:14: punctuator ;
20040703-1.c:44:1: punctuator }
20040703-1.c:47:1: keyword static
20040703-1.c:47:8: identifier cpp_num
20040703-1.c:48:1: identifier num_rshift
20040703-1.c:48:12: punctuator (
20040703-1.c:48:13: identifier cpp_num
20040703-1.c:48:21: identifier num
20040703-1.c:48:24: punctuator ,
20040703-1.c:48:26: keyword unsigned
20040703-1.c:48:35: keyword int
20040703-1.c:48:39: identifier precision
20040703-1.c:48:48: punctuator ,
20040703-1.c:48:50: keyword unsigned
20040703-1.c:48:59: keyword int
20040703-1.c:48:63: identifier n
20040703-1.c:48:64: punctuator )
20040703-1.c:49:1: punctuator {
20040703-1.c:50:4: identifier cpp_num_part
20040703-1.c:50:17: identifier sign_mask
20040703-1.c:50:26: punctuator ;
20040703-1.c:51:4: keyword int
20040703-1.c:51:8: identifier x
20040703-1.c:51:10: punctuator =
20040703-1.c:51:12: identifier num_positive
20040703-1.c:51:25: punctuator (
20040703-1.c:51:26: identifier num
20040703-1.c:51:29: punctuator ,
20040703-1.c:51:31: identifier precision
20040703-1.c:51:40: punctuator )
20040703-1.c:51:41: punctuator ;
20040703-1.c:53:4: keyword if
20040703-1.c:53:7: punctuator (
20040703-1.c:53:8: identifier num
20040703-1.c:53:11: punctuator .
20040703-1.c:53:12: identifier unsignedp
20040703-1.c:53:22: punctuator ||
20040703-1.c:53:25: identifier x
20040703-1.c:53:26: punctuator )
20040703-1.c:54:6: identifier sign_mask
20040703-1.c:54:16: punctuator =
20040703-1.c:54:18: constant 0
20040703-1.c:54:19: punctuator ;
20040703-1.c:55:4: keyword else
20040703-1.c:56:6: identifier sign_mask
20040703-1.c:56:16: punctuator =
20040703-1.c:56:18: punctuator ~
20040703-1.c:56:19: punctuator (
20040703-1.c:56:20: identifier cpp_num_part
20040703-1.c:56:32: punctuator )
20040703-1.c:56:34: constant 0
20040703-1.c:56:35: punctuator ;
20040703-1.c:58:4: keyword if
20040703-1.c:58:7: punctuator (
20040703-1.c:58:8: identifier n
20040703-1.c:58:10: punctuator >=
20040703-1.c:58:13: identifier precision
20040703-1.c:58:22: punctuator )
20040703-1.c:59:6: identifier num
20040703-1.c:59:9: punctuator .
20040703-1.c:59:10: identifier high
20040703-1.c:59:15: punctuator =
20040703-1.c:59:17: identifier num
20040703-1.c:59:20: punctuator .
20040703-1.c:59:21: identifier low
20040703-1.c:59:25: punctuator =
20040703-1.c:59:27: identifier sign_mask
20040703-1.c:59:36: punctuator ;
20040703-1.c:60:4: keyword else
20040703-1.c:61:6: punctuator {
20040703-1.c:63:8: keyword if
20040703-1.c:63:11: punctuator (
20040703-1.c:63:12: identifier precision
20040703-1.c:63:22: punctuator <
20040703-1.c:63:24: punctuator (
20040703-1.c:63:25: keyword sizeof
20040703-1.c:63:32: punctuator (
20040703-1.c:63:33: identifier cpp_num_part
20040703-1.c:63:45: punctuator )
20040703-1.c:63:47: punctuator *
20040703-1.c:63:49: constant 8
20040703-1.c:63:50: punctuator )
20040703-1.c:63:51: punctuator )
20040703-1.c:64:10: identifier num
20040703-1.c:64:13: punctuator .
20040703-1.c:64:14: identifier high
20040703-1.c:64:19: punctuator =
20040703-1.c:64:21: identifier sign_mask
20040703-1.c:64:30: punctuator ,
20040703-1.c:64:32: identifier num
20040703-1.c:64:35: punctuator .
20040703-1.c:64:36: identifier low
20040703-1.c:64:40: punctuator |=
20040703-1.c:64:43: identifier sign_mask
20040703-1.c:64:53: punctuator <<
20040703-1.c:64:56: identifier precision
20040703-1.c:64:65: punctuator ;
20040703-1.c:65:8: keyword else
20040703-1.c:65:13: keyword if
20040703-1.c:65:16: punctuator (
20040703-1.c:65:17: identifier precision
20040703-1.c:65:27: punctuator <
20040703-1.c:65:29: constant 2
20040703-1.c:65:31: punctuator *
20040703-1.c:65:33: punctuator (
20040703-1.c:65:34: keyword sizeof
20040703-1.c:65:41: punctuator (
20040703-1.c:65:42: identifier cpp_num_part
20040703-1.c:65:54: punctuator )
20040703-1.c:65:56: punctuator *
20040703-1.c:65:58: constant 8
20040703-1.c:65:59: punctuator )
20040703-1.c:65:60: punctuator )
20040703-1.c:66:10: identifier num
20040703-1.c:66:13: punctuator .
20040703-1.c:66:14: identifier high
20040703-1.c:66:19: punctuator |=
20040703-1.c:66:22: identifier sign_mask
20040703-1.c:66:32: punctuator <<
20040703-1.c:66:35: punctuator (
20040703-1.c:66:36: identifier precision
20040703-1.c:66:46: punctuator -
20040703-1.c:66:48: punctuator (
20040703-1.c:66:49: keyword sizeof
20040703-1.c:66:56: punctuator (
20040703-1.c:66:57: identifier cpp_num_part
20040703-1.c:66:69: punctuator )
20040703-1.c:66:71: punctuator *
20040703-1.c:66:73: constant 8
20040703-1.c:66:74: punctuator )
20040703-1.c:66:75: punctuator )
20040703-1.c:66:76: punctuator ;
20040703-1.c:68:8: keyword if
20040703-1.c:68:11: punctuator (
20040703-1.c:68:12: identifier n
20040703-1.c:68:14: punctuator >=
20040703-1.c:68:17: punctuator (
20040703-1.c:68:18: keyword sizeof
20040703-1.c:68:25: punctuator (
20040703-1.c:68:26: identifier cpp_num_part
20040703-1.c:68:38: punctuator )
20040703-1.c:68:40: punctuator *
20040703-1.c:68:42: constant 8
20040703-1.c:68:43: punctuator )
20040703-1.c:68:44: punctuator )
20040703-1.c:69:10: punctuator {
20040703-1.c:70:12: identifier n
20040703-1.c:70:14: punctuator -=
20040703-1.c:70:17: punctuator (
20040703-1.c:70:18: keyword sizeof
20040703-1.c:70:25: punctuator (
20040703-1.c:70:26: identifier cpp_num_part
20040703-1.c:70:38: punctuator )
20040703-1.c:70:40: punctuator *
20040703-1.c:70:42: constant 8
20040703-1.c:70:43: punctuator )
20040703-1.c:70:44: punctuator ;
20040703-1.c:71:12: identifier num
20040703-1.c:71:15: punctuator .
20040703-1.c:71:16: identifier low
20040703-1.c:71:20: punctuator =
20040703-1.c:71:22: identifier num
20040703-1.c:71:25: punctuator .
20040703-1.c:71:26: identifier high
20040703-1.c:71:30: punctuator ;
20040703-1.c:72:12: identifier num
20040703-1.c:72:15: punctuator .
20040703-1.c:72:16: identifier high
20040703-1.c:72:21: punctuator =
20040703-1.c:72:23: identifier sign_mask
20040703-1.c:72:32: punctuator ;
20040703-1.c:73:10: punctuator }
20040703-1.c:75:8: keyword if
20040703-1.c:75:11: punctuator (
20040703-1.c:75:12: identifier n
20040703-1.c:75:13: punctuator )
20040703-1.c:76:10: punctuator {
20040703-1.c:77:12: identifier num
20040703-1.c:77:15: punctuator .
20040703-1.c:77:16: identifier low
20040703-1.c:77:20: punctuator =
20040703-1.c:77:22: punctuator (
20040703-1.c:77:23: identifier num
20040703-1.c:77:26: punctuator .
20040703-1.c:77:27: identifier low
20040703-1.c:77:31: punctuator >>
20040703-1.c:77:34: identifier n
20040703-1.c:77:35: punctuator )
20040703-1.c:77:37: punctuator |
20040703-1.c:77:39: punctuator (
20040703-1.c:77:40: identifier num
20040703-1.c:77:43: punctuator .
20040703-1.c:77:44: identifier high
20040703-1.c:77:49: punctuator <<
20040703-1.c:77:52: punctuator (
20040703-1.c:77:53: punctuator (
20040703-1.c:77:54: keyword sizeof
20040703-1.c:77:61: punctuator (
20040703-1.c:77:62: identifier cpp_num_part
20040703-1.c:77:74: punctuator )
20040703-1.c:77:76: punctuator *
20040703-1.c:77:78: constant 8
20040703-1.c:77:79: punctuator )
20040703-1.c:77:81: punctuator -
20040703-1.c:77:83: identifier n
20040703-1.c:77:84: punctuator )
20040703-1.c:77:85: punctuator )
20040703-1.c:77:86: punctuator ;
20040703-1.c:78:12: identifier num
20040703-1.c:78:15: punctuator .
20040703-1.c:78:16: identifier high
20040703-1.c:78:21: punctuator =
20040703-1.c:78:23: punctuator (
20040703-1.c:78:24: identifier num
20040703-1.c:78:27: punctuator .
20040703-1.c:78:28: identifier high
20040703-1.c:78:33: punctuator >>
20040703-1.c:78:36: identifier n
20040703-1.c:78:37: punctuator )
20040703-1.c:78:39: punctuator |
20040703-1.c:78:41: punctuator (
20040703-1.c:78:42: identifier sign_mask
20040703-1.c:78:52: punctuator <<
20040703-1.c:78:55: punctuator (
20040703-1.c:78:56: punctuator (
20040703-1.c:78:57: keyword sizeof
20040703-1.c:78:64: punctuator (
20040703-1.c:78:65: identifier cpp_num_part
20040703-1.c:78:77: punctuator )
20040703-1.c:78:79: punctuator *
20040703-1.c:78:81: constant 8
20040703-1.c:78:82: punctuator )
20040703-1.c:78:84: punctuator -
20040703-1.c:78:86: identifier n
20040703-1.c:78:87: punctuator )
20040703-1.c:78:88: punctuator )
20040703-1.c:78:89: punctuator ;
20040703-1.c:79:10: punctuator }
20040703-1.c:80:6: punctuator }
20040703-1.c:82:4: identifier num
20040703-1.c:82:8: punctuator =
20040703-1.c:82:10: identifier num_trim
20040703-1.c:82:19: punctuator (
20040703-1.c:82:20: identifier num
20040703-1.c:82:23: punctuator ,
20040703-1.c:82:25: identifier precision
20040703-1.c:82:34: punctuator )
20040703-1.c:82:35: punctuator ;
20040703-1.c:83:4: identifier num
20040703-1.c:83:7: punctuator .
20040703-1.c:83:8: identifier overflow
20040703-1.c:83:17: punctuator =
20040703-1.c:83:19: constant 0
20040703-1.c:83:20: punctuator ;
20040703-1.c:84:4: keyword return
20040703-1.c:84:11: identifier num
20040703-1.c:84:14: punctuator ;
20040703-1.c:85:1: punctuator }
20040703-1.c:89:1: identifier cpp_num
20040703-1.c:90:1: identifier num_lshift
20040703-1.c:90:12: punctuator (
20040703-1.c:90:13: identifier cpp_num
20040703-1.c:90:21: identifier num
20040703-1.c:90:24: punctuator ,
20040703-1.c:90:26: keyword unsigned
20040703-1.c:90:35: keyword int
20040703-1.c:90:39: identifier precision
20040703-1.c:90:48: punctuator ,
20040703-1.c:90:50: keyword unsigned
20040703-1.c:90:59: keyword int
20040703-1.c:90:63: identifier n
20040703-1.c:90:64: punctuator )
20040703-1.c:91:1: punctuator {
20040703-1.c:92:4: keyword if
20040703-1.c:92:7: punctuator (
20040703-1.c:92:8: identifier n
20040703-1.c:92:10: punctuator >=
20040703-1.c:92:13: identifier precision
20040703-1.c:92:22: punctuator )
20040703-1.c:93:6: punctuator {
20040703-1.c:94:8: identifier num
20040703-1.c:94:11: punctuator .
20040703-1.c:94:12: identifier overflow
20040703-1.c:94:21: punctuator =
20040703-1.c:94:23: punctuator !
20040703-1.c:94:24: identifier num
20040703-1.c:94:27: punctuator .
20040703-1.c:94:28: identifier unsignedp
20040703-1.c:94:38: punctuator &&
20040703-1.c:94:41: punctuator !
20040703-1.c:94:42: punctuator (
20040703-1.c:94:43: punctuator (
20040703-1.c:94:44: identifier num
20040703-1.c:94:47: punctuator .
20040703-1.c:94:48: identifier low
20040703-1.c:94:52: punctuator |
20040703-1.c:94:54: identifier num
20040703-1.c:94:57: punctuator .
20040703-1.c:94:58: identifier high
20040703-1.c:94:62: punctuator )
20040703-1.c:94:64: punctuator ==
20040703-1.c:94:67: constant 0
20040703-1.c:94:68: punctuator )
20040703-1.c:94:69: punctuator ;
20040703-1.c:95:8: identifier num
20040703-1.c:95:11: punctuator .
20040703-1.c:95:12: identifier high
20040703-1.c:95:17: punctuator =
20040703-1.c:95:19: identifier num
20040703-1.c:95:22: punctuator .
20040703-1.c:95:23: identifier low
20040703-1.c:95:27: punctuator =
20040703-1.c:95:29: constant 0
20040703-1.c:95:30: punctuator ;
20040703-1.c:96:6: punctuator }
20040703-1.c:97:4: keyword else
20040703-1.c:98:6: punctuator {
20040703-1.c:99:8: identifier cpp_num
20040703-1.c:99:16: identifier orig
20040703-1.c:99:20: punctuator ;
20040703-1.c:100:8: keyword unsigned
20040703-1.c:100:17: keyword int
20040703-1.c:100:21: identifier m
20040703-1.c:100:23: punctuator =
20040703-1.c:100:25: identifier n
20040703-1.c:100:26: punctuator ;
20040703-1.c:102:8: identifier orig
20040703-1.c:102:13: punctuator =
20040703-1.c:102:15: identifier num
20040703-1.c:102:18: punctuator ;
20040703-1.c:103:8: keyword if
20040703-1.c:103:11: punctuator (
20040703-1.c:103:12: identifier m
20040703-1.c:103:14: punctuator >=
20040703-1.c:103:17: punctuator (
20040703-1.c:103:18: keyword sizeof
20040703-1.c:103:25: punctuator (
20040703-1.c:103:26: identifier cpp_num_part
20040703-1.c:103:38: punctuator )
20040703-1.c:103:40: punctuator *
20040703-1.c:103:42: constant 8
20040703-1.c:103:43: punctuator )
20040703-1.c:103:44: punctuator )
20040703-1.c:104:10: punctuator {
20040703-1.c:105:12: identifier m
20040703-1.c:105:14: punctuator -=
20040703-1.c:105:17: punctuator (
20040703-1.c:105:18: keyword sizeof
20040703-1.c:105:25: punctuator (
20040703-1.c:105:26: identifier cpp_num_part
20040703-1.c:105:38: punctuator )
20040703-1.c:105:40: punctuator *
20040703-1.c:105:42: constant 8
20040703-1.c:105:43: punctuator )
20040703-1.c:105:44: punctuator ;
20040703-1.c:106:12: identifier num
20040703-1.c:106:15: punctuator .
20040703-1.c:106:16: identifier high
20040703-1.c:106:21: punctuator =
20040703-1.c:106:23: identifier num
20040703-1.c:106:26: punctuator .
20040703-1.c:106:27: identifier low
20040703-1.c:106:30: punctuator ;
20040703-1.c:107:12: identifier num
20040703-1.c:107:15: punctuator .
20040703-1.c:107:16: identifier low
20040703-1.c:107:20: punctuator =
20040703-1.c:107:22: constant 0
20040703-1.c:107:23: punctuator ;
20040703-1.c:108:10: punctuator }
20040703-1.c:109:8: keyword if
20040703-1.c:109:11: punctuator (
20040703-1.c:109:12: identifier m
20040703-1.c:109:13: punctuator )
20040703-1.c:110:10: punctuator {
20040703-1.c:111:12: identifier num
20040703-1.c:111:15: punctuator .
20040703-1.c:111:16: identifier high
20040703-1.c:111:21: punctuator =
20040703-1.c:111:23: punctuator (
20040703-1.c:111:24: identifier num
20040703-1.c:111:27: punctuator .
20040703-1.c:111:28: identifier high
20040703-1.c:111:33: punctuator <<
20040703-1.c:111:36: identifier m
20040703-1.c:111:37: punctuator )
20040703-1.c:111:39: punctuator |
20040703-1.c:111:41: punctuator (
20040703-1.c:111:42: identifier num
20040703-1.c:111:45: punctuator .
20040703-1.c:111:46: identifier low
20040703-1.c:111:50: punctuator >>
20040703-1.c:111:53: punctuator (
20040703-1.c:111:54: punctuator (
20040703-1.c:111:55: keyword sizeof
20040703-1.c:111:62: punctuator (
20040703-1.c:111:63: identifier cpp_num_part
20040703-1.c:111:75: punctuator )
20040703-1.c:111:77: punctuator *
20040703-1.c:111:79: constant 8
20040703-1.c:111:80: punctuator )
20040703-1.c:111:82: punctuator -
20040703-1.c:111:84: identifier m
20040703-1.c:111:85: punctuator )
20040703-1.c:111:86: punctuator )
20040703-1.c:111:87: punctuator ;
20040703-1.c:112:12: identifier num
20040703-1.c:112:15: punctuator .
20040703-1.c:112:16: identifier low
20040703-1.c:112:20: punctuator <<=
20040703-1.c:112:24: identifier m
20040703-1.c:112:25: punctuator ;
20040703-1.c:113:10: punctuator }
20040703-1.c:114:8: identifier num
20040703-1.c:114:12: punctuator =
20040703-1.c:114:14: identifier num_trim
20040703-1.c:114:23: punctuator (
20040703-1.c:114:24: identifier num
20040703-1.c:114:27: punctuator ,
20040703-1.c:114:29: identifier precision
20040703-1.c:114:38: punctuator )
20040703-1.c:114:39: punctuator ;
20040703-1.c:116:8: keyword if
20040703-1.c:116:11: punctuator (
20040703-1.c:116:12: identifier num
20040703-1.c:116:15: punctuator .
20040703-1.c:116:16: identifier unsignedp
20040703-1.c:116:25: punctuator )
20040703-1.c:117:10: identifier num
20040703-1.c:117:13: punctuator .
20040703-1.c:117:14: identifier overflow
20040703-1.c:117:23: punctuator =
20040703-1.c:117:25: constant 0
20040703-1.c:117:26: punctuator ;
20040703-1.c:118:8: keyword else
20040703-1.c:119:10: punctuator {
20040703-1.c:120:12: identifier cpp_num
20040703-1.c:120:20: identifier maybe_orig
20040703-1.c:120:31: punctuator =
20040703-1.c:120:33: identifier num_rshift
20040703-1.c:120:44: punctuator (
20040703-1.c:120:45: identifier num
20040703-1.c:120:48: punctuator ,
20040703-1.c:120:50: identifier precision
20040703-1.c:120:59: punctuator ,
20040703-1.c:120:61: identifier n
20040703-1.c:120:62: punctuator )
20040703-1.c:120:63: punctuator ;
20040703-1.c:121:12: identifier num
20040703-1.c:121:15: punctuator .
20040703-1.c:121:16: identifier overflow
20040703-1.c:121:25: punctuator =
20040703-1.c:121:27: punctuator !
20040703-1.c:121:28: punctuator (
20040703-1.c:121:29: identifier orig
20040703-1.c:121:33: punctuator .
20040703-1.c:121:34: identifier low
20040703-1.c:121:38: punctuator ==
20040703-1.c:121:41: identifier maybe_orig
20040703-1.c:121:51: punctuator .
20040703-1.c:121:52: identifier low
20040703-1.c:121:56: punctuator &&
20040703-1.c:121:59: identifier orig
20040703-1.c:121:63: punctuator .
20040703-1.c:121:64: identifier high
20040703-1.c:121:69: punctuator ==
20040703-1.c:121:72: identifier maybe_orig
20040703-1.c:121:82: punctuator .
20040703-1.c:121:83: identifier high
20040703-1.c:121:87: punctuator )
20040703-1.c:121:88: punctuator ;
20040703-1.c:122:10: punctuator }
20040703-1.c:123:6: punctuator }
20040703-1.c:125:4: keyword return
20040703-1.c:125:11: identifier num
20040703-1.c:125:14: punctuator ;
20040703-1.c:126:1: punctuator }
20040703-1.c:128:1: keyword unsigned
20040703-1.c:128:10: keyword int
20040703-1.c:128:14: identifier precision
20040703-1.c:128:24: punctuator =
20040703-1.c:128:26: constant 64
20040703-1.c:128:28: punctuator ;
20040703-1.c:129:1: keyword unsigned
20040703-1.c:129:10: keyword int
20040703-1.c:129:14: identifier n
20040703-1.c:129:16: punctuator =
20040703-1.c:129:18: constant 16
20040703-1.c:129:20: punctuator ;
20040703-1.c:131:1: identifier cpp_num
20040703-1.c:131:9: identifier num
20040703-1.c:131:13: punctuator =
20040703-1.c:131:15: punctuator {
20040703-1.c:131:17: constant 0
20040703-1.c:131:18: punctuator ,
20040703-1.c:131:20: constant 3
20040703-1.c:131:21: punctuator ,
20040703-1.c:131:23: constant 0
20040703-1.c:131:24: punctuator ,
20040703-1.c:131:26: constant 0
20040703-1.c:131:28: punctuator }
20040703-1.c:131:29: punctuator ;
20040703-1.c:133:1: keyword int
20040703-1.c:133:5: identifier main
20040703-1.c:133:9: punctuator (
20040703-1.c:133:10: punctuator )
20040703-1.c:134:1: punctuator {
20040703-1.c:135:4: identifier cpp_num
20040703-1.c:135:12: identifier res
20040703-1.c:135:16: punctuator =
20040703-1.c:135:18: identifier num_lshift
20040703-1.c:135:29: punctuator (
20040703-1.c:135:30: identifier num
20040703-1.c:135:33: punctuator ,
20040703-1.c:135:35: constant 64
20040703-1.c:135:37: punctuator ,
20040703-1.c:135:39: identifier n
20040703-1.c:135:40: punctuator )
20040703-1.c:135:41: punctuator ;
20040703-1.c:137:4: keyword if
20040703-1.c:137:7: punctuator (
20040703-1.c:137:8: identifier res
20040703-1.c:137:11: punctuator .
20040703-1.c:137:12: identifier low
20040703-1.c:137:16: punctuator !=
20040703-1.c:137:19: constant 0x30000
20040703-1.c:137:26: punctuator )
20040703-1.c:138:6: identifier abort
20040703-1.c:138:12: punctuator (
20040703-1.c:138:13: punctuator )
20040703-1.c:138:14: punctuator ;
20040703-1.c:140:4: keyword if
20040703-1.c:140:7: punctuator (
20040703-1.c:140:8: identifier res
20040703-1.c:140:11: punctuator .
20040703-1.c:140:12: identifier high
20040703-1.c:140:17: punctuator !=
20040703-1.c:140:20: constant 0
20040703-1.c:140:21: punctuator )
20040703-1.c:141:6: identifier abort
20040703-1.c:141:12: punctuator (
20040703-1.c:141:13: punctuator )
20040703-1.c:141:14: punctuator ;
20040703-1.c:143:4: keyword if
20040703-1.c:143:7: punctuator (
20040703-1.c:143:8: identifier res
20040703-1.c:143:11: punctuator .
20040703-1.c:143:12: identifier overflow
20040703-1.c:143:21: punctuator !=
20040703-1.c:143:24: constant 0
20040703-1.c:143:25: punctuator )
20040703-1.c:144:6: identifier abort
20040703-1.c:144:12: punctuator (
20040703-1.c:144:13: punctuator )
20040703-1.c:144:14: punctuator ;
20040703-1.c:146:4: identifier exit
20040703-1.c:146:9: punctuator (
20040703-1.c:146:10: constant 0
20040703-1.c:146:11: punctuator )
20040703-1.c:146:12: punctuator ;
20040703-1.c:147:1: punctuator }
