0
20000801-2.c:1:1: keyword extern
20000801-2.c:1:8: keyword void
20000801-2.c:1:13: identifier abort
20000801-2.c:1:18: punctuator (
20000801-2.c:1:19: keyword void
20000801-2.c:1:23: punctuator )
20000801-2.c:1:24: punctuator ;
20000801-2.c:2:1: keyword extern
20000801-2.c:2:8: keyword void
20000801-2.c:2:13: identifier exit
20000801-2.c:2:17: punctuator (
20000801-2.c:2:18: keyword int
20000801-2.c:2:21: punctuator )
20000801-2.c:2:22: punctuator ;
20000801-2.c:3:1: keyword int
20000801-2.c:3:5: identifier bar
20000801-2.c:3:8: punctuator (
20000801-2.c:3:9: keyword void
20000801-2.c:3:13: punctuator )
20000801-2.c:3:14: punctuator ;
20000801-2.c:4:1: keyword int
20000801-2.c:4:5: identifier baz
20000801-2.c:4:8: punctuator (
20000801-2.c:4:9: keyword void
20000801-2.c:4:13: punctuator )
20000801-2.c:4:14: punctuator ;
20000801-2.c:6:1: keyword struct
20000801-2.c:6:8: identifier foo
20000801-2.c:6:12: punctuator {
20000801-2.c:7:3: keyword struct
20000801-2.c:7:10: identifier foo
20000801-2.c:7:14: punctuator *
20000801-2.c:7:15: identifier next
20000801-2.c:7:19: punctuator ;
20000801-2.c:8:1: punctuator }
20000801-2.c:8:2: punctuator ;
20000801-2.c:10:1: keyword struct
20000801-2.c:10:8: identifier foo
20000801-2.c:10:12: punctuator *
20000801-2.c:10:13: identifier test
20000801-2.c:10:17: punctuator (
20000801-2.c:10:18: keyword struct
20000801-2.c:10:25: identifier foo
20000801-2.c:10:29: punctuator *
20000801-2.c:10:30: identifier node
20000801-2.c:10:34: punctuator )
20000801-2.c:11:1: punctuator {
20000801-2.c:12:3: keyword while
20000801-2.c:12:9: punctuator (
20000801-2.c:12:10: identifier node
20000801-2.c:12:14: punctuator )
20000801-2.c:12:16: punctuator {
20000801-2.c:13:5: keyword if
20000801-2.c:13:8: punctuator (
20000801-2.c:13:9: identifier bar
20000801-2.c:13:12: punctuator (
20000801-2.c:13:13: punctuator )
20000801-2.c:13:15: punctuator &&
20000801-2.c:13:18: punctuator !
20000801-2.c:13:19: identifier baz
20000801-2.c:13:22: punctuator (
20000801-2.c:13:23: punctuator )
20000801-2.c:13:24: punctuator )
20000801-2.c:14:7: keyword break
20000801-2.c:14:12: punctuator ;
20000801-2.c:15:5: identifier node
20000801-2.c:15:10: punctuator =
20000801-2.c:15:12: identifier node
20000801-2.c:15:16: punctuator ->
20000801-2.c:15:18: identifier next
20000801-2.c:15:22: punctuator ;
20000801-2.c:16:3: punctuator }
20000801-2.c:17:3: keyword return
20000801-2.c:17:10: identifier node
20000801-2.c:17:14: punctuator ;
20000801-2.c:18:1: punctuator }
20000801-2.c:20:1: keyword int
20000801-2.c:20:5: identifier bar
20000801-2.c:20:9: punctuator (
20000801-2.c:20:10: keyword void
20000801-2.c:20:14: punctuator )
20000801-2.c:21:1: punctuator {
20000801-2.c:22:3: keyword return
20000801-2.c:22:10: constant 0
20000801-2.c:22:11: punctuator ;
20000801-2.c:23:1: punctuator }
20000801-2.c:25:1: keyword int
20000801-2.c:25:5: identifier baz
20000801-2.c:25:9: punctuator (
20000801-2.c:25:10: keyword void
20000801-2.c:25:14: punctuator )
20000801-2.c:26:1: punctuator {
20000801-2.c:27:3: keyword return
20000801-2.c:27:10: constant 0
20000801-2.c:27:11: punctuator ;
20000801-2.c:28:1: punctuator }
20000801-2.c:30:1: keyword int
20000801-2.c:30:5: identifier main
20000801-2.c:30:9: punctuator (
20000801-2.c:30:10: keyword void
20000801-2.c:30:14: punctuator )
20000801-2.c:31:1: punctuator {
20000801-2.c:32:3: keyword struct
20000801-2.c:32:10: identifier foo
20000801-2.c:32:14: identifier a
20000801-2.c:32:15: punctuator ,
20000801-2.c:32:17: identifier b
20000801-2.c:32:18: punctuator ,
20000801-2.c:32:20: punctuator *
20000801-2.c:32:21: identifier c
20000801-2.c:32:22: punctuator ;
20000801-2.c:34:3: identifier a
20000801-2.c:34:4: punctuator .
20000801-2.c:34:5: identifier next
20000801-2.c:34:10: punctuator =
20000801-2.c:34:12: punctuator &
20000801-2.c:34:13: identifier b
20000801-2.c:34:14: punctuator ;
20000801-2.c:35:3: identifier b
20000801-2.c:35:4: punctuator .
20000801-2.c:35:5: identifier next
20000801-2.c:35:10: punctuator =
20000801-2.c:35:12: punctuator (
20000801-2.c:35:13: keyword struct
20000801-2.c:35:20: identifier foo
20000801-2.c:35:24: punctuator *
20000801-2.c:35:25: punctuator )
20000801-2.c:35:26: constant 0
20000801-2.c:35:27: punctuator ;
20000801-2.c:36:3: identifier c
20000801-2.c:36:5: punctuator =
20000801-2.c:36:7: identifier test
20000801-2.c:36:11: punctuator (
20000801-2.c:36:12: punctuator &
20000801-2.c:36:13: identifier a
20000801-2.c:36:14: punctuator )
20000801-2.c:36:15: punctuator ;
20000801-2.c:37:3: keyword if
20000801-2.c:37:6: punctuator (
20000801-2.c:37:7: identifier c
20000801-2.c:37:8: punctuator )
20000801-2.c:38:5: identifier abort
20000801-2.c:38:10: punctuator (
20000801-2.c:38:11: punctuator )
20000801-2.c:38:12: punctuator ;
20000801-2.c:39:3: identifier exit
20000801-2.c:39:8: punctuator (
20000801-2.c:39:9: constant 0
20000801-2.c:39:10: punctuator )
20000801-2.c:39:11: punctuator ;
20000801-2.c:40:1: punctuator }
