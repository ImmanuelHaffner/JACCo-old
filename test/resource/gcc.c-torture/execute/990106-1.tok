0
990106-1.c:1:1: identifier foo
990106-1.c:1:4: punctuator (
990106-1.c:1:5: identifier bufp
990106-1.c:1:9: punctuator )
990106-1.c:2:1: keyword char
990106-1.c:2:6: punctuator *
990106-1.c:2:7: identifier bufp
990106-1.c:2:11: punctuator ;
990106-1.c:3:1: punctuator {
990106-1.c:4:5: keyword int
990106-1.c:4:9: identifier x
990106-1.c:4:11: punctuator =
990106-1.c:4:13: constant 80
990106-1.c:4:15: punctuator ;
990106-1.c:5:5: keyword return
990106-1.c:5:12: punctuator (
990106-1.c:5:13: punctuator *
990106-1.c:5:14: identifier bufp
990106-1.c:5:18: punctuator ++
990106-1.c:5:21: punctuator =
990106-1.c:5:23: identifier x
990106-1.c:5:25: punctuator ?
990106-1.c:5:27: constant 'a'
990106-1.c:5:31: punctuator :
990106-1.c:5:33: constant 'b'
990106-1.c:5:36: punctuator )
990106-1.c:5:37: punctuator ;
990106-1.c:6:1: punctuator }
990106-1.c:8:1: identifier main
990106-1.c:8:5: punctuator (
990106-1.c:8:6: punctuator )
990106-1.c:9:1: punctuator {
990106-1.c:10:3: keyword char
990106-1.c:10:8: identifier x
990106-1.c:10:9: punctuator ;
990106-1.c:12:3: keyword if
990106-1.c:12:6: punctuator (
990106-1.c:12:7: identifier foo
990106-1.c:12:11: punctuator (
990106-1.c:12:12: punctuator &
990106-1.c:12:13: identifier x
990106-1.c:12:14: punctuator )
990106-1.c:12:16: punctuator !=
990106-1.c:12:19: constant 'a'
990106-1.c:12:22: punctuator )
990106-1.c:13:5: identifier abort
990106-1.c:13:11: punctuator (
990106-1.c:13:12: punctuator )
990106-1.c:13:13: punctuator ;
990106-1.c:15:3: identifier exit
990106-1.c:15:8: punctuator (
990106-1.c:15:9: constant 0
990106-1.c:15:10: punctuator )
990106-1.c:15:11: punctuator ;
990106-1.c:16:1: punctuator }
