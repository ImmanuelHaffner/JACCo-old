0
acc1.c:3:1: keyword double
acc1.c:3:8: identifier func
acc1.c:3:13: punctuator (
acc1.c:3:14: keyword const
acc1.c:3:20: keyword double
acc1.c:3:27: punctuator *
acc1.c:3:28: identifier array
acc1.c:3:33: punctuator )
acc1.c:4:1: punctuator {
acc1.c:5:3: keyword double
acc1.c:5:10: identifier d
acc1.c:5:12: punctuator =
acc1.c:5:14: punctuator *
acc1.c:5:15: identifier array
acc1.c:5:20: punctuator ;
acc1.c:6:3: keyword if
acc1.c:6:6: punctuator (
acc1.c:6:7: identifier d
acc1.c:6:9: punctuator ==
acc1.c:6:12: constant 0.0
acc1.c:6:15: punctuator )
acc1.c:7:5: keyword return
acc1.c:7:12: identifier d
acc1.c:7:13: punctuator ;
acc1.c:8:3: keyword else
acc1.c:9:5: keyword return
acc1.c:9:12: identifier d
acc1.c:9:14: punctuator +
acc1.c:9:16: identifier func
acc1.c:9:21: punctuator (
acc1.c:9:22: identifier array
acc1.c:9:28: punctuator +
acc1.c:9:30: constant 1
acc1.c:9:31: punctuator )
acc1.c:9:32: punctuator ;
acc1.c:10:1: punctuator }
acc1.c:12:1: keyword int
acc1.c:12:5: identifier main
acc1.c:12:10: punctuator (
acc1.c:12:11: punctuator )
acc1.c:13:1: punctuator {
acc1.c:14:3: keyword double
acc1.c:14:10: identifier values
acc1.c:14:16: punctuator [
acc1.c:14:17: punctuator ]
acc1.c:14:19: punctuator =
acc1.c:14:21: punctuator {
acc1.c:14:23: constant 0.1e-100
acc1.c:14:31: punctuator ,
acc1.c:14:33: constant 1.0
acc1.c:14:36: punctuator ,
acc1.c:14:38: punctuator -
acc1.c:14:39: constant 1.0
acc1.c:14:42: punctuator ,
acc1.c:14:44: constant 0.0
acc1.c:14:48: punctuator }
acc1.c:14:49: punctuator ;
acc1.c:15:3: keyword if
acc1.c:15:6: punctuator (
acc1.c:15:7: identifier func
acc1.c:15:12: punctuator (
acc1.c:15:13: identifier values
acc1.c:15:19: punctuator )
acc1.c:15:21: punctuator !=
acc1.c:15:24: constant 0.1e-100
acc1.c:15:32: punctuator )
acc1.c:16:5: identifier abort
acc1.c:16:11: punctuator (
acc1.c:16:12: punctuator )
acc1.c:16:13: punctuator ;
acc1.c:17:3: identifier exit
acc1.c:17:8: punctuator (
acc1.c:17:9: constant 0
acc1.c:17:10: punctuator )
acc1.c:17:11: punctuator ;
acc1.c:18:1: punctuator }
