0
strstr.c:1:1: keyword extern
strstr.c:1:8: keyword void
strstr.c:1:13: identifier abort
strstr.c:1:19: punctuator (
strstr.c:1:20: keyword void
strstr.c:1:24: punctuator )
strstr.c:1:25: punctuator ;
strstr.c:2:1: keyword extern
strstr.c:2:8: keyword int
strstr.c:2:12: identifier inside_main
strstr.c:2:23: punctuator ;
strstr.c:4:1: identifier __attribute__
strstr.c:4:15: punctuator (
strstr.c:4:16: punctuator (
strstr.c:4:17: identifier __noinline__
strstr.c:4:29: punctuator )
strstr.c:4:30: punctuator )
strstr.c:5:1: keyword char
strstr.c:5:6: punctuator *
strstr.c:6:1: identifier strstr
strstr.c:6:7: punctuator (
strstr.c:6:8: keyword const
strstr.c:6:14: keyword char
strstr.c:6:19: punctuator *
strstr.c:6:20: identifier s1
strstr.c:6:22: punctuator ,
strstr.c:6:24: keyword const
strstr.c:6:30: keyword char
strstr.c:6:35: punctuator *
strstr.c:6:36: identifier s2
strstr.c:6:38: punctuator )
strstr.c:7:1: punctuator {
strstr.c:8:3: keyword const
strstr.c:8:9: keyword char
strstr.c:8:14: punctuator *
strstr.c:8:15: identifier p
strstr.c:8:16: punctuator ,
strstr.c:8:18: punctuator *
strstr.c:8:19: identifier q
strstr.c:8:20: punctuator ;
strstr.c:16:3: keyword for
strstr.c:16:7: punctuator (
strstr.c:16:8: punctuator ;
strstr.c:16:10: punctuator *
strstr.c:16:11: identifier s1
strstr.c:16:13: punctuator ;
strstr.c:16:15: identifier s1
strstr.c:16:17: punctuator ++
strstr.c:16:19: punctuator )
strstr.c:17:5: punctuator {
strstr.c:18:7: identifier p
strstr.c:18:9: punctuator =
strstr.c:18:11: identifier s1
strstr.c:18:13: punctuator ,
strstr.c:18:15: identifier q
strstr.c:18:17: punctuator =
strstr.c:18:19: identifier s2
strstr.c:18:21: punctuator ;
strstr.c:19:7: keyword while
strstr.c:19:13: punctuator (
strstr.c:19:14: punctuator *
strstr.c:19:15: identifier q
strstr.c:19:17: punctuator &&
strstr.c:19:20: punctuator *
strstr.c:19:21: identifier p
strstr.c:19:22: punctuator )
strstr.c:20:2: punctuator {
strstr.c:21:4: keyword if
strstr.c:21:7: punctuator (
strstr.c:21:8: punctuator *
strstr.c:21:9: identifier q
strstr.c:21:11: punctuator !=
strstr.c:21:14: punctuator *
strstr.c:21:15: identifier p
strstr.c:21:16: punctuator )
strstr.c:22:6: keyword break
strstr.c:22:11: punctuator ;
strstr.c:23:4: identifier p
strstr.c:23:5: punctuator ++
strstr.c:23:7: punctuator ,
strstr.c:23:9: identifier q
strstr.c:23:10: punctuator ++
strstr.c:23:12: punctuator ;
strstr.c:24:2: punctuator }
strstr.c:25:7: keyword if
strstr.c:25:10: punctuator (
strstr.c:25:11: punctuator *
strstr.c:25:12: identifier q
strstr.c:25:14: punctuator ==
strstr.c:25:17: constant 0
strstr.c:25:18: punctuator )
strstr.c:26:2: keyword return
strstr.c:26:9: punctuator (
strstr.c:26:10: keyword char
strstr.c:26:15: punctuator *
strstr.c:26:16: punctuator )
strstr.c:26:17: identifier s1
strstr.c:26:19: punctuator ;
strstr.c:27:5: punctuator }
strstr.c:28:3: keyword return
strstr.c:28:10: constant 0
strstr.c:28:11: punctuator ;
strstr.c:29:1: punctuator }
