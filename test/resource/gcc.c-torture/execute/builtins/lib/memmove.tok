0
memmove.c:1:1: keyword extern
memmove.c:1:8: keyword void
memmove.c:1:13: identifier abort
memmove.c:1:19: punctuator (
memmove.c:1:20: keyword void
memmove.c:1:24: punctuator )
memmove.c:1:25: punctuator ;
memmove.c:2:1: keyword extern
memmove.c:2:8: keyword int
memmove.c:2:12: identifier inside_main
memmove.c:2:23: punctuator ;
memmove.c:4:1: identifier __attribute__
memmove.c:4:15: punctuator (
memmove.c:4:16: punctuator (
memmove.c:4:17: identifier __noinline__
memmove.c:4:29: punctuator )
memmove.c:4:30: punctuator )
memmove.c:5:1: keyword void
memmove.c:5:6: punctuator *
memmove.c:6:1: identifier memmove
memmove.c:6:9: punctuator (
memmove.c:6:10: keyword void
memmove.c:6:15: punctuator *
memmove.c:6:16: identifier dst
memmove.c:6:19: punctuator ,
memmove.c:6:21: keyword const
memmove.c:6:27: keyword void
memmove.c:6:32: punctuator *
memmove.c:6:33: identifier src
memmove.c:6:36: punctuator ,
memmove.c:6:38: keyword long
memmove.c:6:43: keyword unsigned
memmove.c:6:52: keyword int
memmove.c:6:56: identifier n
memmove.c:6:57: punctuator )
memmove.c:7:1: punctuator {
memmove.c:8:3: keyword char
memmove.c:8:8: punctuator *
memmove.c:8:9: identifier dstp
memmove.c:8:13: punctuator ;
memmove.c:9:3: keyword const
memmove.c:9:9: keyword char
memmove.c:9:14: punctuator *
memmove.c:9:15: identifier srcp
memmove.c:9:19: punctuator ;
memmove.c:16:3: identifier srcp
memmove.c:16:8: punctuator =
memmove.c:16:10: identifier src
memmove.c:16:13: punctuator ;
memmove.c:17:3: identifier dstp
memmove.c:17:8: punctuator =
memmove.c:17:10: identifier dst
memmove.c:17:13: punctuator ;
memmove.c:18:3: keyword if
memmove.c:18:6: punctuator (
memmove.c:18:7: identifier srcp
memmove.c:18:12: punctuator <
memmove.c:18:14: identifier dstp
memmove.c:18:18: punctuator )
memmove.c:19:5: keyword while
memmove.c:19:11: punctuator (
memmove.c:19:12: identifier n
memmove.c:19:13: punctuator --
memmove.c:19:16: punctuator !=
memmove.c:19:19: constant 0
memmove.c:19:20: punctuator )
memmove.c:20:7: identifier dstp
memmove.c:20:11: punctuator [
memmove.c:20:12: identifier n
memmove.c:20:13: punctuator ]
memmove.c:20:15: punctuator =
memmove.c:20:17: identifier srcp
memmove.c:20:21: punctuator [
memmove.c:20:22: identifier n
memmove.c:20:23: punctuator ]
memmove.c:20:24: punctuator ;
memmove.c:21:3: keyword else
memmove.c:22:5: keyword while
memmove.c:22:11: punctuator (
memmove.c:22:12: identifier n
memmove.c:22:13: punctuator --
memmove.c:22:16: punctuator !=
memmove.c:22:19: constant 0
memmove.c:22:20: punctuator )
memmove.c:23:7: punctuator *
memmove.c:23:8: identifier dstp
memmove.c:23:12: punctuator ++
memmove.c:23:15: punctuator =
memmove.c:23:17: punctuator *
memmove.c:23:18: identifier srcp
memmove.c:23:22: punctuator ++
memmove.c:23:24: punctuator ;
memmove.c:25:3: keyword return
memmove.c:25:10: identifier dst
memmove.c:25:13: punctuator ;
memmove.c:26:1: punctuator }
memmove.c:28:1: keyword void
memmove.c:29:1: identifier bcopy
memmove.c:29:7: punctuator (
memmove.c:29:8: keyword const
memmove.c:29:14: keyword void
memmove.c:29:19: punctuator *
memmove.c:29:20: identifier src
memmove.c:29:23: punctuator ,
memmove.c:29:25: keyword void
memmove.c:29:30: punctuator *
memmove.c:29:31: identifier dst
memmove.c:29:34: punctuator ,
memmove.c:29:36: keyword long
memmove.c:29:41: keyword unsigned
memmove.c:29:50: keyword int
memmove.c:29:54: identifier n
memmove.c:29:55: punctuator )
memmove.c:30:1: punctuator {
memmove.c:31:3: identifier memmove
memmove.c:31:11: punctuator (
memmove.c:31:12: identifier dst
memmove.c:31:15: punctuator ,
memmove.c:31:17: identifier src
memmove.c:31:20: punctuator ,
memmove.c:31:22: identifier n
memmove.c:31:23: punctuator )
memmove.c:31:24: punctuator ;
memmove.c:32:1: punctuator }
