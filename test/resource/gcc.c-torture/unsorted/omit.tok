0
omit.c:1:1: identifier omit
omit.c:1:6: punctuator (
omit.c:1:7: identifier a
omit.c:1:8: punctuator ,
omit.c:1:10: identifier b
omit.c:1:11: punctuator )
omit.c:2:5: keyword char
omit.c:2:10: identifier a
omit.c:2:11: punctuator ;
omit.c:3:5: keyword char
omit.c:3:10: punctuator *
omit.c:3:11: identifier b
omit.c:3:12: punctuator ;
omit.c:4:1: punctuator {
omit.c:5:3: keyword char
omit.c:5:8: identifier x
omit.c:5:9: punctuator ;
omit.c:6:3: keyword int
omit.c:6:7: identifier i
omit.c:6:8: punctuator ;
omit.c:7:3: identifier x
omit.c:7:5: punctuator =
omit.c:7:7: punctuator *
omit.c:7:8: identifier b
omit.c:7:9: punctuator ;
omit.c:8:3: identifier b
omit.c:8:4: punctuator [
omit.c:8:5: constant 1
omit.c:8:6: punctuator ]
omit.c:8:8: punctuator =
omit.c:8:10: identifier x
omit.c:8:11: punctuator ;
omit.c:9:3: identifier foo
omit.c:9:7: punctuator (
omit.c:9:8: punctuator (
omit.c:9:9: keyword int
omit.c:9:12: punctuator )
omit.c:9:13: identifier x
omit.c:9:14: punctuator )
omit.c:9:15: punctuator ;
omit.c:10:3: keyword return
omit.c:10:10: identifier x
omit.c:10:12: punctuator +
omit.c:10:14: constant 1
omit.c:10:15: punctuator ;
omit.c:11:1: punctuator }
