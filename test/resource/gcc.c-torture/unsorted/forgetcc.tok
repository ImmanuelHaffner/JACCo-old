0
forgetcc.c:1:1: identifier foo
forgetcc.c:1:5: punctuator (
forgetcc.c:1:6: identifier hp
forgetcc.c:1:8: punctuator ,
forgetcc.c:1:10: identifier p
forgetcc.c:1:11: punctuator ,
forgetcc.c:1:13: identifier a
forgetcc.c:1:14: punctuator )
forgetcc.c:2:6: keyword short
forgetcc.c:2:12: punctuator *
forgetcc.c:2:13: identifier hp
forgetcc.c:2:15: punctuator ;
forgetcc.c:3:6: keyword int
forgetcc.c:3:10: punctuator *
forgetcc.c:3:11: identifier p
forgetcc.c:3:12: punctuator ;
forgetcc.c:4:6: keyword int
forgetcc.c:4:10: identifier a
forgetcc.c:4:11: punctuator ;
forgetcc.c:5:1: punctuator {
forgetcc.c:6:3: identifier hp
forgetcc.c:6:5: punctuator [
forgetcc.c:6:6: constant 10
forgetcc.c:6:8: punctuator ]
forgetcc.c:6:10: punctuator =
forgetcc.c:6:12: identifier a
forgetcc.c:6:13: punctuator ;
forgetcc.c:7:3: identifier p
forgetcc.c:7:4: punctuator [
forgetcc.c:7:5: constant 0
forgetcc.c:7:6: punctuator ]
forgetcc.c:7:8: punctuator =
forgetcc.c:7:10: constant 10
forgetcc.c:7:12: punctuator ;
forgetcc.c:8:3: keyword if
forgetcc.c:8:6: punctuator (
forgetcc.c:8:7: identifier hp
forgetcc.c:8:9: punctuator [
forgetcc.c:8:10: constant 10
forgetcc.c:8:12: punctuator ]
forgetcc.c:8:14: punctuator >
forgetcc.c:8:16: constant 0
forgetcc.c:8:17: punctuator )
forgetcc.c:9:5: keyword return
forgetcc.c:9:12: constant 1
forgetcc.c:9:13: punctuator ;
forgetcc.c:10:3: keyword return
forgetcc.c:10:10: constant 0
forgetcc.c:10:11: punctuator ;
forgetcc.c:11:1: punctuator }
