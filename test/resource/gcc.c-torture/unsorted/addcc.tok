0
addcc.c:1:1: identifier foo
addcc.c:1:5: punctuator (
addcc.c:1:6: identifier p
addcc.c:1:7: punctuator ,
addcc.c:1:9: identifier a
addcc.c:1:10: punctuator ,
addcc.c:1:12: identifier b
addcc.c:1:13: punctuator )
addcc.c:2:6: keyword int
addcc.c:2:10: punctuator *
addcc.c:2:11: identifier p
addcc.c:2:12: punctuator ;
addcc.c:3:6: keyword int
addcc.c:3:10: identifier a
addcc.c:3:11: punctuator ;
addcc.c:4:6: keyword int
addcc.c:4:10: identifier b
addcc.c:4:11: punctuator ;
addcc.c:5:1: punctuator {
addcc.c:7:3: identifier a
addcc.c:7:5: punctuator +=
addcc.c:7:8: identifier p
addcc.c:7:9: punctuator [
addcc.c:7:10: constant 0
addcc.c:7:11: punctuator ]
addcc.c:7:12: punctuator ;
addcc.c:8:3: identifier b
addcc.c:8:5: punctuator +=
addcc.c:8:8: identifier p
addcc.c:8:9: punctuator [
addcc.c:8:10: constant 1
addcc.c:8:11: punctuator ]
addcc.c:8:12: punctuator ;
addcc.c:9:3: keyword if
addcc.c:9:6: punctuator (
addcc.c:9:7: identifier a
addcc.c:9:9: punctuator ==
addcc.c:9:12: constant 0
addcc.c:9:13: punctuator )
addcc.c:10:5: keyword return
addcc.c:10:12: identifier b
addcc.c:10:13: punctuator ;
addcc.c:11:3: keyword return
addcc.c:11:10: identifier a
addcc.c:11:11: punctuator ;
addcc.c:12:1: punctuator }
addcc.c:15:1: identifier bar
addcc.c:15:5: punctuator (
addcc.c:15:6: identifier a
addcc.c:15:7: punctuator )
addcc.c:16:1: punctuator {
addcc.c:17:3: keyword return
addcc.c:17:10: punctuator -
addcc.c:17:11: identifier a
addcc.c:17:13: punctuator >
addcc.c:17:15: constant 0
addcc.c:17:17: punctuator ?
addcc.c:17:19: constant 1
addcc.c:17:21: punctuator :
addcc.c:17:23: constant 2
addcc.c:17:24: punctuator ;
addcc.c:18:1: punctuator }
